searchNodes=[{"doc":"Core keeps the contexts that define your domain and business logic. Contexts are also responsible for managing your data, regardless if it comes from the database, an external API or others.","ref":"Core.html","title":"Core","type":"module"},{"doc":"The APNS context.","ref":"Core.APNS.html","title":"Core.APNS","type":"module"},{"doc":"","ref":"Core.APNS.html#get_push_tokens/1","title":"Core.APNS.get_push_tokens/1","type":"function"},{"doc":"","ref":"Core.APNS.html#register/2","title":"Core.APNS.register/2","type":"function"},{"doc":"","ref":"Core.APNS.html#send_notification/2","title":"Core.APNS.send_notification/2","type":"function"},{"doc":"","ref":"Core.APNS.Backend.html","title":"Core.APNS.Backend","type":"behaviour"},{"doc":"","ref":"Core.APNS.Backend.html#c:send_notification/1","title":"Core.APNS.Backend.send_notification/1","type":"callback"},{"doc":"","ref":"Core.APNS.DeviceToken.html","title":"Core.APNS.DeviceToken","type":"module"},{"doc":"","ref":"Core.APNS.LoggingBackend.html","title":"Core.APNS.LoggingBackend","type":"module"},{"doc":"Callback implementation for Core.APNS.Backend.send_notification/1 .","ref":"Core.APNS.LoggingBackend.html#send_notification/1","title":"Core.APNS.LoggingBackend.send_notification/1","type":"function"},{"doc":"","ref":"Core.APNS.SignalHandlers.html","title":"Core.APNS.SignalHandlers","type":"module"},{"doc":"Render an Phoenix template and set the body on the email. Pass an atom as the template name (:welcome_email) to render HTML and plain text emails. Use a string if you only want to render one type, e.g. &quot;welcome_email.text&quot; or &quot;welcome_email.html&quot;. Scroll to the top for more examples.","ref":"Core.APNS.SignalHandlers.html#render/3","title":"Core.APNS.SignalHandlers.render/3","type":"function"},{"doc":"The Accounts context.","ref":"Core.Accounts.html","title":"Core.Accounts","type":"module"},{"doc":"Emulates that the email will change without actually changing it in the database. Examples iex&gt; apply_user_email ( user , &quot;valid password&quot; , %{ email : ... } ) { :ok , % User { } } iex&gt; apply_user_email ( user , &quot;invalid password&quot; , %{ email : ... } ) { :error , % Ecto.Changeset { } }","ref":"Core.Accounts.html#apply_user_email/3","title":"Core.Accounts.apply_user_email/3","type":"function"},{"doc":"","ref":"Core.Accounts.html#change_profile/2","title":"Core.Accounts.change_profile/2","type":"function"},{"doc":"Returns an %Ecto.Changeset{} for changing the user email. Examples iex&gt; change_user_email ( user ) % Ecto.Changeset { data : % User { } }","ref":"Core.Accounts.html#change_user_email/2","title":"Core.Accounts.change_user_email/2","type":"function"},{"doc":"Returns an %Ecto.Changeset{} for changing the user password. Examples iex&gt; change_user_password ( user ) % Ecto.Changeset { data : % User { } }","ref":"Core.Accounts.html#change_user_password/2","title":"Core.Accounts.change_user_password/2","type":"function"},{"doc":"Returns an %Ecto.Changeset{} for tracking user changes. Examples iex&gt; change_user_registration ( user ) % Ecto.Changeset { data : % User { } }","ref":"Core.Accounts.html#change_user_registration/2","title":"Core.Accounts.change_user_registration/2","type":"function"},{"doc":"Confirms a user by the given token. If the token matches, the user account is marked as confirmed and the token is deleted.","ref":"Core.Accounts.html#confirm_user/1","title":"Core.Accounts.confirm_user/1","type":"function"},{"doc":"Deletes the signed token with the given context.","ref":"Core.Accounts.html#delete_session_token/1","title":"Core.Accounts.delete_session_token/1","type":"function"},{"doc":"","ref":"Core.Accounts.html#deliver_already_activated_notification/2","title":"Core.Accounts.deliver_already_activated_notification/2","type":"function"},{"doc":"Delivers the update email instructions to the given user. Examples iex&gt; deliver_update_email_instructions ( user , current_email , &amp; Routes . user_update_email_url ( conn , :edit , &amp;1 ) ) { :ok , %{ to : ... , body : ... } }","ref":"Core.Accounts.html#deliver_update_email_instructions/3","title":"Core.Accounts.deliver_update_email_instructions/3","type":"function"},{"doc":"Delivers the confirmation email instructions to the given user. Examples iex&gt; deliver_user_confirmation_instructions ( user , &amp; Routes . user_confirmation_url ( conn , :confirm , &amp;1 ) ) { :ok , %{ to : ... , body : ... } } iex&gt; deliver_user_confirmation_instructions ( confirmed_user , &amp; Routes . user_confirmation_url ( conn , :confirm , &amp;1 ) ) { :error , :already_confirmed }","ref":"Core.Accounts.html#deliver_user_confirmation_instructions/2","title":"Core.Accounts.deliver_user_confirmation_instructions/2","type":"function"},{"doc":"Delivers the reset password email to the given user. Examples iex&gt; deliver_user_reset_password_instructions ( user , &amp; Routes . user_reset_password_url ( conn , :edit , &amp;1 ) ) { :ok , %{ to : ... , body : ... } }","ref":"Core.Accounts.html#deliver_user_reset_password_instructions/2","title":"Core.Accounts.deliver_user_reset_password_instructions/2","type":"function"},{"doc":"Generates a session token.","ref":"Core.Accounts.html#generate_user_session_token/1","title":"Core.Accounts.generate_user_session_token/1","type":"function"},{"doc":"","ref":"Core.Accounts.html#get_display_label/1","title":"Core.Accounts.get_display_label/1","type":"function"},{"doc":"","ref":"Core.Accounts.html#get_profile/1","title":"Core.Accounts.get_profile/1","type":"function"},{"doc":"Gets a single user. Raises Ecto.NoResultsError if the User does not exist. Examples iex&gt; get_user! ( 123 ) % User { } iex&gt; get_user! ( 456 ) ** (Ecto.NoResultsError)","ref":"Core.Accounts.html#get_user!/1","title":"Core.Accounts.get_user!/1","type":"function"},{"doc":"Gets a user by email. Examples iex&gt; get_user_by_email ( &quot;foo@example.com&quot; ) % User { } iex&gt; get_user_by_email ( &quot;unknown@example.com&quot; ) nil","ref":"Core.Accounts.html#get_user_by_email/1","title":"Core.Accounts.get_user_by_email/1","type":"function"},{"doc":"Gets a user by email and password. Examples iex&gt; get_user_by_email_and_password ( &quot;foo@example.com&quot; , &quot;correct_password&quot; ) % User { } iex&gt; get_user_by_email_and_password ( &quot;foo@example.com&quot; , &quot;invalid_password&quot; ) nil","ref":"Core.Accounts.html#get_user_by_email_and_password/2","title":"Core.Accounts.get_user_by_email_and_password/2","type":"function"},{"doc":"Gets the user by reset password token. Examples iex&gt; get_user_by_reset_password_token ( &quot;validtoken&quot; ) % User { } iex&gt; get_user_by_reset_password_token ( &quot;invalidtoken&quot; ) nil","ref":"Core.Accounts.html#get_user_by_reset_password_token/1","title":"Core.Accounts.get_user_by_reset_password_token/1","type":"function"},{"doc":"Gets the user with the given signed token.","ref":"Core.Accounts.html#get_user_by_session_token/1","title":"Core.Accounts.get_user_by_session_token/1","type":"function"},{"doc":"Registers a user. Examples iex&gt; register_user ( %{ field : value } ) { :ok , % User { } } iex&gt; register_user ( %{ field : bad_value } ) { :error , % Ecto.Changeset { } }","ref":"Core.Accounts.html#register_user/1","title":"Core.Accounts.register_user/1","type":"function"},{"doc":"Resets the user password. Examples iex&gt; reset_user_password ( user , %{ password : &quot;new long password&quot; , password_confirmation : &quot;new long password&quot; } ) { :ok , % User { } } iex&gt; reset_user_password ( user , %{ password : &quot;valid&quot; , password_confirmation : &quot;not the same&quot; } ) { :error , % Ecto.Changeset { } }","ref":"Core.Accounts.html#reset_user_password/2","title":"Core.Accounts.reset_user_password/2","type":"function"},{"doc":"","ref":"Core.Accounts.html#update_profile/1","title":"Core.Accounts.update_profile/1","type":"function"},{"doc":"","ref":"Core.Accounts.html#update_profile/2","title":"Core.Accounts.update_profile/2","type":"function"},{"doc":"Updates the user email using the given token. If the token matches, the user email is updated and the token is deleted. The confirmed_at date is also updated to the current time.","ref":"Core.Accounts.html#update_user_email/2","title":"Core.Accounts.update_user_email/2","type":"function"},{"doc":"Updates the user password. Examples iex&gt; update_user_password ( user , &quot;valid password&quot; , %{ password : ... } ) { :ok , % User { } } iex&gt; update_user_password ( user , &quot;invalid password&quot; , %{ password : ... } ) { :error , % Ecto.Changeset { } }","ref":"Core.Accounts.html#update_user_password/3","title":"Core.Accounts.update_user_password/3","type":"function"},{"doc":"","ref":"Core.Accounts.html#update_user_profile/3","title":"Core.Accounts.update_user_profile/3","type":"function"},{"doc":"","ref":"Core.Accounts.Email.html","title":"Core.Accounts.Email","type":"module"},{"doc":"","ref":"Core.Accounts.Email.html#account_confirmation_instructions/2","title":"Core.Accounts.Email.account_confirmation_instructions/2","type":"function"},{"doc":"","ref":"Core.Accounts.Email.html#already_activated_notification/2","title":"Core.Accounts.Email.already_activated_notification/2","type":"function"},{"doc":"","ref":"Core.Accounts.Email.html#mail_user/1","title":"Core.Accounts.Email.mail_user/1","type":"function"},{"doc":"Render an Phoenix template and set the body on the email. Pass an atom as the template name (:welcome_email) to render HTML and plain text emails. Use a string if you only want to render one type, e.g. &quot;welcome_email.text&quot; or &quot;welcome_email.html&quot;. Scroll to the top for more examples.","ref":"Core.Accounts.Email.html#render/3","title":"Core.Accounts.Email.render/3","type":"function"},{"doc":"","ref":"Core.Accounts.Email.html#reset_password_instructions/2","title":"Core.Accounts.Email.reset_password_instructions/2","type":"function"},{"doc":"","ref":"Core.Accounts.Email.html#update_email_instructions/2","title":"Core.Accounts.Email.update_email_instructions/2","type":"function"},{"doc":"","ref":"Core.Accounts.EmailView.html","title":"Core.Accounts.EmailView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"Core.Accounts.EmailView.html#__resource__/0","title":"Core.Accounts.EmailView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"Core.Accounts.EmailView.html#render/2","title":"Core.Accounts.EmailView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"Core.Accounts.EmailView.html#template_not_found/2","title":"Core.Accounts.EmailView.template_not_found/2","type":"function"},{"doc":"This schema contains profile related data for members.","ref":"Core.Accounts.Profile.html","title":"Core.Accounts.Profile","type":"module"},{"doc":"The User module encapsulates the changesets for creating and updating users. The logic for hashing passwords is also managed here. Bcrypt is used as adviced by OWASP: https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#password-hashing-algorithms","ref":"Core.Accounts.User.html","title":"Core.Accounts.User","type":"module"},{"doc":"Confirms the account by setting confirmed_at .","ref":"Core.Accounts.User.html#confirm_changeset/1","title":"Core.Accounts.User.confirm_changeset/1","type":"function"},{"doc":"A user changeset for changing the display name.","ref":"Core.Accounts.User.html#display_changeset/2","title":"Core.Accounts.User.display_changeset/2","type":"function"},{"doc":"A user changeset for changing the email. It requires the email to change otherwise an error is added.","ref":"Core.Accounts.User.html#email_changeset/2","title":"Core.Accounts.User.email_changeset/2","type":"function"},{"doc":"","ref":"Core.Accounts.User.html#new_session_changeset/1","title":"Core.Accounts.User.new_session_changeset/1","type":"function"},{"doc":"A user changeset for changing the password. Options :hash_password - Hashes the password so it can be stored securely in the database and ensures the password field is cleared to prevent leaks in the logs. If password hashing is not needed and clearing the password field is not desired (like when using this changeset for validations on a LiveView form), this option can be set to false . Defaults to true .","ref":"Core.Accounts.User.html#password_changeset/3","title":"Core.Accounts.User.password_changeset/3","type":"function"},{"doc":"A user changeset for registration. It is important to validate the length of both email and password. Otherwise databases may truncate the email without warnings, which could lead to unpredictable or insecure behaviour. Long passwords may also be very expensive to hash for certain algorithms. Options :hash_password - Hashes the password so it can be stored securely in the database and ensures the password field is cleared to prevent leaks in the logs. If password hashing is not needed and clearing the password field is not desired (like when using this changeset for validations on a LiveView form), this option can be set to false . Defaults to true .","ref":"Core.Accounts.User.html#registration_changeset/3","title":"Core.Accounts.User.registration_changeset/3","type":"function"},{"doc":"A user changeset for use with Single Sign On systems. It implicitly trusts most data that it receives.","ref":"Core.Accounts.User.html#sso_changeset/2","title":"Core.Accounts.User.sso_changeset/2","type":"function"},{"doc":"User changeset for profile page","ref":"Core.Accounts.User.html#user_profile_changeset/2","title":"Core.Accounts.User.user_profile_changeset/2","type":"function"},{"doc":"","ref":"Core.Accounts.User.html#valid_email_changeset/1","title":"Core.Accounts.User.valid_email_changeset/1","type":"function"},{"doc":"Verifies the password. If there is no user or the user doesn't have a password, we call Bcrypt.no_user_verify/0 to avoid timing attacks.","ref":"Core.Accounts.User.html#valid_password?/2","title":"Core.Accounts.User.valid_password?/2","type":"function"},{"doc":"Validates the current password otherwise adds an error to the changeset.","ref":"Core.Accounts.User.html#validate_current_password/2","title":"Core.Accounts.User.validate_current_password/2","type":"function"},{"doc":"","ref":"Core.Accounts.UserNotifier.html","title":"Core.Accounts.UserNotifier","type":"module"},{"doc":"Deliver instructions to users that are already activated.","ref":"Core.Accounts.UserNotifier.html#deliver_already_activated_notification/2","title":"Core.Accounts.UserNotifier.deliver_already_activated_notification/2","type":"function"},{"doc":"Deliver instructions to confirm account.","ref":"Core.Accounts.UserNotifier.html#deliver_confirmation_instructions/2","title":"Core.Accounts.UserNotifier.deliver_confirmation_instructions/2","type":"function"},{"doc":"Deliver instructions to reset a user password.","ref":"Core.Accounts.UserNotifier.html#deliver_reset_password_instructions/2","title":"Core.Accounts.UserNotifier.deliver_reset_password_instructions/2","type":"function"},{"doc":"Deliver instructions to update a user email.","ref":"Core.Accounts.UserNotifier.html#deliver_update_email_instructions/2","title":"Core.Accounts.UserNotifier.deliver_update_email_instructions/2","type":"function"},{"doc":"The study type.","ref":"Core.Accounts.UserProfileEdit.html","title":"Core.Accounts.UserProfileEdit","type":"module"},{"doc":"","ref":"Core.Accounts.UserProfileEdit.html#changeset/3","title":"Core.Accounts.UserProfileEdit.changeset/3","type":"function"},{"doc":"","ref":"Core.Accounts.UserProfileEdit.html#create/2","title":"Core.Accounts.UserProfileEdit.create/2","type":"function"},{"doc":"","ref":"Core.Accounts.UserProfileEdit.html#to_profile/1","title":"Core.Accounts.UserProfileEdit.to_profile/1","type":"function"},{"doc":"","ref":"Core.Accounts.UserProfileEdit.html#to_user/1","title":"Core.Accounts.UserProfileEdit.to_user/1","type":"function"},{"doc":"","ref":"Core.Accounts.UserProfileEdit.html#validate_optional_url/2","title":"Core.Accounts.UserProfileEdit.validate_optional_url/2","type":"function"},{"doc":"","ref":"Core.Accounts.UserToken.html","title":"Core.Accounts.UserToken","type":"module"},{"doc":"Builds a token with a hashed counter part. The non-hashed token is sent to the user email while the hashed part is stored in the database, to avoid reconstruction. The token is valid for a week as long as users don't change their email.","ref":"Core.Accounts.UserToken.html#build_email_token/2","title":"Core.Accounts.UserToken.build_email_token/2","type":"function"},{"doc":"Generates a token that will be stored in a signed place, such as session or cookie. As they are signed, those tokens do not need to be hashed.","ref":"Core.Accounts.UserToken.html#build_session_token/1","title":"Core.Accounts.UserToken.build_session_token/1","type":"function"},{"doc":"Returns the given token with the given context.","ref":"Core.Accounts.UserToken.html#token_and_context_query/2","title":"Core.Accounts.UserToken.token_and_context_query/2","type":"function"},{"doc":"Gets all tokens for the given user for the given contexts.","ref":"Core.Accounts.UserToken.html#user_and_contexts_query/2","title":"Core.Accounts.UserToken.user_and_contexts_query/2","type":"function"},{"doc":"Checks if the token is valid and returns its underlying lookup query. The query returns the user token record.","ref":"Core.Accounts.UserToken.html#verify_change_email_token_query/2","title":"Core.Accounts.UserToken.verify_change_email_token_query/2","type":"function"},{"doc":"Checks if the token is valid and returns its underlying lookup query. The query returns the user found by the token.","ref":"Core.Accounts.UserToken.html#verify_email_token_query/2","title":"Core.Accounts.UserToken.verify_email_token_query/2","type":"function"},{"doc":"Checks if the token is valid and returns its underlying lookup query. The query returns the user found by the token.","ref":"Core.Accounts.UserToken.html#verify_session_token_query/1","title":"Core.Accounts.UserToken.verify_session_token_query/1","type":"function"},{"doc":"The authorization system for Core. It makes use of the GreenLight framework to manage permissions and authorization.","ref":"Core.Authorization.html","title":"Core.Authorization","type":"module"},{"doc":"","ref":"Core.Authorization.html#allowed?/2","title":"Core.Authorization.allowed?/2","type":"function"},{"doc":"Assign a role by piping the result of an Ecto insert operation directly into this function.","ref":"Core.Authorization.html#assign_role/3","title":"Core.Authorization.assign_role/3","type":"function"},{"doc":"","ref":"Core.Authorization.html#build_role_assignment/3","title":"Core.Authorization.build_role_assignment/3","type":"function"},{"doc":"","ref":"Core.Authorization.html#can?/2","title":"Core.Authorization.can?/2","type":"function"},{"doc":"","ref":"Core.Authorization.html#can?/3","title":"Core.Authorization.can?/3","type":"function"},{"doc":"","ref":"Core.Authorization.html#can?/4","title":"Core.Authorization.can?/4","type":"function"},{"doc":"","ref":"Core.Authorization.html#can_access?/2","title":"Core.Authorization.can_access?/2","type":"function"},{"doc":"","ref":"Core.Authorization.html#can_access?/3","title":"Core.Authorization.can_access?/3","type":"function"},{"doc":"","ref":"Core.Authorization.html#create_node/1","title":"Core.Authorization.create_node/1","type":"function"},{"doc":"","ref":"Core.Authorization.html#get_parent_nodes/1","title":"Core.Authorization.get_parent_nodes/1","type":"function"},{"doc":"","ref":"Core.Authorization.html#list_principals/1","title":"Core.Authorization.list_principals/1","type":"function"},{"doc":"","ref":"Core.Authorization.html#list_roles/2","title":"Core.Authorization.list_roles/2","type":"function"},{"doc":"","ref":"Core.Authorization.html#make_node/0","title":"Core.Authorization.make_node/0","type":"function"},{"doc":"","ref":"Core.Authorization.html#make_node/1","title":"Core.Authorization.make_node/1","type":"function"},{"doc":"","ref":"Core.Authorization.html#permission_map/0","title":"Core.Authorization.permission_map/0","type":"function"},{"doc":"","ref":"Core.Authorization.html#possible_roles/0","title":"Core.Authorization.possible_roles/0","type":"function"},{"doc":"","ref":"Core.Authorization.html#query_node_ids/1","title":"Core.Authorization.query_node_ids/1","type":"function"},{"doc":"","ref":"Core.Authorization.html#query_principal_ids/1","title":"Core.Authorization.query_principal_ids/1","type":"function"},{"doc":"","ref":"Core.Authorization.html#query_role_assignment/3","title":"Core.Authorization.query_role_assignment/3","type":"function"},{"doc":"","ref":"Core.Authorization.html#remove_role!/3","title":"Core.Authorization.remove_role!/3","type":"function"},{"doc":"","ref":"Core.Authorization.html#role_assignment_schema/0","title":"Core.Authorization.role_assignment_schema/0","type":"function"},{"doc":"","ref":"Core.Authorization.html#roles_intersect?/3","title":"Core.Authorization.roles_intersect?/3","type":"function"},{"doc":"","ref":"Core.Authorization.html#users_with_role/2","title":"Core.Authorization.users_with_role/2","type":"function"},{"doc":"An authorization node represents a context where principals can gain additional roles. They can be nested to create a tree structure.","ref":"Core.Authorization.Node.html","title":"Core.Authorization.Node","type":"module"},{"doc":"A role assignment entity is used to assign a role to a principal on a specific entity.","ref":"Core.Authorization.RoleAssignment.html","title":"Core.Authorization.RoleAssignment","type":"module"},{"doc":"","ref":"Core.BundleOverrides.html","title":"Core.BundleOverrides","type":"module"},{"doc":"","ref":"Core.BundleOverrides.html#grants/0","title":"Core.BundleOverrides.grants/0","type":"macro"},{"doc":"","ref":"Core.BundleOverrides.html#routes/0","title":"Core.BundleOverrides.routes/0","type":"macro"},{"doc":"A data uploader allows a research to ask participants to submit data. This data is submitted in the form of a file that is stored on the participants device. Tools are provided that allow for execution of filtering code on the device of the participant. This ensures that only the data that is needed for the research is shared with the researcher.","ref":"Core.DataUploader.html","title":"Core.DataUploader","type":"module"},{"doc":"","ref":"Core.DataUploader.html#change_client_script/3","title":"Core.DataUploader.change_client_script/3","type":"function"},{"doc":"","ref":"Core.DataUploader.html#create_client_script/2","title":"Core.DataUploader.create_client_script/2","type":"function"},{"doc":"","ref":"Core.DataUploader.html#delete_client_script/1","title":"Core.DataUploader.delete_client_script/1","type":"function"},{"doc":"","ref":"Core.DataUploader.html#get_client_script/1","title":"Core.DataUploader.get_client_script/1","type":"function"},{"doc":"","ref":"Core.DataUploader.html#get_client_script!/1","title":"Core.DataUploader.get_client_script!/1","type":"function"},{"doc":"","ref":"Core.DataUploader.html#list_client_scripts/0","title":"Core.DataUploader.list_client_scripts/0","type":"function"},{"doc":"","ref":"Core.DataUploader.html#update_client_script/1","title":"Core.DataUploader.update_client_script/1","type":"function"},{"doc":"","ref":"Core.DataUploader.html#update_client_script/2","title":"Core.DataUploader.update_client_script/2","type":"function"},{"doc":"","ref":"Core.DataUploader.ClientScript.html","title":"Core.DataUploader.ClientScript","type":"module"},{"doc":"","ref":"Core.EmailLayoutView.html","title":"Core.EmailLayoutView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"Core.EmailLayoutView.html#__resource__/0","title":"Core.EmailLayoutView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"Core.EmailLayoutView.html#render/2","title":"Core.EmailLayoutView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"Core.EmailLayoutView.html#template_not_found/2","title":"Core.EmailLayoutView.template_not_found/2","type":"function"},{"doc":"This module provides factory function to be used for tests.","ref":"Core.Factories.html","title":"Core.Factories","type":"module"},{"doc":"","ref":"Core.Factories.html#build/1","title":"Core.Factories.build/1","type":"function"},{"doc":"","ref":"Core.Factories.html#build/2","title":"Core.Factories.build/2","type":"function"},{"doc":"","ref":"Core.Factories.html#insert!/1","title":"Core.Factories.insert!/1","type":"function"},{"doc":"","ref":"Core.Factories.html#insert!/2","title":"Core.Factories.insert!/2","type":"function"},{"doc":"","ref":"Core.Factories.html#many_relationship/2","title":"Core.Factories.many_relationship/2","type":"function"},{"doc":"","ref":"Core.Factories.html#map_build/3","title":"Core.Factories.map_build/3","type":"function"},{"doc":"","ref":"Core.Factories.html#valid_user_password/0","title":"Core.Factories.valid_user_password/0","type":"function"},{"doc":"","ref":"Core.ImageCatalog.html","title":"Core.ImageCatalog","type":"behaviour"},{"doc":"Returns the URLs for the given image (if available)","ref":"Core.ImageCatalog.html#c:info/2","title":"Core.ImageCatalog.info/2","type":"callback"},{"doc":"","ref":"Core.ImageCatalog.html#c:search/3","title":"Core.ImageCatalog.search/3","type":"callback"},{"doc":"","ref":"Core.ImageCatalog.html#c:search_info/4","title":"Core.ImageCatalog.search_info/4","type":"callback"},{"doc":"","ref":"Core.ImageCatalog.html#t:image_id/0","title":"Core.ImageCatalog.image_id/0","type":"type"},{"doc":"","ref":"Core.ImageCatalog.html#t:image_info/0","title":"Core.ImageCatalog.image_info/0","type":"type"},{"doc":"","ref":"Core.ImageCatalog.html#t:image_size/0","title":"Core.ImageCatalog.image_size/0","type":"type"},{"doc":"","ref":"Core.ImageCatalog.html#t:meta_info/0","title":"Core.ImageCatalog.meta_info/0","type":"type"},{"doc":"","ref":"Core.ImageCatalog.html#t:search_info_result/0","title":"Core.ImageCatalog.search_info_result/0","type":"type"},{"doc":"","ref":"Core.ImageCatalog.html#t:search_result/0","title":"Core.ImageCatalog.search_result/0","type":"type"},{"doc":"","ref":"Core.ImageCatalog.html#t:url_opts/0","title":"Core.ImageCatalog.url_opts/0","type":"type"},{"doc":"","ref":"Core.ImageCatalog.Local.html","title":"Core.ImageCatalog.Local","type":"module"},{"doc":"Callback implementation for Core.ImageCatalog.info/2 .","ref":"Core.ImageCatalog.Local.html#info/2","title":"Core.ImageCatalog.Local.info/2","type":"function"},{"doc":"Callback implementation for Core.ImageCatalog.search/3 .","ref":"Core.ImageCatalog.Local.html#search/3","title":"Core.ImageCatalog.Local.search/3","type":"function"},{"doc":"Callback implementation for Core.ImageCatalog.search_info/4 .","ref":"Core.ImageCatalog.Local.html#search_info/4","title":"Core.ImageCatalog.Local.search_info/4","type":"function"},{"doc":"","ref":"Core.ImageCatalog.Unsplash.html","title":"Core.ImageCatalog.Unsplash","type":"module"},{"doc":"","ref":"Core.ImageCatalog.Unsplash.html#info/2","title":"Core.ImageCatalog.Unsplash.info/2","type":"function"},{"doc":"","ref":"Core.ImageCatalog.Unsplash.html#search/3","title":"Core.ImageCatalog.Unsplash.search/3","type":"function"},{"doc":"","ref":"Core.ImageCatalog.Unsplash.html#search_info/4","title":"Core.ImageCatalog.Unsplash.search_info/4","type":"function"},{"doc":"","ref":"Core.ImageCatalog.Unsplash.Client.html","title":"Core.ImageCatalog.Unsplash.Client","type":"behaviour"},{"doc":"","ref":"Core.ImageCatalog.Unsplash.Client.html#c:get/3","title":"Core.ImageCatalog.Unsplash.Client.get/3","type":"callback"},{"doc":"","ref":"Core.ImageCatalog.Unsplash.Client.html#t:response/0","title":"Core.ImageCatalog.Unsplash.Client.response/0","type":"type"},{"doc":"","ref":"Core.ImageCatalog.Unsplash.HTTP.html","title":"Core.ImageCatalog.Unsplash.HTTP","type":"module"},{"doc":"Callback implementation for Core.ImageCatalog.Unsplash.Client.get/3 .","ref":"Core.ImageCatalog.Unsplash.HTTP.html#get/3","title":"Core.ImageCatalog.Unsplash.HTTP.get/3","type":"function"},{"doc":"","ref":"Core.ImageHelpers.html","title":"Core.ImageHelpers","type":"module"},{"doc":"","ref":"Core.ImageHelpers.html#catalog/0","title":"Core.ImageHelpers.catalog/0","type":"function"},{"doc":"","ref":"Core.ImageHelpers.html#get_image_info/3","title":"Core.ImageHelpers.get_image_info/3","type":"function"},{"doc":"","ref":"Core.ImageHelpers.html#get_image_url/3","title":"Core.ImageHelpers.get_image_url/3","type":"function"},{"doc":"","ref":"Core.Mailer.html","title":"Core.Mailer","type":"module"},{"doc":"","ref":"Core.Mailer.html#base_email/0","title":"Core.Mailer.base_email/0","type":"function"},{"doc":"","ref":"Core.Mailer.html#deliver/1","title":"Core.Mailer.deliver/1","type":"function"},{"doc":"","ref":"Core.Mailer.html#deliver_later/2","title":"Core.Mailer.deliver_later/2","type":"function"},{"doc":"","ref":"Core.Mailer.html#deliver_later!/2","title":"Core.Mailer.deliver_later!/2","type":"function"},{"doc":"","ref":"Core.Mailer.html#deliver_now/2","title":"Core.Mailer.deliver_now/2","type":"function"},{"doc":"","ref":"Core.Mailer.html#deliver_now!/2","title":"Core.Mailer.deliver_now!/2","type":"function"},{"doc":"","ref":"Core.Mailer.EmailView.html","title":"Core.Mailer.EmailView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"Core.Mailer.EmailView.html#__resource__/0","title":"Core.Mailer.EmailView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"Core.Mailer.EmailView.html#render/2","title":"Core.Mailer.EmailView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"Core.Mailer.EmailView.html#template_not_found/2","title":"Core.Mailer.EmailView.template_not_found/2","type":"function"},{"doc":"","ref":"Core.Mailer.SignalHandlers.html","title":"Core.Mailer.SignalHandlers","type":"module"},{"doc":"Render an Phoenix template and set the body on the email. Pass an atom as the template name (:welcome_email) to render HTML and plain text emails. Use a string if you only want to render one type, e.g. &quot;welcome_email.text&quot; or &quot;welcome_email.html&quot;. Scroll to the top for more examples.","ref":"Core.Mailer.SignalHandlers.html#render/3","title":"Core.Mailer.SignalHandlers.render/3","type":"function"},{"doc":"Manages instances of marks. These marks are ultimately managed by administrators belonging to certain organizations. For the time being a set of hardcoded marks are provided.","ref":"Core.Marks.html","title":"Core.Marks","type":"module"},{"doc":"","ref":"Core.Marks.html#instances/0","title":"Core.Marks.instances/0","type":"function"},{"doc":"A sticker that represents some kind of authority.","ref":"Core.Marks.Mark.html","title":"Core.Marks.Mark","type":"module"},{"doc":"Documentation for NotificationCenter . title action (optional path to view)","ref":"Core.NotificationCenter.html","title":"Core.NotificationCenter","type":"module"},{"doc":"","ref":"Core.NotificationCenter.html#get/1","title":"Core.NotificationCenter.get/1","type":"function"},{"doc":"","ref":"Core.NotificationCenter.html#get_or_create_box/1","title":"Core.NotificationCenter.get_or_create_box/1","type":"function"},{"doc":"","ref":"Core.NotificationCenter.html#list/1","title":"Core.NotificationCenter.list/1","type":"function"},{"doc":"","ref":"Core.NotificationCenter.html#mark/2","title":"Core.NotificationCenter.mark/2","type":"function"},{"doc":"","ref":"Core.NotificationCenter.html#notify/2","title":"Core.NotificationCenter.notify/2","type":"function"},{"doc":"","ref":"Core.NotificationCenter.html#notify_users_with_role/3","title":"Core.NotificationCenter.notify_users_with_role/3","type":"function"},{"doc":"The box type.","ref":"Core.NotificationCenter.Box.html","title":"Core.NotificationCenter.Box","type":"module"},{"doc":"The notification type.","ref":"Core.NotificationCenter.Notification.html","title":"Core.NotificationCenter.Notification","type":"module"},{"doc":"","ref":"Core.NotificationCenter.SignalHandlers.html","title":"Core.NotificationCenter.SignalHandlers","type":"module"},{"doc":"","ref":"Core.Release.html","title":"Core.Release","type":"module"},{"doc":"","ref":"Core.Release.html#migrate/0","title":"Core.Release.migrate/0","type":"function"},{"doc":"","ref":"Core.Release.html#rollback/2","title":"Core.Release.rollback/2","type":"function"},{"doc":"","ref":"Core.Repo.html","title":"Core.Repo","type":"module"},{"doc":"Callback implementation for Ecto.Repo.aggregate/3 .","ref":"Core.Repo.html#aggregate/3","title":"Core.Repo.aggregate/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.aggregate/4 .","ref":"Core.Repo.html#aggregate/4","title":"Core.Repo.aggregate/4","type":"function"},{"doc":"Callback implementation for Ecto.Repo.all/2 .","ref":"Core.Repo.html#all/2","title":"Core.Repo.all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checked_out?/0 .","ref":"Core.Repo.html#checked_out?/0","title":"Core.Repo.checked_out?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checkout/2 .","ref":"Core.Repo.html#checkout/2","title":"Core.Repo.checkout/2","type":"function"},{"doc":"","ref":"Core.Repo.html#child_spec/1","title":"Core.Repo.child_spec/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.config/0 .","ref":"Core.Repo.html#config/0","title":"Core.Repo.config/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.default_options/1 .","ref":"Core.Repo.html#default_options/1","title":"Core.Repo.default_options/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete/2 .","ref":"Core.Repo.html#delete/2","title":"Core.Repo.delete/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete!/2 .","ref":"Core.Repo.html#delete!/2","title":"Core.Repo.delete!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete_all/2 .","ref":"Core.Repo.html#delete_all/2","title":"Core.Repo.delete_all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.exists?/2 .","ref":"Core.Repo.html#exists?/2","title":"Core.Repo.exists?/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query. See Ecto.Adapters.SQL.explain/4 for more information.","ref":"Core.Repo.html#explain/3","title":"Core.Repo.explain/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get/3 .","ref":"Core.Repo.html#get/3","title":"Core.Repo.get/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get!/3 .","ref":"Core.Repo.html#get!/3","title":"Core.Repo.get!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by/3 .","ref":"Core.Repo.html#get_by/3","title":"Core.Repo.get_by/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by!/3 .","ref":"Core.Repo.html#get_by!/3","title":"Core.Repo.get_by!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0 .","ref":"Core.Repo.html#get_dynamic_repo/0","title":"Core.Repo.get_dynamic_repo/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.in_transaction?/0 .","ref":"Core.Repo.html#in_transaction?/0","title":"Core.Repo.in_transaction?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert/2 .","ref":"Core.Repo.html#insert/2","title":"Core.Repo.insert/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert!/2 .","ref":"Core.Repo.html#insert!/2","title":"Core.Repo.insert!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_all/3 .","ref":"Core.Repo.html#insert_all/3","title":"Core.Repo.insert_all/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update/2 .","ref":"Core.Repo.html#insert_or_update/2","title":"Core.Repo.insert_or_update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update!/2 .","ref":"Core.Repo.html#insert_or_update!/2","title":"Core.Repo.insert_or_update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.load/2 .","ref":"Core.Repo.html#load/2","title":"Core.Repo.load/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one/2 .","ref":"Core.Repo.html#one/2","title":"Core.Repo.one/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one!/2 .","ref":"Core.Repo.html#one!/2","title":"Core.Repo.one!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.preload/3 .","ref":"Core.Repo.html#preload/3","title":"Core.Repo.preload/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.prepare_query/3 .","ref":"Core.Repo.html#prepare_query/3","title":"Core.Repo.prepare_query/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1 .","ref":"Core.Repo.html#put_dynamic_repo/1","title":"Core.Repo.put_dynamic_repo/1","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"Core.Repo.html#query/3","title":"Core.Repo.query/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"Core.Repo.html#query!/3","title":"Core.Repo.query!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload/2 .","ref":"Core.Repo.html#reload/2","title":"Core.Repo.reload/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload!/2 .","ref":"Core.Repo.html#reload!/2","title":"Core.Repo.reload!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.rollback/1 .","ref":"Core.Repo.html#rollback/1","title":"Core.Repo.rollback/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.start_link/1 .","ref":"Core.Repo.html#start_link/1","title":"Core.Repo.start_link/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stop/1 .","ref":"Core.Repo.html#stop/1","title":"Core.Repo.stop/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stream/2 .","ref":"Core.Repo.html#stream/2","title":"Core.Repo.stream/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"Core.Repo.html#to_sql/2","title":"Core.Repo.to_sql/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.transaction/2 .","ref":"Core.Repo.html#transaction/2","title":"Core.Repo.transaction/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update/2 .","ref":"Core.Repo.html#update/2","title":"Core.Repo.update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update!/2 .","ref":"Core.Repo.html#update!/2","title":"Core.Repo.update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update_all/3 .","ref":"Core.Repo.html#update_all/3","title":"Core.Repo.update_all/3","type":"function"},{"doc":"","ref":"Core.Signals.html","title":"Core.Signals","type":"module"},{"doc":"","ref":"Core.Signals.html#dispatch/2","title":"Core.Signals.dispatch/2","type":"function"},{"doc":"","ref":"Core.Signals.html#dispatch!/2","title":"Core.Signals.dispatch!/2","type":"function"},{"doc":"","ref":"Core.Signals.html#multi_dispatch/3","title":"Core.Signals.multi_dispatch/3","type":"function"},{"doc":"","ref":"Core.Signals.Handlers.html","title":"Core.Signals.Handlers","type":"behaviour"},{"doc":"","ref":"Core.Signals.Handlers.html#c:dispatch/2","title":"Core.Signals.Handlers.dispatch/2","type":"callback"},{"doc":"The Studies context.","ref":"Core.Studies.html","title":"Core.Studies","type":"module"},{"doc":"","ref":"Core.Studies.html#add_author/2","title":"Core.Studies.add_author/2","type":"function"},{"doc":"","ref":"Core.Studies.html#add_owner!/2","title":"Core.Studies.add_owner!/2","type":"function"},{"doc":"","ref":"Core.Studies.html#assign_owners/2","title":"Core.Studies.assign_owners/2","type":"function"},{"doc":"Returns an %Ecto.Changeset{} for tracking study changes. Examples iex&gt; change_study ( study ) % Ecto.Changeset { data : % Study { } }","ref":"Core.Studies.html#change_study/2","title":"Core.Studies.change_study/2","type":"function"},{"doc":"Creates a study.","ref":"Core.Studies.html#create_study/2","title":"Core.Studies.create_study/2","type":"function"},{"doc":"Deletes a study. Examples iex&gt; delete_study ( study ) { :ok , % Study { } } iex&gt; delete_study ( study ) { :error , % Ecto.Changeset { } }","ref":"Core.Studies.html#delete_study/1","title":"Core.Studies.delete_study/1","type":"function"},{"doc":"Gets a single study. Raises Ecto.NoResultsError if the Study does not exist. Examples iex&gt; get_study! ( 123 ) % Study { } iex&gt; get_study! ( 456 ) ** (Ecto.NoResultsError)","ref":"Core.Studies.html#get_study!/1","title":"Core.Studies.get_study!/1","type":"function"},{"doc":"","ref":"Core.Studies.html#get_study_changeset/1","title":"Core.Studies.get_study_changeset/1","type":"function"},{"doc":"","ref":"Core.Studies.html#list_authors/1","title":"Core.Studies.list_authors/1","type":"function"},{"doc":"Returns the list of studies that are owned by the user.","ref":"Core.Studies.html#list_owned_studies/2","title":"Core.Studies.list_owned_studies/2","type":"function"},{"doc":"","ref":"Core.Studies.html#list_owners/1","title":"Core.Studies.list_owners/1","type":"function"},{"doc":"Returns the list of studies. Examples iex&gt; list_studies ( ) [ % Study { } , ... ]","ref":"Core.Studies.html#list_studies/1","title":"Core.Studies.list_studies/1","type":"function"},{"doc":"","ref":"Core.Studies.html#list_studies_with_published_survey/1","title":"Core.Studies.list_studies_with_published_survey/1","type":"function"},{"doc":"Returns the list of studies where the user is a subject.","ref":"Core.Studies.html#list_subject_studies/2","title":"Core.Studies.list_subject_studies/2","type":"function"},{"doc":"","ref":"Core.Studies.html#list_survey_tools/1","title":"Core.Studies.list_survey_tools/1","type":"function"},{"doc":"Updates a study. Examples iex&gt; update_study ( study , %{ field : new_value } ) { :ok , % Study { } } iex&gt; update_study ( study , %{ field : bad_value } ) { :error , % Ecto.Changeset { } }","ref":"Core.Studies.html#update_study/1","title":"Core.Studies.update_study/1","type":"function"},{"doc":"","ref":"Core.Studies.html#update_study/2","title":"Core.Studies.update_study/2","type":"function"},{"doc":"The schema for a study author.","ref":"Core.Studies.Author.html","title":"Core.Studies.Author","type":"module"},{"doc":"","ref":"Core.Studies.Author.html#changeset/1","title":"Core.Studies.Author.changeset/1","type":"function"},{"doc":"","ref":"Core.Studies.Author.html#from_user/1","title":"Core.Studies.Author.from_user/1","type":"function"},{"doc":"The schema for a study participant.","ref":"Core.Studies.Participant.html","title":"Core.Studies.Participant","type":"module"},{"doc":"The study type.","ref":"Core.Studies.Study.html","title":"Core.Studies.Study","type":"module"},{"doc":"The study type.","ref":"Core.Studies.StudyEdit.html","title":"Core.Studies.StudyEdit","type":"module"},{"doc":"","ref":"Core.Studies.StudyEdit.html#changeset/3","title":"Core.Studies.StudyEdit.changeset/3","type":"function"},{"doc":"","ref":"Core.Studies.StudyEdit.html#create/4","title":"Core.Studies.StudyEdit.create/4","type":"function"},{"doc":"","ref":"Core.Studies.StudyEdit.html#get_byline/1","title":"Core.Studies.StudyEdit.get_byline/1","type":"function"},{"doc":"","ref":"Core.Studies.StudyEdit.html#to_study/1","title":"Core.Studies.StudyEdit.to_study/1","type":"function"},{"doc":"","ref":"Core.Studies.StudyEdit.html#to_survey_tool/1","title":"Core.Studies.StudyEdit.to_survey_tool/1","type":"function"},{"doc":"","ref":"Core.Studies.StudyEdit.html#toggle/2","title":"Core.Studies.StudyEdit.toggle/2","type":"function"},{"doc":"","ref":"Core.Studies.StudyEdit.html#validate_for_toggle/2","title":"Core.Studies.StudyEdit.validate_for_toggle/2","type":"function"},{"doc":"","ref":"Core.Studies.StudyEdit.html#validate_optional_number/3","title":"Core.Studies.StudyEdit.validate_optional_number/3","type":"function"},{"doc":"","ref":"Core.Studies.StudyEdit.html#validate_optional_url/2","title":"Core.Studies.StudyEdit.validate_optional_url/2","type":"function"},{"doc":"The study type.","ref":"Core.Studies.StudyPublic.html","title":"Core.Studies.StudyPublic","type":"module"},{"doc":"","ref":"Core.Studies.StudyPublic.html#create/2","title":"Core.Studies.StudyPublic.create/2","type":"function"},{"doc":"","ref":"Core.Studies.StudyPublic.html#get_byline/2","title":"Core.Studies.StudyPublic.get_byline/2","type":"function"},{"doc":"","ref":"Core.Studies.StudyPublic.html#get_devices/1","title":"Core.Studies.StudyPublic.get_devices/1","type":"function"},{"doc":"","ref":"Core.Studies.StudyPublic.html#get_highlights/1","title":"Core.Studies.StudyPublic.get_highlights/1","type":"function"},{"doc":"","ref":"Core.Studies.StudyPublic.html#get_themes/1","title":"Core.Studies.StudyPublic.get_themes/1","type":"function"},{"doc":"","ref":"Core.SurfConext.html","title":"Core.SurfConext","type":"module"},{"doc":"","ref":"Core.SurfConext.html#get_user_by_sub/1","title":"Core.SurfConext.get_user_by_sub/1","type":"function"},{"doc":"","ref":"Core.SurfConext.html#register_user/1","title":"Core.SurfConext.register_user/1","type":"function"},{"doc":"","ref":"Core.SurfConext.html#routes/1","title":"Core.SurfConext.routes/1","type":"macro"},{"doc":"This controller manages the OpenID Connect flow with SurfConext. See this site for more info: https://sp.surfconext.nl/","ref":"Core.SurfConext.AuthorizePlug.html","title":"Core.SurfConext.AuthorizePlug","type":"module"},{"doc":"","ref":"Core.SurfConext.AuthorizePlug.html#call/2","title":"Core.SurfConext.AuthorizePlug.call/2","type":"function"},{"doc":"","ref":"Core.SurfConext.AuthorizePlug.html#init/1","title":"Core.SurfConext.AuthorizePlug.init/1","type":"function"},{"doc":"","ref":"Core.SurfConext.CallbackPlug.html","title":"Core.SurfConext.CallbackPlug","type":"module"},{"doc":"","ref":"Core.SurfConext.CallbackPlug.html#call/2","title":"Core.SurfConext.CallbackPlug.call/2","type":"function"},{"doc":"","ref":"Core.SurfConext.CallbackPlug.html#init/1","title":"Core.SurfConext.CallbackPlug.init/1","type":"function"},{"doc":"","ref":"Core.SurfConext.PlugUtils.html","title":"Core.SurfConext.PlugUtils","type":"module"},{"doc":"","ref":"Core.SurfConext.PlugUtils.html#config/1","title":"Core.SurfConext.PlugUtils.config/1","type":"function"},{"doc":"","ref":"Core.SurfConext.PlugUtils.html#log_in_user/3","title":"Core.SurfConext.PlugUtils.log_in_user/3","type":"function"},{"doc":"","ref":"Core.SurfConext.PlugUtils.html#oidc_module/1","title":"Core.SurfConext.PlugUtils.oidc_module/1","type":"function"},{"doc":"","ref":"Core.SurfConext.User.html","title":"Core.SurfConext.User","type":"module"},{"doc":"","ref":"Core.SurfConext.User.html#changeset/2","title":"Core.SurfConext.User.changeset/2","type":"function"},{"doc":"Survey tools allow a researcher to setup a link to an external survey tool. The participant goes through the flow described below: Receive invitation to start a survey (mail, push etc.). Open survey tool, this opens it on the platform and requires authentication. The participant is then redirected to the survey at a 3rd party web-application. After completion the user is redirect back to the platform. The platform registers the completion of this survey for the participant. A researcher is required to configure the 3rd party application with a redirect link. The redirect link to be used is show on the survey tool configuration screen (with copy button). IDEA: The tool requires a sucessful round-trip with a verify flow to ensure that everything is configured correctly. Participants need to be invited to a particular survey explicitly. This avoids the situation where a new user joins a study and then can immediately complete previous surveys. Once a participant has completed a survey they are no longer allowed to enter it a second time. The status is clearly shown when the attempt to do so. IDEA: A list of surveys can be access by the notification icon which is shown on all screens.","ref":"Core.SurveyTools.html","title":"Core.SurveyTools","type":"module"},{"doc":"","ref":"Core.SurveyTools.html#apply_participant/2","title":"Core.SurveyTools.apply_participant/2","type":"function"},{"doc":"Returns an %Ecto.Changeset{} for tracking survey_tool changes. Examples iex&gt; change_survey_tool ( survey_tool ) % Ecto.Changeset { data : % SurveyTool { } }","ref":"Core.SurveyTools.html#change_survey_tool/3","title":"Core.SurveyTools.change_survey_tool/3","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#complete_task!/1","title":"Core.SurveyTools.complete_task!/1","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#count_completed_tasks/1","title":"Core.SurveyTools.count_completed_tasks/1","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#count_pending_tasks/1","title":"Core.SurveyTools.count_pending_tasks/1","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#count_tasks/2","title":"Core.SurveyTools.count_tasks/2","type":"function"},{"doc":"Creates a survey_tool. Examples iex&gt; create_survey_tool ( %{ field : value } ) { :ok , % SurveyTool { } } iex&gt; create_survey_tool ( %{ field : bad_value } ) { :error , % Ecto.Changeset { } }","ref":"Core.SurveyTools.html#create_survey_tool/2","title":"Core.SurveyTools.create_survey_tool/2","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#create_task/2","title":"Core.SurveyTools.create_task/2","type":"function"},{"doc":"Deletes a survey_tool. Examples iex&gt; delete_survey_tool ( survey_tool ) { :ok , % SurveyTool { } } iex&gt; delete_survey_tool ( survey_tool ) { :error , % Ecto.Changeset { } }","ref":"Core.SurveyTools.html#delete_survey_tool/1","title":"Core.SurveyTools.delete_survey_tool/1","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#delete_task/1","title":"Core.SurveyTools.delete_task/1","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#get_or_create_task/2","title":"Core.SurveyTools.get_or_create_task/2","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#get_or_create_task!/2","title":"Core.SurveyTools.get_or_create_task!/2","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#get_survey_tool/1","title":"Core.SurveyTools.get_survey_tool/1","type":"function"},{"doc":"Gets a single survey_tool. Raises Ecto.NoResultsError if the Survey tool does not exist. Examples iex&gt; get_survey_tool! ( 123 ) % SurveyTool { } iex&gt; get_survey_tool! ( 456 ) ** (Ecto.NoResultsError)","ref":"Core.SurveyTools.html#get_survey_tool!/1","title":"Core.SurveyTools.get_survey_tool!/1","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#get_task/2","title":"Core.SurveyTools.get_task/2","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#list_participants/1","title":"Core.SurveyTools.list_participants/1","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#list_participants_without_task/1","title":"Core.SurveyTools.list_participants_without_task/1","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#list_participations/1","title":"Core.SurveyTools.list_participations/1","type":"function"},{"doc":"Returns the list of survey_tools. Examples iex&gt; list_survey_tools ( ) [ % SurveyTool { } , ... ]","ref":"Core.SurveyTools.html#list_survey_tools/0","title":"Core.SurveyTools.list_survey_tools/0","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#list_tasks/1","title":"Core.SurveyTools.list_tasks/1","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#participant?/2","title":"Core.SurveyTools.participant?/2","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#setup_tasks_for_participants!/2","title":"Core.SurveyTools.setup_tasks_for_participants!/2","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#update_survey_tool/1","title":"Core.SurveyTools.update_survey_tool/1","type":"function"},{"doc":"Updates a survey_tool. Examples iex&gt; update_survey_tool ( survey_tool , %{ field : new_value } ) { :ok , % SurveyTool { } } iex&gt; update_survey_tool ( survey_tool , %{ field : bad_value } ) { :error , % Ecto.Changeset { } }","ref":"Core.SurveyTools.html#update_survey_tool/2","title":"Core.SurveyTools.update_survey_tool/2","type":"function"},{"doc":"","ref":"Core.SurveyTools.html#withdraw_participant/2","title":"Core.SurveyTools.withdraw_participant/2","type":"function"},{"doc":"The schema for a study participant.","ref":"Core.SurveyTools.Participant.html","title":"Core.SurveyTools.Participant","type":"module"},{"doc":"The survey tool schema.","ref":"Core.SurveyTools.SurveyTool.html","title":"Core.SurveyTools.SurveyTool","type":"module"},{"doc":"","ref":"Core.SurveyTools.SurveyTool.html#published?/1","title":"Core.SurveyTools.SurveyTool.published?/1","type":"function"},{"doc":"A task (fill out survey) to be completed by a participant.","ref":"Core.SurveyTools.SurveyToolTask.html","title":"Core.SurveyTools.SurveyToolTask","type":"module"},{"doc":"Defines themes used to categorize studies or tools wihin studies.","ref":"Core.Themes.html","title":"Core.Themes","type":"module"},{"doc":"","ref":"Core.Themes.html#labels/1","title":"Core.Themes.labels/1","type":"function"},{"doc":"","ref":"Core.Themes.html#theme_values/1","title":"Core.Themes.theme_values/1","type":"macro"},{"doc":"","ref":"Core.Themes.html#translate/1","title":"Core.Themes.translate/1","type":"function"},{"doc":"","ref":"Core.Themes.html#values/0","title":"Core.Themes.values/0","type":"function"},{"doc":"The WebPush context.","ref":"Core.WebPush.html","title":"Core.WebPush","type":"module"},{"doc":"","ref":"Core.WebPush.html#register/2","title":"Core.WebPush.register/2","type":"function"},{"doc":"Send a notification to the user on all possible subscriptions.","ref":"Core.WebPush.html#send/2","title":"Core.WebPush.send/2","type":"function"},{"doc":"","ref":"Core.WebPush.Backend.html","title":"Core.WebPush.Backend","type":"behaviour"},{"doc":"","ref":"Core.WebPush.Backend.html#c:send_web_push/2","title":"Core.WebPush.Backend.send_web_push/2","type":"callback"},{"doc":"","ref":"Core.WebPush.Keys.html","title":"Core.WebPush.Keys","type":"module"},{"doc":"","ref":"Core.WebPush.Keys.html#changeset/2","title":"Core.WebPush.Keys.changeset/2","type":"function"},{"doc":"","ref":"Core.WebPush.PushSubscription.html","title":"Core.WebPush.PushSubscription","type":"module"},{"doc":"","ref":"Core.WebPush.SignalHandlers.html","title":"Core.WebPush.SignalHandlers","type":"module"},{"doc":"","ref":"Core.WebPush.Subscription.html","title":"Core.WebPush.Subscription","type":"module"},{"doc":"","ref":"Core.WebPush.Subscription.html#changeset/1","title":"Core.WebPush.Subscription.changeset/1","type":"function"},{"doc":"","ref":"Core.WebPush.Worker.html","title":"Core.WebPush.Worker","type":"module"},{"doc":"The entrypoint for defining your web interface, such as controllers, views, channels and so on. This can be used in your application as: use CoreWeb , :controller use CoreWeb , :view The definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below. Instead, define any helper function in modules and import those modules here.","ref":"CoreWeb.html","title":"CoreWeb","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc applying given opts.","ref":"CoreWeb.html#__using__/1","title":"CoreWeb.__using__/1","type":"macro"},{"doc":"","ref":"CoreWeb.html#channel/0","title":"CoreWeb.channel/0","type":"function"},{"doc":"","ref":"CoreWeb.html#controller/0","title":"CoreWeb.controller/0","type":"function"},{"doc":"","ref":"CoreWeb.html#live_component/0","title":"CoreWeb.live_component/0","type":"function"},{"doc":"","ref":"CoreWeb.html#live_view/0","title":"CoreWeb.live_view/0","type":"function"},{"doc":"","ref":"CoreWeb.html#router/0","title":"CoreWeb.router/0","type":"function"},{"doc":"","ref":"CoreWeb.html#view/1","title":"CoreWeb.view/1","type":"function"},{"doc":"","ref":"CoreWeb.APNSDeviceTokenController.html","title":"CoreWeb.APNSDeviceTokenController","type":"module"},{"doc":"","ref":"CoreWeb.APNSDeviceTokenController.html#create/2","title":"CoreWeb.APNSDeviceTokenController.create/2","type":"function"},{"doc":"","ref":"CoreWeb.ChangesetView.html","title":"CoreWeb.ChangesetView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.ChangesetView.html#__resource__/0","title":"CoreWeb.ChangesetView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.ChangesetView.html#current_user/1","title":"CoreWeb.ChangesetView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.ChangesetView.html#render/2","title":"CoreWeb.ChangesetView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.ChangesetView.html#supported_languages/0","title":"CoreWeb.ChangesetView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.ChangesetView.html#template_not_found/2","title":"CoreWeb.ChangesetView.template_not_found/2","type":"function"},{"doc":"Traverses and translates changeset errors. See Ecto.Changeset.traverse_errors/2 and CoreWeb.ErrorHelpers.translate_error/1 for more details.","ref":"CoreWeb.ChangesetView.html#translate_errors/1","title":"CoreWeb.ChangesetView.translate_errors/1","type":"function"},{"doc":"Provides the core functions to retrieve and manage the CLDR data that supports formatting and localisation. It provides the core functions to access formatted CLDR data, set and retrieve a current locale and validate certain core data types such as locales, currencies and territories.","ref":"CoreWeb.Cldr.html","title":"CoreWeb.Cldr","type":"module"},{"doc":"See Cldr.available_locale_name?/1 .","ref":"CoreWeb.Cldr.html#available_locale_name?/1","title":"CoreWeb.Cldr.available_locale_name?/1","type":"function"},{"doc":"Returns the default locale . Example iex&gt; CoreWeb.Cldr . default_locale ( ) % Cldr.LanguageTag { backend : CoreWeb.Cldr , canonical_locale_name : &quot;en-Latn-001&quot; , cldr_locale_name : &quot;en-001&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : &quot;en&quot; , requested_locale_name : &quot;en-001&quot; , script : &quot;Latn&quot; , territory : :&quot;001&quot; , transform : %{ } , language_variant : nil }","ref":"CoreWeb.Cldr.html#default_locale/0","title":"CoreWeb.Cldr.default_locale/0","type":"function"},{"doc":"Returns the default territory when a locale does not specify one and none can be inferred. Example iex&gt; CoreWeb.Cldr . default_territory ( ) :&quot;001&quot;","ref":"CoreWeb.Cldr.html#default_territory/0","title":"CoreWeb.Cldr.default_territory/0","type":"function"},{"doc":"Add locale-specific ellipsis to a string. Arguments string is any String.t or a 2-element list of String.t between which the ellipsis is inserted. backend is any module that includes use Cldr and therefore is a Cldr backend module. The default is Cldr.default_backend!/0 . Note that Cldr.default_backend!/0 will raise an exception if no :default_backend is configured under the :ex_cldr key in config.exs . options is a keyword list of options Options :locale is any valid locale name returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale/0 . :location determines where to place the ellipsis. The options are :after (the default for a single string argument), :between (the default and only valid location for an argument that is a list of two strings) and :before . :format formats based upon whether the ellipsis is inserted between words or sentences. The valid options are :word or :sentence . The default is :sentence . Examples iex&gt; CoreWeb.Cldr . ellipsis &quot;And furthermore&quot; &quot;And furthermore…&quot; iex&gt; CoreWeb.Cldr . ellipsis [ &quot;And furthermore&quot; , &quot;there is much to be done&quot; ] , locale : &quot;ja&quot; &quot;And furthermore…there is much to be done&quot; iex&gt; CoreWeb.Cldr . ellipsis &quot;And furthermore&quot; , format : :word &quot;And furthermore …&quot; iex&gt; CoreWeb.Cldr . ellipsis [ &quot;And furthermore&quot; , &quot;there is much to be done&quot; ] , locale : &quot;ja&quot; , format : :word &quot;And furthermore … there is much to be done&quot;","ref":"CoreWeb.Cldr.html#ellipsis/2","title":"CoreWeb.Cldr.ellipsis/2","type":"function"},{"doc":"Return the current locale to be used for Cldr functions that take an optional locale parameter for which a locale is not supplied. Example iex&gt; CoreWeb.Cldr . put_locale ( &quot;pl&quot; ) iex&gt; CoreWeb.Cldr . get_locale % Cldr.LanguageTag { backend : Elixir.CoreWeb.Cldr , canonical_locale_name : &quot;pl-Latn-PL&quot; , cldr_locale_name : &quot;pl&quot; , extensions : %{ } , language : &quot;pl&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : &quot;pl&quot; , territory : :PL , requested_locale_name : &quot;pl&quot; , script : &quot;Latn&quot; , transform : %{ } , language_variant : nil }","ref":"CoreWeb.Cldr.html#get_locale/0","title":"CoreWeb.Cldr.get_locale/0","type":"function"},{"doc":"See Cldr.known_calendars/0 .","ref":"CoreWeb.Cldr.html#known_calendars/0","title":"CoreWeb.Cldr.known_calendars/0","type":"function"},{"doc":"See Cldr.known_currencies/0 .","ref":"CoreWeb.Cldr.html#known_currencies/0","title":"CoreWeb.Cldr.known_currencies/0","type":"function"},{"doc":"Returns either the Gettext locale_name in Cldr format or false based upon whether the locale name is configured in Gettext . Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_gettext_locale_names/0 Examples iex&gt; CoreWeb.Cldr . known_gettext_locale_name &quot;en&quot; &quot;en&quot; iex&gt; CoreWeb.Cldr . known_gettext_locale_name &quot;en-SA&quot; false","ref":"CoreWeb.Cldr.html#known_gettext_locale_name/1","title":"CoreWeb.Cldr.known_gettext_locale_name/1","type":"function"},{"doc":"Returns a boolean indicating if the specified locale name is configured and available in Gettext. Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 Examples iex&gt; CoreWeb.Cldr . known_gettext_locale_name? ( &quot;en&quot; ) true iex&gt; CoreWeb.Cldr . known_gettext_locale_name? ( &quot;!!&quot; ) false","ref":"CoreWeb.Cldr.html#known_gettext_locale_name?/1","title":"CoreWeb.Cldr.known_gettext_locale_name?/1","type":"function"},{"doc":"Returns a list of GetText locale names but in CLDR format with underscore replaced by hyphen in order to facilitate comparisons with Cldr locale names.","ref":"CoreWeb.Cldr.html#known_gettext_locale_names/0","title":"CoreWeb.Cldr.known_gettext_locale_names/0","type":"function"},{"doc":"Returns either the locale_name or false based upon whether the locale name is configured in Cldr . This is helpful when building a list of or expressions to return the first known locale name from a list. Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 Examples iex&gt; CoreWeb.Cldr . known_locale_name &quot;en-AU&quot; &quot;en-AU&quot; iex&gt; CoreWeb.Cldr . known_locale_name &quot;en-SA&quot; false","ref":"CoreWeb.Cldr.html#known_locale_name/1","title":"CoreWeb.Cldr.known_locale_name/1","type":"function"},{"doc":"Returns a boolean indicating if the specified locale name is configured and available in Cldr. Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 Examples iex&gt; CoreWeb.Cldr . known_locale_name? ( &quot;en&quot; ) true iex&gt; CoreWeb.Cldr . known_locale_name? ( &quot;!!&quot; ) false","ref":"CoreWeb.Cldr.html#known_locale_name?/1","title":"CoreWeb.Cldr.known_locale_name?/1","type":"function"},{"doc":"Returns a list of the known locale names. Known locales are those locales which are the subset of all CLDR locales that have been configured for use either in this module or in Gettext .","ref":"CoreWeb.Cldr.html#known_locale_names/0","title":"CoreWeb.Cldr.known_locale_names/0","type":"function"},{"doc":"Returns a list of atoms representing the number systems types known to Cldr . Example iex&gt; CoreWeb.Cldr . known_number_system_types [ :default , :finance , :native , :traditional ]","ref":"CoreWeb.Cldr.html#known_number_system_types/0","title":"CoreWeb.Cldr.known_number_system_types/0","type":"function"},{"doc":"See Cldr.known_number_systems/0 .","ref":"CoreWeb.Cldr.html#known_number_systems/0","title":"CoreWeb.Cldr.known_number_systems/0","type":"function"},{"doc":"Returns either the RBNF locale_name or false based upon whether the locale name is configured in Cldr and has RBNF rules defined. Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 Examples iex&gt; CoreWeb.Cldr . known_rbnf_locale_name &quot;en&quot; &quot;en&quot; iex&gt; CoreWeb.Cldr . known_rbnf_locale_name &quot;en-SA&quot; false","ref":"CoreWeb.Cldr.html#known_rbnf_locale_name/1","title":"CoreWeb.Cldr.known_rbnf_locale_name/1","type":"function"},{"doc":"Returns a boolean indicating if the specified locale name is configured and available in Cldr and supports rules based number formats (RBNF). Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 Examples iex&gt; CoreWeb.Cldr . known_rbnf_locale_name? ( &quot;en&quot; ) true iex&gt; CoreWeb.Cldr . known_rbnf_locale_name? ( &quot;!!&quot; ) false","ref":"CoreWeb.Cldr.html#known_rbnf_locale_name?/1","title":"CoreWeb.Cldr.known_rbnf_locale_name?/1","type":"function"},{"doc":"Returns a list of locale names which have rules-based number formats (RBNF).","ref":"CoreWeb.Cldr.html#known_rbnf_locale_names/0","title":"CoreWeb.Cldr.known_rbnf_locale_names/0","type":"function"},{"doc":"See Cldr.known_territories/0 .","ref":"CoreWeb.Cldr.html#known_territories/0","title":"CoreWeb.Cldr.known_territories/0","type":"function"},{"doc":"Normalizes a string by applying transliteration of common symbols in numbers, currencies and dates","ref":"CoreWeb.Cldr.html#normalize_lenient_parse/3","title":"CoreWeb.Cldr.normalize_lenient_parse/3","type":"function"},{"doc":"Set the current locale to be used for Cldr functions that take an optional locale parameter for which a locale is not supplied. Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 See rfc5646 for the specification of a language tag and consult Cldr.Rfc5646.Parser for the specification as implemented that includes the CLDR extensions for &quot;u&quot; (locales) and &quot;t&quot; (transforms). Examples iex&gt; CoreWeb.Cldr . put_locale ( &quot;en&quot; ) { :ok , % Cldr.LanguageTag { backend : CoreWeb.Cldr , canonical_locale_name : &quot;en-Latn-US&quot; , cldr_locale_name : &quot;en&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : &quot;en&quot; , requested_locale_name : &quot;en&quot; , script : &quot;Latn&quot; , territory : :US , transform : %{ } , language_variant : nil } } iex&gt; CoreWeb.Cldr . put_locale ( &quot;invalid-locale!&quot; ) { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; ! \\&quot; starting at position 15&quot; } }","ref":"CoreWeb.Cldr.html#put_locale/1","title":"CoreWeb.Cldr.put_locale/1","type":"function"},{"doc":"Add locale-specific quotation marks around a string. Arguments string is any valid Elixir string options is a keyword list of options Options locale is any valid locale name returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale/0 Examples iex&gt; CoreWeb.Cldr . quote &quot;Quoted String&quot; &quot;“Quoted String”&quot; iex&gt; CoreWeb.Cldr . quote &quot;Quoted String&quot; , locale : &quot;ja&quot; &quot;「Quoted String」&quot;","ref":"CoreWeb.Cldr.html#quote/2","title":"CoreWeb.Cldr.quote/2","type":"function"},{"doc":"Returns a list of the locales names that are configured, but not known in CLDR. Since there is a compile-time exception raised if there are any unknown locales this function should always return an empty list.","ref":"CoreWeb.Cldr.html#unknown_locale_names/0","title":"CoreWeb.Cldr.unknown_locale_names/0","type":"function"},{"doc":"See Cldr.validate_calendar/1 .","ref":"CoreWeb.Cldr.html#validate_calendar/1","title":"CoreWeb.Cldr.validate_calendar/1","type":"function"},{"doc":"See Cldr.validate_currency/1 .","ref":"CoreWeb.Cldr.html#validate_currency/1","title":"CoreWeb.Cldr.validate_currency/1","type":"function"},{"doc":"Normalise and validate a locale name. Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 Returns {:ok, language_tag} {:error, reason} Notes See rfc5646 for the specification of a language tag and consult Cldr.Rfc5646.Parser for the specification as implemented that includes the CLDR extensions for &quot;u&quot; (locales) and &quot;t&quot; (transforms). Examples iex&gt; CoreWeb.Cldr . validate_locale ( &quot;en&quot; ) { :ok , % Cldr.LanguageTag { backend : CoreWeb.Cldr , canonical_locale_name : &quot;en-Latn-US&quot; , cldr_locale_name : &quot;en&quot; , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : &quot;en&quot; , requested_locale_name : &quot;en&quot; , script : &quot;Latn&quot; , territory : :US , transform : %{ } , language_variant : nil } } iex&gt; CoreWeb.Cldr . validate_locale CoreWeb.Cldr . default_locale ( ) { :ok , % Cldr.LanguageTag { backend : CoreWeb.Cldr , canonical_locale_name : &quot;en-Latn-001&quot; , cldr_locale_name : &quot;en-001&quot; , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : &quot;en&quot; , requested_locale_name : &quot;en-001&quot; , script : &quot;Latn&quot; , territory : :&quot;001&quot; , transform : %{ } , language_variant : nil } } iex&gt; CoreWeb.Cldr . validate_locale ( &quot;zzz&quot; ) { :error , { Cldr.UnknownLocaleError , &quot;The locale \\&quot; zzz \\&quot; is not known.&quot; } }","ref":"CoreWeb.Cldr.html#validate_locale/1","title":"CoreWeb.Cldr.validate_locale/1","type":"function"},{"doc":"See Cldr.validate_number_system/1 .","ref":"CoreWeb.Cldr.html#validate_number_system/1","title":"CoreWeb.Cldr.validate_number_system/1","type":"function"},{"doc":"Normalise and validate a number system type. Arguments number_system_type is any number system type returned by Cldr.known_number_system_types/1 Returns {:ok, normalized_number_system_type} or {:error, {exception, message}} Examples iex&gt; CoreWeb.Cldr . validate_number_system_type :default { :ok , :default } iex&gt; CoreWeb.Cldr . validate_number_system_type :traditional { :ok , :traditional } iex&gt; CoreWeb.Cldr . validate_number_system_type :latn { :error , { Cldr.UnknownNumberSystemTypeError , &quot;The number system type :latn is unknown&quot; } } iex&gt; CoreWeb.Cldr . validate_number_system_type &quot;bork&quot; { :error , { Cldr.UnknownNumberSystemTypeError , &quot;The number system type \\&quot; bork \\&quot; is invalid&quot; } }","ref":"CoreWeb.Cldr.html#validate_number_system_type/1","title":"CoreWeb.Cldr.validate_number_system_type/1","type":"function"},{"doc":"See Cldr.validate_territory/1 .","ref":"CoreWeb.Cldr.html#validate_territory/1","title":"CoreWeb.Cldr.validate_territory/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Currency.html","title":"CoreWeb.Cldr.Currency","type":"module"},{"doc":"Returns a map of the metadata for all currencies for a given locale. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_map} or {:error, {exception, reason}} Example MyApp.Cldr.Currency.currencies_for_locale &quot;en&quot; =&gt; {:ok, %{ FJD : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;FJD&quot; , count : %{ one : &quot;Fijian dollar&quot; , other : &quot;Fijian dollars&quot; } , digits : 2 , from : nil , iso_digits : 2 , name : &quot;Fijian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;FJD&quot; , tender : true , to : nil } , SUR : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;SUR&quot; , count : %{ one : &quot;Soviet rouble&quot; , other : &quot;Soviet roubles&quot; } , digits : 2 , from : nil , iso_digits : nil , name : &quot;Soviet Rouble&quot; , narrow_symbol : nil , rounding : 0 , symbol : &quot;SUR&quot; , tender : true , to : nil } , ... } }","ref":"CoreWeb.Cldr.Currency.html#currencies_for_locale/3","title":"CoreWeb.Cldr.Currency.currencies_for_locale/3","type":"function"},{"doc":"Returns a map of the metadata for all currencies for a given locale and raises on error. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_map} or raises an exception Example MyApp.Cldr.Currency.currencies_for_locale! &quot;en&quot; =&gt; %{ FJD : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;FJD&quot; , count : %{ one : &quot;Fijian dollar&quot; , other : &quot;Fijian dollars&quot; } , digits : 2 , from : nil , iso_digits : 2 , name : &quot;Fijian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;FJD&quot; , tender : true , to : nil } , SUR : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;SUR&quot; , count : %{ one : &quot;Soviet rouble&quot; , other : &quot;Soviet roubles&quot; } , digits : 2 , from : nil , iso_digits : nil , name : &quot;Soviet Rouble&quot; , narrow_symbol : nil , rounding : 0 , symbol : &quot;SUR&quot; , tender : true , to : nil } , ... }","ref":"CoreWeb.Cldr.Currency.html#currencies_for_locale!/3","title":"CoreWeb.Cldr.Currency.currencies_for_locale!/3","type":"function"},{"doc":"Returns the currency metadata for the requested currency code. Arguments currency_code is a binary or atom representation of an ISO 4217 currency code. Examples iex&gt; CoreWeb.Cldr.Currency . currency_for_code ( &quot;AUD&quot; ) { :ok , % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;AUD&quot; , count : %{ one : &quot;Australian dollar&quot; , other : &quot;Australian dollars&quot; } , digits : 2 , iso_digits : 2 , name : &quot;Australian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;A$&quot; , tender : true } } iex&gt; CoreWeb.Cldr.Currency . currency_for_code ( &quot;THB&quot; ) { :ok , % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;THB&quot; , count : %{ one : &quot;Thai baht&quot; , other : &quot;Thai baht&quot; } , digits : 2 , iso_digits : 2 , name : &quot;Thai Baht&quot; , narrow_symbol : &quot;฿&quot; , rounding : 0 , symbol : &quot;THB&quot; , tender : true } }","ref":"CoreWeb.Cldr.Currency.html#currency_for_code/2","title":"CoreWeb.Cldr.Currency.currency_for_code/2","type":"function"},{"doc":"Returns the effective currency for a given locale Arguments locale is a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 Returns A ISO 4217 currency code as an upcased atom Examples iex&gt; { :ok , locale } = CoreWeb.Cldr . validate_locale &quot;en&quot; iex&gt; CoreWeb.Cldr.Currency . currency_from_locale locale :USD iex&gt; { :ok , locale } = CoreWeb.Cldr . validate_locale &quot;en-AU&quot; iex&gt; CoreWeb.Cldr.Currency . currency_from_locale locale :AUD iex&gt; CoreWeb.Cldr.Currency . currency_from_locale &quot;en-GB&quot; :GBP","ref":"CoreWeb.Cldr.Currency.html#currency_from_locale/1","title":"CoreWeb.Cldr.Currency.currency_from_locale/1","type":"function"},{"doc":"Returns a list of historic and the current currency for a given locale. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 Example iex&gt; MyApp.Cldr.Currency . currency_history_for_locale &quot;en&quot; { :ok , %{ USD : %{ from : ~D[1792-01-01] , to : nil } , USN : %{ tender : false } , USS : %{ from : nil , tender : false , to : ~D[2014-03-01] } } }","ref":"CoreWeb.Cldr.Currency.html#currency_history_for_locale/1","title":"CoreWeb.Cldr.Currency.currency_history_for_locale/1","type":"function"},{"doc":"Returns a map that matches a currency string to a currency code. A currency string is a localised name or symbol representing a currency in a locale-specific manner. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_string_map} or {:error, {exception, reason}} Example MyApp.Cldr.Currency . currency_strings &quot;en&quot; =&gt; { :ok , %{ &quot;mexican silver pesos&quot; =&gt; :MXP , &quot;sudanese dinar&quot; =&gt; :SDD , &quot;bad&quot; =&gt; :BAD , &quot;rsd&quot; =&gt; :RSD , &quot;swazi lilangeni&quot; =&gt; :SZL , &quot;zairean new zaire&quot; =&gt; :ZRN , &quot;guyanaese dollars&quot; =&gt; :GYD , &quot;equatorial guinean ekwele&quot; =&gt; :GQE , ... } }","ref":"CoreWeb.Cldr.Currency.html#currency_strings/3","title":"CoreWeb.Cldr.Currency.currency_strings/3","type":"function"},{"doc":"Returns a map that matches a currency string to a currency code or raises an exception. A currency string is a localised name or symbol representing a currency in a locale-specific manner. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_string_map} or raises an exception Example MyApp.Cldr.Currency . currency_strings! &quot;en&quot; =&gt; %{ &quot;mexican silver pesos&quot; =&gt; :MXP , &quot;sudanese dinar&quot; =&gt; :SDD , &quot;bad&quot; =&gt; :BAD , &quot;rsd&quot; =&gt; :RSD , &quot;swazi lilangeni&quot; =&gt; :SZL , &quot;zairean new zaire&quot; =&gt; :ZRN , &quot;guyanaese dollars&quot; =&gt; :GYD , &quot;equatorial guinean ekwele&quot; =&gt; :GQE , ... }","ref":"CoreWeb.Cldr.Currency.html#currency_strings!/3","title":"CoreWeb.Cldr.Currency.currency_strings!/3","type":"function"},{"doc":"Returns the current currency for a given locale. This function does not consider the U extenion parameters cu or rg . It is recommended to us Cldr.Currency.currency_from_locale/1 in most circumstances. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 Example iex&gt; MyApp.Cldr.Currency . current_currency_from_locale &quot;en&quot; :USD iex&gt; MyApp.Cldr.Currency . current_currency_from_locale &quot;en-AU&quot; :AUD","ref":"CoreWeb.Cldr.Currency.html#current_currency_from_locale/1","title":"CoreWeb.Cldr.Currency.current_currency_from_locale/1","type":"function"},{"doc":"See CoreWeb.Cldr.Currency.known_currency_codes/0 .","ref":"CoreWeb.Cldr.Currency.html#known_currencies/0","title":"CoreWeb.Cldr.Currency.known_currencies/0","type":"function"},{"doc":"See CoreWeb.Cldr.Currency.known_currency_code?/1 .","ref":"CoreWeb.Cldr.Currency.html#known_currency?/1","title":"CoreWeb.Cldr.Currency.known_currency?/1","type":"function"},{"doc":"Returns a 2-tuple indicating if the supplied currency code is known. Arguments currency_code is a binary or atom representing an ISO4217 currency code Returns {:ok, currency_code} or {:error, {exception, reason}} Examples iex&gt; CoreWeb.Cldr.Currency . known_currency_code &quot;AUD&quot; { :ok , :AUD } iex&gt; CoreWeb.Cldr.Currency . known_currency_code &quot;GGG&quot; { :error , { Cldr.UnknownCurrencyError , &quot;The currency \\&quot; GGG \\&quot; is invalid&quot; } }","ref":"CoreWeb.Cldr.Currency.html#known_currency_code/1","title":"CoreWeb.Cldr.Currency.known_currency_code/1","type":"function"},{"doc":"Returns a boolean indicating if the supplied currency code is known. Arguments currency_code is a binary or atom representing an ISO4217 currency code Returns true or false Examples iex&gt; CoreWeb.Cldr.Currency . known_currency_code? &quot;AUD&quot; true iex&gt; CoreWeb.Cldr.Currency . known_currency_code? &quot;GGG&quot; false iex&gt; CoreWeb.Cldr.Currency . known_currency_code? :XCV false","ref":"CoreWeb.Cldr.Currency.html#known_currency_code?/1","title":"CoreWeb.Cldr.Currency.known_currency_code?/1","type":"function"},{"doc":"Returns a list of all known currency codes. Example iex&gt; CoreWeb.Cldr.Currency . known_currency_codes |&gt; Enum . count 303","ref":"CoreWeb.Cldr.Currency.html#known_currency_codes/0","title":"CoreWeb.Cldr.Currency.known_currency_codes/0","type":"function"},{"doc":"Returns a Currency struct created from the arguments. Arguments currency is a private use currency code in a format defined by ISO4217 which is X followed by two alphanumeric characters. options is a map of options representing the optional elements of the Cldr.Currency.t struct. Options :name is the name of the currency. Required. :digits is the precision of the currency. Required. :symbol is the currency symbol. Optional. :narrow_symbol is an alternative narrow symbol. Optional. :round_nearest is the rounding precision such as 0.05 . Optional. :alt_code is an alternative currency code for application use. :cash_digits is the precision of the currency when used as cash. Optional. :cash_rounding_nearest is the rounding precision when used as cash such as 0.05 . Optional. Returns {:ok, Cldr.Currency.t} or {:error, {exception, message}} Example iex&gt; CoreWeb.Cldr.Currency . new ( :XAA , name : &quot;Custom Name&quot; , digits : 0 ) { :ok , % Cldr.Currency { alt_code : :XAA , cash_digits : 0 , cash_rounding : nil , code : :XAA , count : %{ other : &quot;Custom Name&quot; } , digits : 0 , from : nil , iso_digits : 0 , name : &quot;Custom Name&quot; , narrow_symbol : nil , rounding : 0 , symbol : &quot;XAA&quot; , tender : false , to : nil } } iex&gt; MyApp.Cldr.Currency . new ( :XAA , name : &quot;Custom Name&quot; ) { :error , &quot;Required options are missing. Required options are [:name, :digits]&quot; } iex&gt; CoreWeb.Cldr.Currency . new ( :XBC ) { :error , { Cldr.CurrencyAlreadyDefined , &quot;Currency :XBC is already defined.&quot; } }","ref":"CoreWeb.Cldr.Currency.html#new/2","title":"CoreWeb.Cldr.Currency.new/2","type":"function"},{"doc":"Returns the appropriate currency display name for the currency , based on the plural rules in effect for the locale . Arguments number is an integer, float or Decimal currency is any currency returned by Cldr.Currency.known_currencies/0 options is a keyword list of options Options locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 . The default is CoreWeb.Cldr.get_locale/0 Returns {:ok, plural_string} or {:error, {exception, message}} Examples iex&gt; CoreWeb.Cldr.Currency . pluralize 1 , :USD { :ok , &quot;US dollar&quot; } iex&gt; CoreWeb.Cldr.Currency . pluralize 3 , :USD { :ok , &quot;US dollars&quot; } iex&gt; CoreWeb.Cldr.Currency . pluralize 12 , :USD , locale : &quot;zh&quot; { :ok , &quot;美元&quot; } iex&gt; CoreWeb.Cldr.Currency . pluralize 12 , :USD , locale : &quot;fr&quot; { :ok , &quot;dollars des États-Unis&quot; } iex&gt; CoreWeb.Cldr.Currency . pluralize 1 , :USD , locale : &quot;fr&quot; { :ok , &quot;dollar des États-Unis&quot; }","ref":"CoreWeb.Cldr.Currency.html#pluralize/3","title":"CoreWeb.Cldr.Currency.pluralize/3","type":"function"},{"doc":"Returns the strings associated with a currency in a given locale. Arguments currency is an ISO4217 currency code locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 Returns A list of strings or {:error, {exception, reason}} Example iex&gt; MyApp.Cldr.Currency . strings_for_currency :AUD , &quot;en&quot; [ &quot;a$&quot; , &quot;australian dollars&quot; , &quot;aud&quot; , &quot;australian dollar&quot; ]","ref":"CoreWeb.Cldr.Currency.html#strings_for_currency/2","title":"CoreWeb.Cldr.Currency.strings_for_currency/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Date.html","title":"CoreWeb.Cldr.Date","type":"module"},{"doc":"Formats a date according to a format string as defined in CLDR and described in TR35 Arguments date is a %Date{} struct or any map that contains the keys year , month , day and calendar options is a keyword list of options for formatting. The valid options are: Options format: :short | :medium | :long | :full or a format string. The default is :medium locale: any locale returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale() . number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, formatted_string} or {:error, reason} Examples iex&gt; CoreWeb.Cldr.Date . to_string ~D[2017-07-10] , format : :medium , locale : &quot;en&quot; { :ok , &quot;Jul 10, 2017&quot; } iex&gt; CoreWeb.Cldr.Date . to_string ~D[2017-07-10] , locale : &quot;en&quot; { :ok , &quot;Jul 10, 2017&quot; } iex&gt; CoreWeb.Cldr.Date . to_string ~D[2017-07-10] , format : :full , locale : &quot;en&quot; { :ok , &quot;Monday, July 10, 2017&quot; } iex&gt; CoreWeb.Cldr.Date . to_string ~D[2017-07-10] , format : :short , locale : &quot;en&quot; { :ok , &quot;7/10/17&quot; } iex&gt; CoreWeb.Cldr.Date . to_string ~D[2017-07-10] , format : :short , locale : &quot;fr&quot; { :ok , &quot;10/07/2017&quot; } iex&gt; CoreWeb.Cldr.Date . to_string ~D[2017-07-10] , format : :long , locale : &quot;af&quot; { :ok , &quot;10 Julie 2017&quot; }","ref":"CoreWeb.Cldr.Date.html#to_string/2","title":"CoreWeb.Cldr.Date.to_string/2","type":"function"},{"doc":"Formats a date according to a format string as defined in CLDR and described in TR35 Arguments date is a %Date{} struct or any map that contains the keys year , month , day and calendar options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string. The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns formatted_date or raises an exception. Examples iex&gt; CoreWeb.Cldr.Date . to_string! ~D[2017-07-10] , format : :medium , locale : &quot;en&quot; &quot;Jul 10, 2017&quot; iex&gt; CoreWeb.Cldr.Date . to_string! ~D[2017-07-10] , locale : &quot;en&quot; &quot;Jul 10, 2017&quot; iex&gt; CoreWeb.Cldr.Date . to_string! ~D[2017-07-10] , format : :full , locale : &quot;en&quot; &quot;Monday, July 10, 2017&quot; iex&gt; CoreWeb.Cldr.Date . to_string! ~D[2017-07-10] , format : :short , locale : &quot;en&quot; &quot;7/10/17&quot; iex&gt; CoreWeb.Cldr.Date . to_string! ~D[2017-07-10] , format : :short , locale : &quot;fr&quot; &quot;10/07/2017&quot; iex&gt; CoreWeb.Cldr.Date . to_string! ~D[2017-07-10] , format : :long , locale : &quot;af&quot; &quot;10 Julie 2017&quot;","ref":"CoreWeb.Cldr.Date.html#to_string!/2","title":"CoreWeb.Cldr.Date.to_string!/2","type":"function"},{"doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. See CoreWeb.Cldr.Date.Interval.to_string/3 and CoreWeb.Cldr.Interval.to_string/3","ref":"CoreWeb.Cldr.Date.Interval.html","title":"CoreWeb.Cldr.Date.Interval","type":"module"},{"doc":"Returns a interval formed from two dates as a localised string. Arguments from is any map that conforms to the Calendar.date type. to is any map that conforms to the Calendar.date type. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.CoreWeb.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval Examples iex&gt; CoreWeb.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-12-31] { :ok , &quot;Jan 1 – Dec 31, 2020&quot; } iex&gt; CoreWeb.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] { :ok , &quot;Jan 1 – 12, 2020&quot; } iex&gt; CoreWeb.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; CoreWeb.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-12-01] , ...&gt; format : :long , style : :year_and_month { :ok , &quot;January – December 2020&quot; } iex&gt; CoreWeb.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :short { :ok , &quot;1/1/2020 – 1/12/2020&quot; } iex&gt; CoreWeb.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long , locale : &quot;fr&quot; { :ok , &quot;mer. 1 – dim. 12 janv. 2020&quot; } iex&gt; CoreWeb.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long , locale : &quot;th&quot; , number_system : :thai { :ok , &quot;พ. ๑ ม.ค. – อา. ๑๒ ม.ค. ๒๐๒๐&quot; }","ref":"CoreWeb.Cldr.Date.Interval.html#to_string/3","title":"CoreWeb.Cldr.Date.Interval.to_string/3","type":"function"},{"doc":"Returns a interval formed from two dates as a localised string. Arguments from is any map that conforms to the Calendar.date type. to is any map that conforms to the Calendar.date type. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.CoreWeb.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises an exception Notes For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval Examples iex&gt; CoreWeb.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-12-31] ) &quot;Jan 1 – Dec 31, 2020&quot; iex&gt; CoreWeb.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) &quot;Jan 1 – 12, 2020&quot; iex&gt; CoreWeb.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; CoreWeb.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-12-01] ) , ...&gt; format : :long , style : :year_and_month &quot;January – December 2020&quot; iex&gt; use CalendarInterval iex&gt; CoreWeb.Cldr.Date.Interval . to_string! ~I&quot;2020-01/12&quot; &quot;Jan 1 – Dec 31, 2020&quot; iex&gt; CoreWeb.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) , ...&gt; format : :short &quot;1/1/2020 – 1/12/2020&quot; iex&gt; CoreWeb.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) , ...&gt; format : :long , locale : &quot;fr&quot; &quot;mer. 1 – dim. 12 janv. 2020&quot;","ref":"CoreWeb.Cldr.Date.Interval.html#to_string!/3","title":"CoreWeb.Cldr.Date.Interval.to_string!/3","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.DateTime.html","title":"CoreWeb.Cldr.DateTime","type":"module"},{"doc":"Formats a DateTime according to a format string as defined in CLDR and described in TR35 Arguments datetime is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys :year , :month , :day , :calendar . :hour , :minute and :second with optional :microsecond . options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string or any of the keys returned by Cldr.DateTime.available_format_names . The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; for example, the locale era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Returns {:ok, formatted_datetime} or {:error, reason} Examples iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; CoreWeb.Cldr.DateTime . to_string datetime { :ok , &quot;Jan 1, 2000, 11:59:59 PM&quot; } iex&gt; CoreWeb.Cldr.DateTime . to_string datetime , locale : &quot;en&quot; { :ok , &quot;Jan 1, 2000, 11:59:59 PM&quot; } iex&gt; CoreWeb.Cldr.DateTime . to_string datetime , format : :long , locale : &quot;en&quot; { :ok , &quot;January 1, 2000 at 11:59:59 PM UTC&quot; } iex&gt; CoreWeb.Cldr.DateTime . to_string datetime , format : :hms , locale : &quot;en&quot; { :ok , &quot;11:59:59 PM&quot; } iex&gt; CoreWeb.Cldr.DateTime . to_string datetime , format : :full , locale : &quot;en&quot; { :ok , &quot;Saturday, January 1, 2000 at 11:59:59 PM GMT&quot; } iex&gt; CoreWeb.Cldr.DateTime . to_string datetime , format : :full , locale : &quot;fr&quot; { :ok , &quot;samedi 1 janvier 2000 à 23:59:59 UTC&quot; }","ref":"CoreWeb.Cldr.DateTime.html#to_string/2","title":"CoreWeb.Cldr.DateTime.to_string/2","type":"function"},{"doc":"Formats a DateTime according to a format string as defined in CLDR and described in TR35 returning a formatted string or raising on error. Arguments datetime is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys :year , :month , :day , :calendar . :hour , :minute and :second with optional :microsecond . options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string or any of the keys returned by Cldr.DateTime.available_format_names or a format string. The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; for example, the locale era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Returns formatted_datetime or raises an exception Examples iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; CoreWeb.Cldr.DateTime . to_string! datetime , locale : &quot;en&quot; &quot;Jan 1, 2000, 11:59:59 PM&quot; iex&gt; CoreWeb.Cldr.DateTime . to_string! datetime , format : :long , locale : &quot;en&quot; &quot;January 1, 2000 at 11:59:59 PM UTC&quot; iex&gt; CoreWeb.Cldr.DateTime . to_string! datetime , format : :full , locale : &quot;en&quot; &quot;Saturday, January 1, 2000 at 11:59:59 PM GMT&quot; iex&gt; CoreWeb.Cldr.DateTime . to_string! datetime , format : :full , locale : &quot;fr&quot; &quot;samedi 1 janvier 2000 à 23:59:59 UTC&quot;","ref":"CoreWeb.Cldr.DateTime.html#to_string!/2","title":"CoreWeb.Cldr.DateTime.to_string!/2","type":"function"},{"doc":"Manages the Date, TIme and DateTime formats defined by CLDR. The functions in Cldr.DateTime.Format are primarily concerned with encapsulating the data from CLDR in functions that are used during the formatting process.","ref":"CoreWeb.Cldr.DateTime.Format.html","title":"CoreWeb.Cldr.DateTime.Format","type":"module"},{"doc":"Returns a list of calendars defined for a given locale. Arguments locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 Example iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . calendars_for &quot;en&quot; { :ok , [ :buddhist , :chinese , :coptic , :dangi , :ethiopic , :ethiopic_amete_alem , :generic , :gregorian , :hebrew , :indian , :islamic , :islamic_civil , :islamic_rgsa , :islamic_tbla , :islamic_umalqura , :japanese , :persian , :roc ] }","ref":"CoreWeb.Cldr.DateTime.Format.html#calendars_for/1","title":"CoreWeb.Cldr.DateTime.Format.calendars_for/1","type":"function"},{"doc":"Returns a map of the standard date formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . date_formats &quot;en&quot; { :ok , % Cldr.Date.Styles { full : &quot;EEEE, MMMM d, y&quot; , long : &quot;MMMM d, y&quot; , medium : &quot;MMM d, y&quot; , short : &quot;M/d/yy&quot; } } iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . date_formats &quot;en&quot; , :buddhist { :ok , % Cldr.Date.Styles { full : &quot;EEEE, MMMM d, y G&quot; , long : &quot;MMMM d, y G&quot; , medium : &quot;MMM d, y G&quot; , short : &quot;M/d/y GGGGG&quot; } }","ref":"CoreWeb.Cldr.DateTime.Format.html#date_formats/2","title":"CoreWeb.Cldr.DateTime.Format.date_formats/2","type":"function"},{"doc":"Returns a map of the available non-standard datetime formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag.t() calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . date_time_available_formats &quot;en&quot; { :ok , %{ bh : &quot;h B&quot; , bhm : &quot;h:mm B&quot; , bhms : &quot;h:mm:ss B&quot; , d : &quot;d&quot; , e : &quot;ccc&quot; , e_bhm : &quot;E h:mm B&quot; , e_bhms : &quot;E h:mm:ss B&quot; , e_hm : &quot;E HH:mm&quot; , e_hms : &quot;E HH:mm:ss&quot; , ed : &quot;d E&quot; , ehm : &quot;E h:mm a&quot; , ehms : &quot;E h:mm:ss a&quot; , gy : &quot;y G&quot; , gy_mm_md : &quot;MMM d, y G&quot; , gy_mmm : &quot;MMM y G&quot; , gy_mmm_ed : &quot;E, MMM d, y G&quot; , h : &quot;h a&quot; , hm : &quot;h:mm a&quot; , hms : &quot;h:mm:ss a&quot; , hmsv : &quot;h:mm:ss a v&quot; , hmv : &quot;h:mm a v&quot; , m : &quot;L&quot; , m_ed : &quot;E, M/d&quot; , md : &quot;M/d&quot; , mm_md : &quot;MMM d&quot; , mmm : &quot;LLL&quot; , mmm_ed : &quot;E, MMM d&quot; , mmm_md : &quot;MMMM d&quot; , mmmmw_count_one : &quot;&#39;week&#39; W &#39;of&#39; MMMM&quot; , mmmmw_count_other : &quot;&#39;week&#39; W &#39;of&#39; MMMM&quot; , ms : &quot;mm:ss&quot; , y : &quot;y&quot; , y_m : &quot;M/y&quot; , y_m_ed : &quot;E, M/d/y&quot; , y_md : &quot;M/d/y&quot; , y_mm_md : &quot;MMM d, y&quot; , y_mmm : &quot;MMM y&quot; , y_mmm_ed : &quot;E, MMM d, y&quot; , y_mmmm : &quot;MMMM y&quot; , y_qqq : &quot;QQQ y&quot; , y_qqqq : &quot;QQQQ y&quot; , yw_count_one : &quot;&#39;week&#39; w &#39;of&#39; Y&quot; , yw_count_other : &quot;&#39;week&#39; w &#39;of&#39; Y&quot; } }","ref":"CoreWeb.Cldr.DateTime.Format.html#date_time_available_formats/2","title":"CoreWeb.Cldr.DateTime.Format.date_time_available_formats/2","type":"function"},{"doc":"Returns a map of the standard datetime formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . date_time_formats &quot;en&quot; { :ok , % Cldr.DateTime.Styles { full : &quot;{1} &#39;at&#39; {0}&quot; , long : &quot;{1} &#39;at&#39; {0}&quot; , medium : &quot;{1}, {0}&quot; , short : &quot;{1}, {0}&quot; } } iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . date_time_formats &quot;en&quot; , :buddhist { :ok , % Cldr.DateTime.Styles { full : &quot;{1} &#39;at&#39; {0}&quot; , long : &quot;{1} &#39;at&#39; {0}&quot; , medium : &quot;{1}, {0}&quot; , short : &quot;{1}, {0}&quot; } }","ref":"CoreWeb.Cldr.DateTime.Format.html#date_time_formats/2","title":"CoreWeb.Cldr.DateTime.Format.date_time_formats/2","type":"function"},{"doc":"Returns the fallback format for a given locale and calendar type Arguments locale is any locale returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag.t() calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . date_time_interval_fallback &quot;en&quot; , :gregorian [ 0 , &quot; – &quot; , 1 ]","ref":"CoreWeb.Cldr.DateTime.Format.html#date_time_interval_fallback/2","title":"CoreWeb.Cldr.DateTime.Format.date_time_interval_fallback/2","type":"function"},{"doc":"Returns a map of the interval formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag.t() calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples:","ref":"CoreWeb.Cldr.DateTime.Format.html#date_time_interval_formats/2","title":"CoreWeb.Cldr.DateTime.Format.date_time_interval_formats/2","type":"function"},{"doc":"Returns the time period for a given time of day. Arguments time is any Time.t or a map with at least :hour , :minute and :second keys language is a binary representation of a valid and configured language in Cldr The time period is a locale-specific key that is used to localise a time into a textual representation of &quot;am&quot;, &quot;pm&quot;, &quot;noon&quot;, &quot;midnight&quot;, &quot;evening&quot;, &quot;morning&quot; and so on as defined in the CLDR day period rules. Examples iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . day_period_for ~T[06:05:54.515228] , &quot;en&quot; :morning1 iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . day_period_for ~T[13:05:54.515228] , &quot;en&quot; :afternoon1 iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . day_period_for ~T[21:05:54.515228] , &quot;en&quot; :night1 iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . day_period_for ~T[21:05:54.515228] , &quot;fr&quot; :evening1","ref":"CoreWeb.Cldr.DateTime.Format.html#day_period_for/2","title":"CoreWeb.Cldr.DateTime.Format.day_period_for/2","type":"function"},{"doc":"Returns the GMT offset format list for a for a timezone offset for a given locale. Arguments locale is any locale returned by Cldr.known_locale_names/0 Example iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . gmt_format &quot;en&quot; { :ok , [ &quot;GMT&quot; , 0 ] }","ref":"CoreWeb.Cldr.DateTime.Format.html#gmt_format/1","title":"CoreWeb.Cldr.DateTime.Format.gmt_format/1","type":"function"},{"doc":"Returns the GMT format string for a for a timezone with an offset of zero for a given locale. Arguments locale is any locale returned by Cldr.known_locale_names/0 Example iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . gmt_zero_format &quot;en&quot; { :ok , &quot;GMT&quot; }","ref":"CoreWeb.Cldr.DateTime.Format.html#gmt_zero_format/1","title":"CoreWeb.Cldr.DateTime.Format.gmt_zero_format/1","type":"function"},{"doc":"Returns the postive and negative hour format for a timezone offset for a given locale. Arguments locale is any locale returned by Cldr.known_locale_names/0 Example iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . hour_format &quot;en&quot; { :ok , { &quot;+HH:mm&quot; , &quot;-HH:mm&quot; } }","ref":"CoreWeb.Cldr.DateTime.Format.html#hour_format/1","title":"CoreWeb.Cldr.DateTime.Format.hour_format/1","type":"function"},{"doc":"Returns a boolean indicating is a given language defines the notion of &quot;noon&quot; and &quot;midnight&quot; Arguments language is a binary representation of a valid and configured language in Cldr Examples iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . language_has_noon_and_midnight? &quot;fr&quot; true iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . language_has_noon_and_midnight? &quot;en&quot; true iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . language_has_noon_and_midnight? &quot;af&quot; false","ref":"CoreWeb.Cldr.DateTime.Format.html#language_has_noon_and_midnight?/1","title":"CoreWeb.Cldr.DateTime.Format.language_has_noon_and_midnight?/1","type":"function"},{"doc":"Returns a map of the standard time formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . time_formats &quot;en&quot; { :ok , % Cldr.Time.Styles { full : &quot;h:mm:ss a zzzz&quot; , long : &quot;h:mm:ss a z&quot; , medium : &quot;h:mm:ss a&quot; , short : &quot;h:mm a&quot; } } iex&gt; Elixir.CoreWeb.Cldr.DateTime.Format . time_formats &quot;en&quot; , :buddhist { :ok , % Cldr.Time.Styles { full : &quot;h:mm:ss a zzzz&quot; , long : &quot;h:mm:ss a z&quot; , medium : &quot;h:mm:ss a&quot; , short : &quot;h:mm a&quot; } }","ref":"CoreWeb.Cldr.DateTime.Format.html#time_formats/2","title":"CoreWeb.Cldr.DateTime.Format.time_formats/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.DateTime.Format.html#t:calendar/0","title":"CoreWeb.Cldr.DateTime.Format.calendar/0","type":"type"},{"doc":"","ref":"CoreWeb.Cldr.DateTime.Format.html#t:formats/0","title":"CoreWeb.Cldr.DateTime.Format.formats/0","type":"type"},{"doc":"Implements the compilation and execution of date, time and datetime formats.","ref":"CoreWeb.Cldr.DateTime.Formatter.html","title":"CoreWeb.Cldr.DateTime.Formatter","type":"module"},{"doc":"Returns the formatted and localised date, time or datetime for a given Date , Time , DateTime or struct with the appropriate fields. Arguments date is a Date , Time , DateTime or other struct that contains the required date and time fields. format is a valid format string, for example yy/MM/dd hh:MM locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 options is a keyword list of options. The valid options are: Options :number_system . The resulting formatted and localised date/time string will be transliterated into this number system. Number system is anything returned from inspect(unquote(backend)).Number.System.number_systems_for/1 NOTE This function is called by Cldr.Date/to_string/2 , Cldr.Time.to_string/2 and Cldr.DateTime.to_string/2 which is the preferred API. Examples iex&gt; Elixir.CoreWeb.Cldr.DateTime.Formatter . format %{ year : 2017 , month : 9 , day : 3 , hour : 10 , minute : 23 } , ...&gt; &quot;yy/MM/dd hh:MM&quot; , &quot;en&quot; { :ok , &quot;17/09/03 10:09&quot; }","ref":"CoreWeb.Cldr.DateTime.Formatter.html#format/4","title":"CoreWeb.Cldr.DateTime.Formatter.format/4","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.DateTime.Formatter.html#gmt_tz_format/3","title":"CoreWeb.Cldr.DateTime.Formatter.gmt_tz_format/3","type":"function"},{"doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. See Cldr.Interval.to_string/3 and Cldr.DateTime.Interval.to_string/3","ref":"CoreWeb.Cldr.DateTime.Interval.html","title":"CoreWeb.Cldr.DateTime.Interval","type":"module"},{"doc":"Returns a string representing the formatted interval formed by two dates. Arguments from is any map that conforms to the Calendar.datetime type. to is any map that conforms to the Calendar.datetime type. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.CoreWeb.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval Examples iex&gt; CoreWeb.Cldr.DateTime.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ...&gt; ~U[2020-12-31 10:00:00.0Z] { :ok , &quot;Jan 1, 2020, 12:00:00 AM – Dec 31, 2020, 10:00:00 AM&quot; }","ref":"CoreWeb.Cldr.DateTime.Interval.html#to_string/3","title":"CoreWeb.Cldr.DateTime.Interval.to_string/3","type":"function"},{"doc":"Returns a string representing the formatted interval formed by two dates or raises an exception. Arguments from is any map that conforms to the Calendar.datetime type. to is any map that conforms to the Calendar.datetime type. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.CoreWeb.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises an exception Notes For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval. Examples iex&gt; CoreWeb.Cldr.DateTime.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ...&gt; ~U[2020-12-31 10:00:00.0Z] &quot;Jan 1, 2020, 12:00:00 AM – Dec 31, 2020, 10:00:00 AM&quot;","ref":"CoreWeb.Cldr.DateTime.Interval.html#to_string!/3","title":"CoreWeb.Cldr.DateTime.Interval.to_string!/3","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.DateTime.Relative.html","title":"CoreWeb.Cldr.DateTime.Relative","type":"module"},{"doc":"Returns a {:ok, string} representing a relative time (ago, in) for a given number, Date or Datetime. Returns {:error, reason} when errors are detected. relative is a number or Date/Datetime representing the time distance from now or from options[:relative_to] options is a Keyword list of options which are: Options :locale is the locale in which the binary is formatted. The default is Cldr.get_locale/0 :style is the style of the binary. Style may be :default , :narrow or :short :unit is the time unit for the formatting. The allowable units are :second , :minute , :hour , :day , :week , :month , :year , :mon , :tue , :wed , :thu , :fri , :sat , :sun , :quarter :relative_to is the baseline Date or Datetime from which the difference from relative is calculated when relative is a Date or a DateTime. The default for a Date is Date.utc_today , for a DateTime it is DateTime.utc_now Notes When options[:unit] is not specified, MyApp.Cldr.DateTime.Relative.to_string/2 attempts to identify the appropriate unit based upon the magnitude of relative . For example, given a parameter of less than 60 , then to_string/2 will assume :seconds as the unit. See unit_from_relative_time/1 . Examples iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( - 1 ) { :ok , &quot;1 second ago&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( 1 ) { :ok , &quot;in 1 second&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( 1 , unit : :day ) { :ok , &quot;tomorrow&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( 1 , unit : :day , locale : &quot;fr&quot; ) { :ok , &quot;demain&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( 1 , unit : :day , style : :narrow ) { :ok , &quot;tomorrow&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( 1234 , unit : :year ) { :ok , &quot;in 1,234 years&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( 1234 , unit : :year , locale : &quot;fr&quot; ) { :ok , &quot;dans 1 234 ans&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( 31 ) { :ok , &quot;in 31 seconds&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( ~D[2017-04-29] , relative_to : ~D[2017-04-26] ) { :ok , &quot;in 3 days&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( 310 , style : :short , locale : &quot;fr&quot; ) { :ok , &quot;dans 5 min&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( 310 , style : :narrow , locale : &quot;fr&quot; ) { :ok , &quot;+5 min&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string 2 , unit : :wed , style : :short , locale : &quot;en&quot; { :ok , &quot;in 2 Wed.&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string 1 , unit : :wed , style : :short { :ok , &quot;next Wed.&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string - 1 , unit : :wed , style : :short { :ok , &quot;last Wed.&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string - 1 , unit : :wed { :ok , &quot;last Wednesday&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string - 1 , unit : :quarter { :ok , &quot;last quarter&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string - 1 , unit : :mon , locale : &quot;fr&quot; { :ok , &quot;lundi dernier&quot; } iex&gt; CoreWeb.Cldr.DateTime.Relative . to_string ( ~D[2017-04-29] , unit : :ziggeraut ) { :error , { Cldr.UnknownTimeUnit , &quot;Unknown time unit :ziggeraut. Valid time units are [:day, :hour, :minute, :month, :second, :week, :year, :mon, :tue, :wed, :thu, :fri, :sat, :sun, :quarter]&quot; } }","ref":"CoreWeb.Cldr.DateTime.Relative.html#to_string/2","title":"CoreWeb.Cldr.DateTime.Relative.to_string/2","type":"function"},{"doc":"Returns a {:ok, string} representing a relative time (ago, in) for a given number, Date or Datetime or raises an exception on error. Arguments relative is a number or Date/Datetime representing the time distance from now or from options[:relative_to]. options is a Keyword list of options. Options :locale is the locale in which the binary is formatted. The default is Cldr.get_locale/0 :style is the format of the binary. Style may be :default , :narrow or :short . The default is :default :unit is the time unit for the formatting. The allowable units are :second , :minute , :hour , :day , :week , :month , :year , :mon , :tue , :wed , :thu , :fri , :sat , :sun , :quarter :relative_to is the baseline Date or Datetime from which the difference from relative is calculated when relative is a Date or a DateTime. The default for a Date is Date.utc_today , for a DateTime it is DateTime.utc_now See to_string/2","ref":"CoreWeb.Cldr.DateTime.Relative.html#to_string!/2","title":"CoreWeb.Cldr.DateTime.Relative.to_string!/2","type":"function"},{"doc":"Defines a Plural module for Gettext that uses the Cldr plural rules.","ref":"CoreWeb.Cldr.Gettext.Plural.html","title":"CoreWeb.Cldr.Gettext.Plural","type":"module"},{"doc":"Returns how many plural forms exist for a given locale. locale is either a locale name in the list CoreWeb.Cldr.known_locale_names/0 or a %LanguageTag{} as returned by Cldr.Locale.new/2 Examples iex&gt; CoreWeb.Cldr.Gettext.Plural . nplurals ( &quot;pl&quot; ) 4 iex&gt; CoreWeb.Cldr.Gettext.Plural . nplurals ( &quot;en&quot; ) 2","ref":"CoreWeb.Cldr.Gettext.Plural.html#nplurals/1","title":"CoreWeb.Cldr.Gettext.Plural.nplurals/1","type":"function"},{"doc":"Returns to what plural form a given number belongs to in a given locale. locale is either a locale name in the list CoreWeb.Cldr.known_locale_names/0 or a %LanguageTag{} as returned by Cldr.Locale.new/2 Examples iex&gt; CoreWeb.Cldr.Gettext.Plural . plural ( &quot;pl&quot; , 1 ) 0 iex&gt; CoreWeb.Cldr.Gettext.Plural . plural ( &quot;pl&quot; , 2 ) 1 iex&gt; CoreWeb.Cldr.Gettext.Plural . plural ( &quot;pl&quot; , 5 ) 2 iex&gt; CoreWeb.Cldr.Gettext.Plural . plural ( &quot;pl&quot; , 112 ) 2 iex&gt; CoreWeb.Cldr.Gettext.Plural . plural ( &quot;en&quot; , 1 ) 0 iex&gt; CoreWeb.Cldr.Gettext.Plural . plural ( &quot;en&quot; , 2 ) 1 iex&gt; CoreWeb.Cldr.Gettext.Plural . plural ( &quot;en&quot; , 112 ) 1","ref":"CoreWeb.Cldr.Gettext.Plural.html#plural/2","title":"CoreWeb.Cldr.Gettext.Plural.plural/2","type":"function"},{"doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. The interval functions in this library will determine the calendar field with the greatest difference between the two datetimes before using the format pattern. For example, the greatest difference in &quot;Jan 10-12, 2008&quot; is the day field, while the greatest difference in &quot;Jan 10 - Feb 12, 2008&quot; is the month field. This is used to pick the exact pattern to be used. See Cldr.Interval for further detail.","ref":"CoreWeb.Cldr.Interval.html","title":"CoreWeb.Cldr.Interval","type":"module"},{"doc":"Returns a Date.Range or CalendarInterval as a localised string. Arguments range is either a Date.Range.t returned from Date.range/2 or a CalendarInterval.t options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be ommitted. If a style is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time For a datetime there are no style options, the default for each of the date and time part is used locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.CoreWeb.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes to_string/2 will decide which formatter to call based upon the aguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Othersie it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; use CalendarInterval iex&gt; CoreWeb.Cldr.Interval . to_string ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; CoreWeb.Cldr.Interval . to_string Date . range ( ~D[2020-01-01] , ~D[2020-12-31] ) , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Thu, Dec 31, 2020&quot; }","ref":"CoreWeb.Cldr.Interval.html#to_string/2","title":"CoreWeb.Cldr.Interval.to_string/2","type":"function"},{"doc":"Returns a string representing the formatted interval formed by two dates. Arguments from is any map that conforms to the any one of the Calendar types. to is any map that conforms to the any one of the Calendar types. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be ommitted. If styling is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time For a datetime there are no style options, the default for each of the date and time part is used locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.CoreWeb.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes to_string/2 will decide which formatter to call based upon the aguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Othersie it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; CoreWeb.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-12-31] { :ok , &quot;Jan 1 – Dec 31, 2020&quot; } iex&gt; CoreWeb.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] { :ok , &quot;Jan 1 – 12, 2020&quot; } iex&gt; CoreWeb.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; CoreWeb.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-12-01] , ...&gt; format : :long , style : :year_and_month { :ok , &quot;January – December 2020&quot; } iex&gt; use CalendarInterval iex&gt; CoreWeb.Cldr.Interval . to_string ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; CoreWeb.Cldr.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-12-01 10:05:00.0Z] , ...&gt; format : :long { :ok , &quot;January 1, 2020 at 12:00:00 AM UTC – December 1, 2020 at 10:05:00 AM UTC&quot; } iex&gt; CoreWeb.Cldr.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:05:00.0Z] , ...&gt; format : :long { :ok , &quot;January 1, 2020 at 12:00:00 AM UTC – 10:05:00 AM UTC&quot; }","ref":"CoreWeb.Cldr.Interval.html#to_string/3","title":"CoreWeb.Cldr.Interval.to_string/3","type":"function"},{"doc":"Returns a Date.Range or CalendarInterval as a localised string or raises an exception. Arguments range is either a Date.Range.t returned from Date.range/2 or a CalendarInterval.t options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be ommitted. If a style is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time . For a datetime there are no style options, the default for each of the date and time part is used. locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.CoreWeb.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises an exception Notes to_string/3 will decide which formatter to call based upon the aguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Otherwise it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; use CalendarInterval iex&gt; CoreWeb.Cldr.Interval . to_string! ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; CoreWeb.Cldr.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-12-31] ) , ...&gt; format : :long &quot;Wed, Jan 1 – Thu, Dec 31, 2020&quot;","ref":"CoreWeb.Cldr.Interval.html#to_string!/2","title":"CoreWeb.Cldr.Interval.to_string!/2","type":"function"},{"doc":"Returns a string representing the formatted interval formed by two date or raises an exception. Arguments from is any map that conforms to the any one of the Calendar types. to is any map that conforms to the any one of the Calendar types. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be ommitted. If styling is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time . For a datetime there are no style options, the default for each of the date and time part is used. locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.CoreWeb.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises and exception Notes to_string/3 will decide which formatter to call based upon the aguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Othersie it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; CoreWeb.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-12-31] &quot;Jan 1 – Dec 31, 2020&quot; iex&gt; CoreWeb.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-01-12] &quot;Jan 1 – 12, 2020&quot; iex&gt; CoreWeb.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; CoreWeb.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-12-01] , ...&gt; format : :long , style : :year_and_month &quot;January – December 2020&quot; iex&gt; use CalendarInterval iex&gt; CoreWeb.Cldr.Interval . to_string! ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; CoreWeb.Cldr.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-12-01 10:05:00.0Z] , ...&gt; format : :long &quot;January 1, 2020 at 12:00:00 AM UTC – December 1, 2020 at 10:05:00 AM UTC&quot; iex&gt; CoreWeb.Cldr.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:05:00.0Z] , ...&gt; format : :long &quot;January 1, 2020 at 12:00:00 AM UTC – 10:05:00 AM UTC&quot;","ref":"CoreWeb.Cldr.Interval.html#to_string!/3","title":"CoreWeb.Cldr.Interval.to_string!/3","type":"function"},{"doc":"Backend module that provides functions to define new locales.","ref":"CoreWeb.Cldr.Locale.html","title":"CoreWeb.Cldr.Locale","type":"module"},{"doc":"","ref":"CoreWeb.Cldr.Locale.html#new/1","title":"CoreWeb.Cldr.Locale.new/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Locale.html#new!/1","title":"CoreWeb.Cldr.Locale.new!/1","type":"function"},{"doc":"Returns the territory from a language tag or locale name. Arguments locale is any language tag returned be Cldr.Locale.new/2 or a locale name in the list returned by Cldr.known_locale_names/1 Returns A territory code as an atom Examples iex&gt; CoreWeb.Cldr.Locale . territory_from_locale &quot;en-US&quot; :US iex&gt; CoreWeb.Cldr.Locale . territory_from_locale &quot;en-US-u-rg-GBzzzz&quot; :GB","ref":"CoreWeb.Cldr.Locale.html#territory_from_locale/1","title":"CoreWeb.Cldr.Locale.territory_from_locale/1","type":"function"},{"doc":"Returns the time zone from a language tag or locale name. Arguments locale is any language tag returned be Cldr.Locale.new/2 or a locale name in the list returned by Cldr.known_locale_names/1 Returns A time zone ID as a string or :error if no time zone can be determined Examples iex&gt; CoreWeb.Cldr.Locale . timezone_from_locale &quot;en-US-u-tz-ausyd&quot; &quot;Australia/Sydney&quot;","ref":"CoreWeb.Cldr.Locale.html#timezone_from_locale/1","title":"CoreWeb.Cldr.Locale.timezone_from_locale/1","type":"function"},{"doc":"Formats numbers and currencies based upon CLDR's decimal formats specification. The format specification is documentated in Unicode TR35 . There are several classes of formatting including non-scientific, scientific, rules based (for spelling and ordinal formats), compact formats that display 1k rather than 1,000 and so on. See Cldr.Number.to_string/2 for specific formatting options. Non-Scientific Notation Formatting The following description applies to formats that do not use scientific notation or significant digits: If the number of actual integer digits exceeds the maximum integer digits, then only the least significant digits are shown. For example, 1997 is formatted as &quot;97&quot; if the maximum integer digits is set to 2. If the number of actual integer digits is less than the minimum integer digits, then leading zeros are added. For example, 1997 is formatted as &quot;01997&quot; if the minimum integer digits is set to 5. If the number of actual fraction digits exceeds the maximum fraction digits, then half-even rounding it performed to the maximum fraction digits. For example, 0.125 is formatted as &quot;0.12&quot; if the maximum fraction digits is 2. This behavior can be changed by specifying a rounding increment and a rounding mode. If the number of actual fraction digits is less than the minimum fraction digits, then trailing zeros are added. For example, 0.125 is formatted as &quot;0.1250&quot; if the minimum fraction digits is set to 4. Trailing fractional zeros are not displayed if they occur j positions after the decimal, where j is less than the maximum fraction digits. For example, 0.10004 is formatted as &quot;0.1&quot; if the maximum fraction digits is four or less. Scientific Notation Formatting Numbers in scientific notation are expressed as the product of a mantissa and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3. The mantissa is typically in the half-open interval [1.0, 10.0) or sometimes [0.0, 1.0), but it need not be. In a pattern, the exponent character immediately followed by one or more digit characters indicates scientific notation. Example: &quot;0.###E0&quot; formats the number 1234 as &quot;1.234E3&quot;. The number of digit characters after the exponent character gives the minimum exponent digit count. There is no maximum. Negative exponents are formatted using the localized minus sign, not the prefix and suffix from the pattern. This allows patterns such as &quot;0.###E0 m/s&quot;. To prefix positive exponents with a localized plus sign, specify '+' between the exponent and the digits: &quot;0.###E+0&quot; will produce formats &quot;1E+1&quot;, &quot;1E+0&quot;, &quot;1E-1&quot;, and so on. (In localized patterns, use the localized plus sign rather than '+'.) The minimum number of integer digits is achieved by adjusting the exponent. Example: 0.00123 formatted with &quot;00.###E0&quot; yields &quot;12.3E-4&quot;. This only happens if there is no maximum number of integer digits. If there is a maximum, then the minimum number of integer digits is fixed at one. The maximum number of integer digits, if present, specifies the exponent grouping. The most common use of this is to generate engineering notation, in which the exponent is a multiple of three, for example, &quot;##0.###E0&quot;. The number 12345 is formatted using &quot;##0.####E0&quot; as &quot;12.345E3&quot;. When using scientific notation, the formatter controls the digit counts using significant digits logic. The maximum number of significant digits limits the total number of integer and fraction digits that will be shown in the mantissa; it does not affect parsing. For example, 12345 formatted with &quot;##0.##E0&quot; is &quot;12.3E3&quot;. Exponential patterns may not contain grouping separators. Significant Digits There are two ways of controlling how many digits are shows: (a) significant digits counts, or (b) integer and fraction digit counts. Integer and fraction digit counts are described above. When a formatter is using significant digits counts, it uses however many integer and fraction digits are required to display the specified number of significant digits. It may ignore min/max integer/fraction digits, or it may use them to the extent possible.","ref":"CoreWeb.Cldr.Number.html","title":"CoreWeb.Cldr.Number","type":"module"},{"doc":"Parse a string locale-aware manner and return a number. Arguments string is any String.t options is a keyword list of options Options :number is one of :integer , :float , :decimal or nil . The default is nil meaning that the type auto-detected as either an integer or a float . :locale is any locale returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag.t . The default is CoreWeb.Cldr.get_locale/0 . Returns A number of the requested or default type or {:error, {exception, error}} if no number could be determined Notes This function parses a string to return a number but in a locale-aware manner. It will normalise grouping characters and decimal separators, different forms of the + and - symbols that appear in Unicode and strips any _ characters that might be used for formatting in a string. It then parses the number using the Elixir standard library functions. Examples iex&gt; CoreWeb.Cldr.Number . parse ( &quot;＋1.000,34&quot; , locale : &quot;de&quot; ) { :ok , 1000.34 } iex&gt; CoreWeb.Cldr.Number . parse ( &quot;-1_000_000.34&quot; ) { :ok , - 1000000.34 } iex&gt; CoreWeb.Cldr.Number . parse ( &quot;1.000&quot; , locale : &quot;de&quot; , number : :integer ) { :ok , 1000 } iex&gt; CoreWeb.Cldr.Number . parse ( &quot;＋1.000,34&quot; , locale : &quot;de&quot; , number : :integer ) { :error , { Cldr.Number.ParseError , &quot;The string \\&quot; ＋1.000,34 \\&quot; could not be parsed as a number&quot; } }","ref":"CoreWeb.Cldr.Number.html#parse/2","title":"CoreWeb.Cldr.Number.parse/2","type":"function"},{"doc":"Resolve curencies from strings within a list. Arguments list is any list in which currency names and symbols are expected options is a keyword list of options Options :locale is any valid locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 The default is CoreWeb.Cldr.get_locale() :only is an atom or list of atoms representing the currencies or currency types to be considered for a match. The equates to a list of acceptable currencies for parsing. See the notes below for currency types. :except is an atom or list of atoms representing the currencies or currency types to be not considered for a match. This equates to a list of unacceptable currencies for parsing. See the notes below for currency types. :fuzzy is a float greater than 0.0 and less than or equal to 1.0 which is used as input to String.jaro_distance/2 to determine is the provided currency string is close enough to a known currency string for it to identify definitively a currency code. It is recommended to use numbers greater than 0.8 in order to reduce false positives. Notes The :only and :except options accept a list of currency codes and/or currency types. The following types are recognised. If both :only and :except are specified, the :except entries take priority - that means any entries in :except are removed from the :only entries. :all , the default, considers all currencies :current considers those currencies that have a :to date of nil and which also is a known ISO4217 currency :historic is the opposite of :current :tender considers currencies that are legal tender :unannotated considers currencies that don't have &quot;(some string)&quot; in their names. These are usually financial instruments. Examples iex&gt; CoreWeb.Cldr.Number . scan ( &quot;100 US dollars&quot; ) ...&gt; |&gt; CoreWeb.Cldr.Number . resolve_currencies [ 100 , :USD ] iex&gt; CoreWeb.Cldr.Number . scan ( &quot;100 eurosports&quot; ) ...&gt; |&gt; CoreWeb.Cldr.Number . resolve_currencies ( fuzzy : 0.75 ) [ 100 , :EUR ] iex&gt; CoreWeb.Cldr.Number . scan ( &quot;100 dollars des États-Unis&quot; ) ...&gt; |&gt; CoreWeb.Cldr.Number . resolve_currencies ( locale : &quot;fr&quot; ) [ 100 , :USD ]","ref":"CoreWeb.Cldr.Number.html#resolve_currencies/2","title":"CoreWeb.Cldr.Number.resolve_currencies/2","type":"function"},{"doc":"Resolve a currency from a string Arguments list is any list in which currency names and symbols are expected options is a keyword list of options Options :backend is any module() that includes use Cldr and therefore is a Cldr backend module(). The default is Cldr.default_backend/0 :locale is any valid locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 The default is CoreWeb.Cldr.get_locale() :only is an atom or list of atoms representing the currencies or currency types to be considered for a match. The equates to a list of acceptable currencies for parsing. See the notes below for currency types. :except is an atom or list of atoms representing the currencies or currency types to be not considered for a match. This equates to a list of unacceptable currencies for parsing. See the notes below for currency types. :fuzzy is a float greater than 0.0 and less than or equal to 1.0 which is used as input to String.jaro_distance/2 to determine is the provided currency string is close enough to a known currency string for it to identify definitively a currency code. It is recommended to use numbers greater than 0.8 in order to reduce false positives. Returns An ISO4217 currency code as an atom or {:error, {exception, message}} Notes The :only and :except options accept a list of currency codes and/or currency types. The following types are recognised. If both :only and :except are specified, the :except entries take priority - that means any entries in :except are removed from the :only entries. :all , the default, considers all currencies :current considers those currencies that have a :to date of nil and which also is a known ISO4217 currency :historic is the opposite of :current :tender considers currencies that are legal tender :unannotated considers currencies that don't have &quot;(some string)&quot; in their names. These are usually financial instruments. Examples iex&gt; CoreWeb.Cldr.Number . resolve_currency ( &quot;US dollars&quot; ) :USD iex&gt; CoreWeb.Cldr.Number . resolve_currency ( &quot;100 eurosports&quot; , fuzzy : 0.75 ) :EUR iex&gt; CoreWeb.Cldr.Number . resolve_currency ( &quot;dollars des États-Unis&quot; , locale : &quot;fr&quot; ) :USD iex&gt; CoreWeb.Cldr.Number . resolve_currency ( &quot;not a known currency&quot; , locale : &quot;fr&quot; ) { :error , { Cldr.UnknownCurrencyError , &quot;The currency \\&quot; not a known currency \\&quot; is unknown or not supported&quot; } }","ref":"CoreWeb.Cldr.Number.html#resolve_currency/2","title":"CoreWeb.Cldr.Number.resolve_currency/2","type":"function"},{"doc":"Scans a string locale-aware manner and returns a list of strings and numbers. Arguments string is any String.t options is a keyword list of options Options :number is one of :integer , :float , :decimal or nil . The default is nil meaning that the type auto-detected as either an integer or a float . :locale is any locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag.t . The default is CoreWeb.Cldr.get_locale/0 . Returns A list of strings and numbers Notes Number parsing is performed by Cldr.Number.Parser.parse/2 and any options provided are passed to that function. Examples iex&gt; CoreWeb.Cldr.Number . scan ( &quot;£1_000_000.34&quot; ) [ &quot;£&quot; , 1000000.34 ] iex&gt; CoreWeb.Cldr.Number . scan ( &quot;I want £1_000_000 dollars&quot; ) [ &quot;I want £&quot; , 1000000 , &quot; dollars&quot; ] iex&gt; CoreWeb.Cldr.Number . scan ( &quot;The prize is 23&quot; ) [ &quot;The prize is &quot; , 23 ] iex&gt; CoreWeb.Cldr.Number . scan ( &quot;The lottery number is 23 for the next draw&quot; ) [ &quot;The lottery number is &quot; , 23 , &quot; for the next draw&quot; ] iex&gt; CoreWeb.Cldr.Number . scan ( &quot;The loss is -1.000 euros&quot; , locale : &quot;de&quot; , number : :integer ) [ &quot;The loss is &quot; , - 1000 , &quot; euros&quot; ]","ref":"CoreWeb.Cldr.Number.html#scan/2","title":"CoreWeb.Cldr.Number.scan/2","type":"function"},{"doc":"Formats a number and applies the :approximately format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Cldr.Number.to_string/3 for a description of the available options. Example iex&gt; CoreWeb.Cldr.Number . to_approx_string 1234 { :ok , &quot;~1,234&quot; }","ref":"CoreWeb.Cldr.Number.html#to_approx_string/2","title":"CoreWeb.Cldr.Number.to_approx_string/2","type":"function"},{"doc":"Formats a number and applies the :at_least format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See CoreWeb.Cldr.Number.to_string/2 for a description of the available options. Example iex&gt; CoreWeb.Cldr.Number . to_at_least_string 1234 { :ok , &quot;1,234+&quot; }","ref":"CoreWeb.Cldr.Number.html#to_at_least_string/2","title":"CoreWeb.Cldr.Number.to_at_least_string/2","type":"function"},{"doc":"Formats a number and applies the :at_most format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Cldr.Number.to_string/3 for a description of the available options. Example iex&gt; CoreWeb.Cldr.Number . to_at_most_string 1234 { :ok , &quot;≤1,234&quot; }","ref":"CoreWeb.Cldr.Number.html#to_at_most_string/2","title":"CoreWeb.Cldr.Number.to_at_most_string/2","type":"function"},{"doc":"Formats the first and last numbers of a range and applies the :range format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Cldr.Number.to_string/3 for a description of the available options. Example iex&gt; CoreWeb.Cldr.Number . to_range_string 1234 .. 5678 { :ok , &quot;1,234–5,678&quot; }","ref":"CoreWeb.Cldr.Number.html#to_range_string/2","title":"CoreWeb.Cldr.Number.to_range_string/2","type":"function"},{"doc":"Returns a number formatted into a string according to a format pattern and options. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. Options format : the format style or a format string defining how the number is formatted. See Cldr.Number.Format for how format strings can be constructed. See Cldr.Number.Format.format_styles_for/3 to return available format styles for a locale. The default format is :standard . If :format is set to :long or :short then the formatting depends on whether :currency is specified. If not specified then the number is formatted as :decimal_long or :decimal_short . If :currency is specified the number is formatted as :currency_long or :currency_short and :fractional_digits is set to 0 as a default. :format may also be a format defined by CLDR's Rules Based Number Formats (RBNF). Further information is found in the module Cldr.Rbnf . The most commonly used formats in this category are to spell out the number in a the locales language. The applicable formats are :spellout , :spellout_year , :ordinal . A number can also be formatted as roman numbers by using the format :roman or :roman_lower . currency : is the currency for which the number is formatted. For available currencies see Cldr.Currency.known_currencies/0 . This option is required if :format is set to :currency . If currency is set and no :format is set, :format will be set to :currency as well. :cash : a boolean which indicates whether a number being formatted as a :currency is to be considered a cash value or not. Currencies can be rounded differently depending on whether :cash is true or false . *This option is deprecated in favour of currency_digits: :cash . :currency_digits indicates which of the rounding and digits should be used. The options are :accounting which is the default, :cash or :iso :rounding_mode : determines how a number is rounded to meet the precision of the format requested. The available rounding modes are :down , :half_up, :half_even, :ceiling, :floor, :half_down, :up. The default is :half_even . :number_system : determines which of the number systems for a locale should be used to define the separators and digits for the formatted number. If number_system is an atom then number_system is interpreted as a number system. If the :number_system is binary then it is interpreted as a number system name. See Cldr.Number.System.number_system_names_for/2 . The default is :default . :locale : determines the locale in which the number is formatted. See Cldr.known_locale_names/0 . The default is Cldr.get_locale/0 which is the locale currently in affect for this Process and which is set by Cldr.put_locale/1 . If :fractional_digits is set to a positive integer value then the number will be rounded to that number of digits and displayed accordingly - overriding settings that would be applied by default. For example, currencies have fractional digits defined reflecting each currencies minor unit. Setting :fractional_digits will override that setting. If :maximum_integer_digits is set to a positive integer value then the numnber is left truncated before formatting. For example if the number 1234 is formatted with the option maximum_integer_digits: 2 , the number is truncated to 34 and formatted. If :round_nearest is set to a positive integer value then the number will be rounded to nearest increment of that value - overriding settings that would be applied by default. :minimum_grouping_digits overrides the CLDR definition of minimum grouping digits. For example in the locale es the number 1234 is formatted by default as 1345 because the locale defines the minimium_grouping_digits as 2 . If minimum_grouping_digits: 1 is set as an option the number is formatting as 1.345 . The :minimum_grouping_digits is added to the grouping defined by the number format. If the sum of these two digits is greater than the number of digits in the integer (or fractional) part of the number then no grouping is performed. Locale extensions affecting formatting A locale identifier can specify options that affect number formatting. These options are: cu : defines what currency is implied when no curreny is specified in the call to to_string/2 . cf : defines whether to use currency or accounting format for formatting currencies. This overrides the format: :currency and format: :accounting options. nu : defines the number system to be used if none is specified by the :number_system option to to_string/2 These keys are part of the u extension and that document should be consulted for details on how to construct a locale identifier with these extensions. Returns {:ok, string} or {:error, {exception, message}} Examples iex&gt; CoreWeb.Cldr.Number . to_string 12345 { :ok , &quot;12,345&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 12345 , locale : &quot;fr&quot; { :ok , &quot;12 345&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 1345.32 , currency : :EUR , locale : &quot;es&quot; , minimum_grouping_digits : 1 { :ok , &quot;1.345,32 €&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 1345.32 , currency : :EUR , locale : &quot;es&quot; { :ok , &quot;1345,32 €&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 12345 , locale : &quot;fr&quot; , currency : &quot;USD&quot; { :ok , &quot;12 345,00 $US&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 12345 , format : &quot;#E0&quot; { :ok , &quot;1.2345E4&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 12345 , format : :accounting , currency : &quot;THB&quot; { :ok , &quot;THB 12,345.00&quot; } iex&gt; CoreWeb.Cldr.Number . to_string - 12345 , format : :accounting , currency : &quot;THB&quot; { :ok , &quot;(THB 12,345.00)&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 12345 , format : :accounting , currency : &quot;THB&quot; , ...&gt; locale : &quot;th&quot; { :ok , &quot;฿12,345.00&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 12345 , format : :accounting , currency : &quot;THB&quot; , ...&gt; locale : &quot;th&quot; , number_system : :native { :ok , &quot;฿๑๒,๓๔๕.๐๐&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 1244.30 , format : :long { :ok , &quot;1 thousand&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 1244.30 , format : :long , currency : &quot;USD&quot; { :ok , &quot;1,244 US dollars&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 1244.30 , format : :short { :ok , &quot;1K&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 1244.30 , format : :short , currency : &quot;EUR&quot; { :ok , &quot;€1K&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 1234 , format : :spellout { :ok , &quot;one thousand two hundred thirty-four&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 1234 , format : :spellout_verbose { :ok , &quot;one thousand two hundred and thirty-four&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 1989 , format : :spellout_year { :ok , &quot;nineteen eighty-nine&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 123 , format : :ordinal { :ok , &quot;123rd&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 123 , format : :roman { :ok , &quot;CXXIII&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 123 , locale : &quot;th-u-nu-thai&quot; { :ok , &quot;๑๒๓&quot; } iex&gt; CoreWeb.Cldr.Number . to_string 123 , format : :currency , locale : &quot;en-u-cu-thb&quot; { :ok , &quot;THB 123.00&quot; } Errors An error tuple {:error, reason} will be returned if an error is detected. The two most likely causes of an error return are: A format cannot be compiled. In this case the error tuple will look like: iex&gt; CoreWeb.Cldr.Number . to_string ( 12345 , format : &quot;0#&quot; ) { :error , { Cldr.FormatCompileError , &quot;Decimal format compiler: syntax error before: \\&quot; # \\&quot; &quot; } } The format style requested is not defined for the locale and number_system . This happens typically when the number system is :algorithmic rather than the more common :numeric . In this case the error return looks like: iex&gt; CoreWeb.Cldr.Number . to_string ( 1234 , locale : &quot;he&quot; , number_system : &quot;hebr&quot; ) { :error , { Cldr.UnknownFormatError , &quot;The locale \\&quot; he \\&quot; with number system :hebr does not define a format :standard&quot; } }","ref":"CoreWeb.Cldr.Number.html#to_string/2","title":"CoreWeb.Cldr.Number.to_string/2","type":"function"},{"doc":"Same as the execution of to_string/2 but raises an exception if an error would be returned. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See CoreWeb.Cldr.Number.to_string/2 Returns a formatted number as a string or raises an exception Examples iex&gt; CoreWeb.Cldr.Number . to_string! 12345 &quot;12,345&quot; iex&gt; CoreWeb.Cldr.Number . to_string! 12345 , locale : &quot;fr&quot; &quot;12 345&quot;","ref":"CoreWeb.Cldr.Number.html#to_string!/2","title":"CoreWeb.Cldr.Number.to_string!/2","type":"function"},{"doc":"Return a valid number system from a provided locale and number system name or type. The number system or number system type must be valid for the given locale. If a number system type is provided, the underlying number system is returned. Arguments locale is any valid locale name returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 system_name is any number system name returned by Cldr.known_number_systems/0 or a number system type returned by Cldr.known_number_system_types/0 Examples iex&gt; CoreWeb.Cldr.Number . validate_number_system &quot;en&quot; , :latn { :ok , :latn } iex&gt; CoreWeb.Cldr.Number . validate_number_system &quot;en&quot; , :default { :ok , :latn } iex&gt; CoreWeb.Cldr.Number . validate_number_system &quot;en&quot; , :unknown { :error , { Cldr.UnknownNumberSystemError , &quot;The number system :unknown is unknown&quot; } } iex&gt; CoreWeb.Cldr.Number . validate_number_system &quot;zz&quot; , :default { :error , { Cldr.UnknownLocaleError , &quot;The locale \\&quot; zz \\&quot; is not known.&quot; } }","ref":"CoreWeb.Cldr.Number.html#validate_number_system/2","title":"CoreWeb.Cldr.Number.validate_number_system/2","type":"function"},{"doc":"Implements cardinal plural rules for numbers.","ref":"CoreWeb.Cldr.Number.Cardinal.html","title":"CoreWeb.Cldr.Number.Cardinal","type":"module"},{"doc":"The locale names for which plural rules are defined.","ref":"CoreWeb.Cldr.Number.Cardinal.html#available_locale_names/0","title":"CoreWeb.Cldr.Number.Cardinal.available_locale_names/0","type":"function"},{"doc":"The configured locales for which plural rules are defined. Returns the intersection of CoreWeb.Cldr.known_locale_names/0 and the locales for which Cardinal plural rules are defined. There are many Cldr locales which don't have their own plural rules so this list is the intersection of Cldr 's configured locales and those that have rules.","ref":"CoreWeb.Cldr.Number.Cardinal.html#known_locale_names/0","title":"CoreWeb.Cldr.Number.Cardinal.known_locale_names/0","type":"function"},{"doc":"Return the plural key for a given number in a given locale Returns which plural key ( :zero , :one , :two , :few , :many or :other ) a given number fits into within the context of a given locale. Note that these key names should not be interpreted literally. For example, the key returned from Cldr.Number.Ordinal.plural_rule(0, &quot;en&quot;) is actually :other , not :zero . This key can then be used to format a number, date, time, unit, list or other content in a plural-sensitive way. Arguments number is any integer , float or Decimal locale is any locale returned by Cldr.Locale.new!/2 or any locale_name returned by CoreWeb.Cldr.known_locale_names/0 rounding is one of [:down, :up, :ceiling, :floor, :half_even, :half_up, :half_down] . The default is :half_even . Examples iex&gt; CoreWeb.Cldr.Number.Cardinal . plural_rule 0 , &quot;fr&quot; :one iex&gt; CoreWeb.Cldr.Number.Cardinal . plural_rule 0 , &quot;en&quot; :other","ref":"CoreWeb.Cldr.Number.Cardinal.html#plural_rule/3","title":"CoreWeb.Cldr.Number.Cardinal.plural_rule/3","type":"function"},{"doc":"Returns all the plural rules defined in CLDR.","ref":"CoreWeb.Cldr.Number.Cardinal.html#plural_rules/0","title":"CoreWeb.Cldr.Number.Cardinal.plural_rules/0","type":"function"},{"doc":"Return the plural rules for a locale. Arguments locale is any locale returned by CoreWeb.Cldr.Locale.new!/1 or any locale_name returned by CoreWeb.Cldr.known_locale_names/0 The rules are returned in AST form after parsing.","ref":"CoreWeb.Cldr.Number.Cardinal.html#plural_rules_for/1","title":"CoreWeb.Cldr.Number.Cardinal.plural_rules_for/1","type":"function"},{"doc":"Pluralize a number using cardinal plural rules and a substition map. Arguments number is an integer, float or Decimal locale is any locale returned by CoreWeb.Cldr.Locale.new!/1 or any locale_name returned by CoreWeb.Cldr.known_locale_names/0 substitutions is a map that maps plural keys to a string. The valid substitution keys are :zero , :one , :two , :few , :many and :other . See also CoreWeb.Cldr.Number.Cardinal.Cardinal.plural_rule/3 . Examples iex&gt; CoreWeb.Cldr.Number.Cardinal . pluralize 1 , &quot;en&quot; , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; CoreWeb.Cldr.Number.Cardinal . pluralize 2 , &quot;en&quot; , %{ one : &quot;one&quot; } nil iex&gt; CoreWeb.Cldr.Number.Cardinal . pluralize 2 , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; , other : &quot;other&quot; } &quot;other&quot; iex&gt; CoreWeb.Cldr.Number.Cardinal . pluralize 22 , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; , other : &quot;other&quot; } &quot;other&quot; iex&gt; CoreWeb.Cldr.Number.Cardinal . pluralize Decimal . new ( 1 ) , &quot;en&quot; , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; CoreWeb.Cldr.Number.Cardinal . pluralize Decimal . new ( 2 ) , &quot;en&quot; , %{ one : &quot;one&quot; } nil iex&gt; CoreWeb.Cldr.Number.Cardinal . pluralize Decimal . new ( 2 ) , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; } nil iex&gt; CoreWeb.Cldr.Number.Cardinal . pluralize 1 .. 10 , &quot;ar&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;few&quot; iex&gt; CoreWeb.Cldr.Number.Cardinal . pluralize 1 .. 10 , &quot;en&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;other&quot;","ref":"CoreWeb.Cldr.Number.Cardinal.html#pluralize/3","title":"CoreWeb.Cldr.Number.Cardinal.pluralize/3","type":"function"},{"doc":"Functions to manage the collection of number patterns defined in Cldr. Number patterns affect how numbers are interpreted in a localized context. Here are some examples, based on the French locale. The &quot;.&quot; shows where the decimal point should go. The &quot;,&quot; shows where the thousands separator should go. A &quot;0&quot; indicates zero-padding: if the number is too short, a zero (in the locale's numeric set) will go there. A &quot;#&quot; indicates no padding: if the number is too short, nothing goes there. A &quot;¤&quot; shows where the currency sign will go. The following illustrates the effects of different patterns for the French locale, with the number &quot;1234.567&quot;. Notice how the pattern characters ',' and '.' are replaced by the characters appropriate for the locale. Number Pattern Examples Pattern Currency Text #,##0.## n/a 1 234,57 #,##0.### n/a 1 234,567 ###0.##### n/a 1234,567 ###0.0000# n/a 1234,5670 00000.0000 n/a 01234,5670 #,##0.00 ¤ EUR 1 234,57 € The number of # placeholder characters before the decimal do not matter, since no limit is placed on the maximum number of digits. There should, however, be at least one zero some place in the pattern. In currency formats, the number of digits after the decimal also do not matter, since the information in the supplemental data (see Supplemental Currency Data) is used to override the number of decimal places — and the rounding — according to the currency that is being formatted. That can be seen in the above chart, with the difference between Yen and Euro formatting. Details of the number formats are described in the Unicode documentation","ref":"CoreWeb.Cldr.Number.Format.html","title":"CoreWeb.Cldr.Number.Format","type":"module"},{"doc":"Returns the decimal formats defined for a given locale. Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 . The default is CoreWeb.Cldr.get_locale/0 Returns {:ok, map} where map is a map of decimal formats keyed by number system or {:error, {exception, message}}","ref":"CoreWeb.Cldr.Number.Format.html#all_formats_for/1","title":"CoreWeb.Cldr.Number.Format.all_formats_for/1","type":"function"},{"doc":"Returns the decimal formats defined for a given locale. Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 . The default is CoreWeb.Cldr.get_locale/0 Returns {:ok, map} where map is a map of decimal formats keyed by number system or raises an exception See CoreWeb.Cldr.Number.Format.Number.Format.all_formats_for/1 for further information.","ref":"CoreWeb.Cldr.Number.Format.html#all_formats_for!/1","title":"CoreWeb.Cldr.Number.Format.all_formats_for!/1","type":"function"},{"doc":"Returns the currency space for a given locale and number system.","ref":"CoreWeb.Cldr.Number.Format.html#currency_spacing/2","title":"CoreWeb.Cldr.Number.Format.currency_spacing/2","type":"function"},{"doc":"Returns the list of decimal formats in the configured locales including the list of locales configured for precompilation in config.exs . This function exists to allow the decimal formatter to precompile all the known formats at compile time. Example #=&gt; CoreWeb.Cldr.Number.Format.Format.decimal_format_list [ &quot;#&quot; , &quot;#,##,##0%&quot; , &quot;#,##,##0.###&quot; , &quot;#,##,##0.00¤&quot; , &quot;#,##,##0.00¤;(#,##,##0.00¤)&quot; , &quot;#,##,##0 %&quot; , &quot;#,##0%&quot; , &quot;#,##0.###&quot; , &quot;#,##0.00 ¤&quot; , &quot;#,##0.00 ¤;(#,##0.00 ¤)&quot; , &quot;#,##0.00¤&quot; , &quot;#,##0.00¤;(#,##0.00¤)&quot; , &quot;#,##0 %&quot; , &quot;#0%&quot; , &quot;#0.######&quot; , &quot;#0.00 ¤&quot; , &quot;#E0&quot; , &quot;%#,##0&quot; , &quot;% #,##0&quot; , &quot;0&quot; , &quot;0.000000E+000&quot; , &quot;0000 M ¤&quot; , &quot;0000¤&quot; , &quot;000G ¤&quot; , &quot;000K ¤&quot; , &quot;000M ¤&quot; , &quot;000T ¤&quot; , &quot;000mM ¤&quot; , &quot;000m ¤&quot; , &quot;000 Bio&#39;.&#39; ¤&quot; , &quot;000 Bln ¤&quot; , &quot;000 Bn ¤&quot; , &quot;000 B ¤&quot; , &quot;000 E ¤&quot; , &quot;000 K ¤&quot; , &quot;000 MRD ¤&quot; , &quot;000 Md ¤&quot; , &quot;000 Mio&#39;.&#39; ¤&quot; , &quot;000 Mio ¤&quot; , &quot;000 Mld ¤&quot; , &quot;000 Mln ¤&quot; , &quot;000 Mn ¤&quot; , &quot;000 Mrd&#39;.&#39; ¤&quot; , &quot;000 Mrd ¤&quot; , &quot;000 Mr ¤&quot; , &quot;000 M ¤&quot; , &quot;000 NT ¤&quot; , &quot;000 N ¤&quot; , &quot;000 Tn ¤&quot; , &quot;000 Tr ¤&quot; , ... ]","ref":"CoreWeb.Cldr.Number.Format.html#decimal_format_list/0","title":"CoreWeb.Cldr.Number.Format.decimal_format_list/0","type":"function"},{"doc":"Returns the list of decimal formats for a configured locale. Arguments locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 . The default is CoreWeb.Cldr.get_locale/0 This function exists to allow the decimal formatter to precompile all the known formats at compile time. Its use is not otherwise recommended. Example iex&gt; CoreWeb.Cldr.Number.Format . decimal_format_list_for ( &quot;en&quot; ) { :ok , [ &quot;#,##0%&quot; , &quot;#,##0.###&quot; , &quot;#E0&quot; , &quot;0 billion&quot; , &quot;0 million&quot; , &quot;0 thousand&quot; , &quot;0 trillion&quot; , &quot;00 billion&quot; , &quot;00 million&quot; , &quot;00 thousand&quot; , &quot;00 trillion&quot; , &quot;000 billion&quot; , &quot;000 million&quot; , &quot;000 thousand&quot; , &quot;000 trillion&quot; , &quot;000B&quot; , &quot;000K&quot; , &quot;000M&quot; , &quot;000T&quot; , &quot;00B&quot; , &quot;00K&quot; , &quot;00M&quot; , &quot;00T&quot; , &quot;0B&quot; , &quot;0K&quot; , &quot;0M&quot; , &quot;0T&quot; , &quot;¤#,##0.00&quot; , &quot;¤#,##0.00;(¤#,##0.00)&quot; , &quot;¤000B&quot; , &quot;¤000K&quot; , &quot;¤000M&quot; , &quot;¤000T&quot; , &quot;¤00B&quot; , &quot;¤00K&quot; , &quot;¤00M&quot; , &quot;¤00T&quot; , &quot;¤0B&quot; , &quot;¤0K&quot; , &quot;¤0M&quot; , &quot;¤0T&quot; ] }","ref":"CoreWeb.Cldr.Number.Format.html#decimal_format_list_for/1","title":"CoreWeb.Cldr.Number.Format.decimal_format_list_for/1","type":"function"},{"doc":"Returns the default grouping for a locale as a map. Arguments locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 . The default is CoreWeb.Cldr.get_locale/0 Returns {:ok, grouping} or {:error, {exception, message}} Examples iex&gt; CoreWeb.Cldr.Number.Format . default_grouping_for ( &quot;en&quot; ) { :ok , %{ fraction : %{ first : 0 , rest : 0 } , integer : %{ first : 3 , rest : 3 } } }","ref":"CoreWeb.Cldr.Number.Format.html#default_grouping_for/1","title":"CoreWeb.Cldr.Number.Format.default_grouping_for/1","type":"function"},{"doc":"Returns the default grouping for a locale or raises on error. Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 . The default is CoreWeb.Cldr.get_locale/0 Returns grouping as a map or raises an exception Examples iex&gt; CoreWeb.Cldr.Number.Format . default_grouping_for! ( &quot;en&quot; ) %{ fraction : %{ first : 0 , rest : 0 } , integer : %{ first : 3 , rest : 3 } }","ref":"CoreWeb.Cldr.Number.Format.html#default_grouping_for!/1","title":"CoreWeb.Cldr.Number.Format.default_grouping_for!/1","type":"function"},{"doc":"Return the predfined formats for a given locale and number_system . Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 . The default is CoreWeb.Cldr.get_locale/0 number_system is any valid number system or number system type returned by CoreWeb.Cldr.Number.System.number_systems_for/1 Example CoreWeb.Cldr.Number.Format . formats_for &quot;fr&quot; , :native #=&gt; %Cldr.Number.Format{ accounting : &quot;#,##0.00 ¤;(#,##0.00 ¤)&quot; , currency : &quot;#,##0.00 ¤&quot; , percent : &quot;#,##0 %&quot; , scientific : &quot;#E0&quot; , standard : &quot;#,##0.###&quot; currency_short : [ { &quot;1000&quot; , [ one : &quot;0 k ¤&quot; , other : &quot;0 k ¤&quot; ] } , { &quot;10000&quot; , [ one : &quot;00 k ¤&quot; , other : &quot;00 k ¤&quot; ] } , { &quot;100000&quot; , [ one : &quot;000 k ¤&quot; , other : &quot;000 k ¤&quot; ] } , { &quot;1000000&quot; , [ one : &quot;0 M ¤&quot; , other : &quot;0 M ¤&quot; ] } , { &quot;10000000&quot; , [ one : &quot;00 M ¤&quot; , other : &quot;00 M ¤&quot; ] } , { &quot;100000000&quot; , [ one : &quot;000 M ¤&quot; , other : &quot;000 M ¤&quot; ] } , { &quot;1000000000&quot; , [ one : &quot;0 Md ¤&quot; , other : &quot;0 Md ¤&quot; ] } , { &quot;10000000000&quot; , [ one : &quot;00 Md ¤&quot; , other : &quot;00 Md ¤&quot; ] } , { &quot;100000000000&quot; , [ one : &quot;000 Md ¤&quot; , other : &quot;000 Md ¤&quot; ] } , { &quot;1000000000000&quot; , [ one : &quot;0 Bn ¤&quot; , other : &quot;0 Bn ¤&quot; ] } , { &quot;10000000000000&quot; , [ one : &quot;00 Bn ¤&quot; , other : &quot;00 Bn ¤&quot; ] } , { &quot;100000000000000&quot; , [ one : &quot;000 Bn ¤&quot; , other : &quot;000 Bn ¤&quot; ] } ] , ... }","ref":"CoreWeb.Cldr.Number.Format.html#formats_for/2","title":"CoreWeb.Cldr.Number.Format.formats_for/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Number.Format.html#formats_for!/2","title":"CoreWeb.Cldr.Number.Format.formats_for!/2","type":"function"},{"doc":"Returns the minimum grouping digits for a locale. Arguments locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 . The default is CoreWeb.Cldr.get_locale/0 Returns {:ok, minumum_digits} or {:error, {exception, message}} Examples iex&gt; CoreWeb.Cldr.Number.Format . minimum_grouping_digits_for ( &quot;en&quot; ) { :ok , 1 }","ref":"CoreWeb.Cldr.Number.Format.html#minimum_grouping_digits_for/1","title":"CoreWeb.Cldr.Number.Format.minimum_grouping_digits_for/1","type":"function"},{"doc":"Returns the minium grouping digits for a locale or raises on error. Arguments locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 . The default is CoreWeb.Cldr.get_locale/0 Returns minumum_digits or raises an exception Examples iex&gt; CoreWeb.Cldr.Number.Format . minimum_grouping_digits_for! ( &quot;en&quot; ) 1","ref":"CoreWeb.Cldr.Number.Format.html#minimum_grouping_digits_for!/1","title":"CoreWeb.Cldr.Number.Format.minimum_grouping_digits_for!/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Number.Formatter.Decimal.html","title":"CoreWeb.Cldr.Number.Formatter.Decimal","type":"module"},{"doc":"Formats a number according to a decimal format string. Arguments number is an integer, float or Decimal format is a format string. See CoreWeb.Cldr.Number for further information. options is a map of options. See CoreWeb.Cldr.Number.to_string/2 for further information.","ref":"CoreWeb.Cldr.Number.Formatter.Decimal.html#to_string/3","title":"CoreWeb.Cldr.Number.Formatter.Decimal.to_string/3","type":"function"},{"doc":"Implements ordinal plural rules for numbers.","ref":"CoreWeb.Cldr.Number.Ordinal.html","title":"CoreWeb.Cldr.Number.Ordinal","type":"module"},{"doc":"The locale names for which plural rules are defined.","ref":"CoreWeb.Cldr.Number.Ordinal.html#available_locale_names/0","title":"CoreWeb.Cldr.Number.Ordinal.available_locale_names/0","type":"function"},{"doc":"The configured locales for which plural rules are defined. Returns the intersection of CoreWeb.Cldr.known_locale_names/0 and the locales for which Ordinal plural rules are defined. There are many Cldr locales which don't have their own plural rules so this list is the intersection of Cldr 's configured locales and those that have rules.","ref":"CoreWeb.Cldr.Number.Ordinal.html#known_locale_names/0","title":"CoreWeb.Cldr.Number.Ordinal.known_locale_names/0","type":"function"},{"doc":"Return the plural key for a given number in a given locale Returns which plural key ( :zero , :one , :two , :few , :many or :other ) a given number fits into within the context of a given locale. Note that these key names should not be interpreted literally. For example, the key returned from Cldr.Number.Ordinal.plural_rule(0, &quot;en&quot;) is actually :other , not :zero . This key can then be used to format a number, date, time, unit, list or other content in a plural-sensitive way. Arguments number is any integer , float or Decimal locale is any locale returned by Cldr.Locale.new!/2 or any locale_name returned by CoreWeb.Cldr.known_locale_names/0 rounding is one of [:down, :up, :ceiling, :floor, :half_even, :half_up, :half_down] . The default is :half_even . Examples iex&gt; CoreWeb.Cldr.Number.Ordinal . plural_rule 0 , &quot;fr&quot; :other iex&gt; CoreWeb.Cldr.Number.Ordinal . plural_rule 1 , &quot;en&quot; :one","ref":"CoreWeb.Cldr.Number.Ordinal.html#plural_rule/3","title":"CoreWeb.Cldr.Number.Ordinal.plural_rule/3","type":"function"},{"doc":"Returns all the plural rules defined in CLDR.","ref":"CoreWeb.Cldr.Number.Ordinal.html#plural_rules/0","title":"CoreWeb.Cldr.Number.Ordinal.plural_rules/0","type":"function"},{"doc":"Return the plural rules for a locale. Arguments locale is any locale returned by CoreWeb.Cldr.Locale.new!/1 or any locale_name returned by CoreWeb.Cldr.known_locale_names/0 The rules are returned in AST form after parsing.","ref":"CoreWeb.Cldr.Number.Ordinal.html#plural_rules_for/1","title":"CoreWeb.Cldr.Number.Ordinal.plural_rules_for/1","type":"function"},{"doc":"Pluralize a number using ordinal plural rules and a substition map. Arguments number is an integer, float or Decimal or a Range.t{} . When a range, The is that in any usage, the start value is strictly less than the end value, and that no values are negative. Results for any cases that do not meet these criteria are undefined. locale is any locale returned by CoreWeb.Cldr.Locale.new!/1 or any locale_name returned by CoreWeb.Cldr.known_locale_names/0 substitutions is a map that maps plural keys to a string. The valid substitution keys are :zero , :one , :two , :few , :many and :other . See also CoreWeb.Cldr.Number.Ordinal.Ordinal.plural_rule/3 . Examples iex&gt; CoreWeb.Cldr.Number.Ordinal . pluralize 1 , &quot;en&quot; , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; CoreWeb.Cldr.Number.Ordinal . pluralize 2 , &quot;en&quot; , %{ one : &quot;one&quot; } nil iex&gt; CoreWeb.Cldr.Number.Ordinal . pluralize 2 , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; } &quot;two&quot; iex&gt; CoreWeb.Cldr.Number.Ordinal . pluralize 22 , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; , other : &quot;other&quot; } &quot;two&quot; iex&gt; CoreWeb.Cldr.Number.Ordinal . pluralize Decimal . new ( 1 ) , &quot;en&quot; , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; CoreWeb.Cldr.Number.Ordinal . pluralize Decimal . new ( 2 ) , &quot;en&quot; , %{ one : &quot;one&quot; } nil iex&gt; CoreWeb.Cldr.Number.Ordinal . pluralize Decimal . new ( 2 ) , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; } &quot;two&quot; iex&gt; CoreWeb.Cldr.Number.Ordinal . pluralize 1 .. 10 , &quot;ar&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;other&quot; iex&gt; CoreWeb.Cldr.Number.Ordinal . pluralize 1 .. 10 , &quot;en&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;other&quot;","ref":"CoreWeb.Cldr.Number.Ordinal.html#pluralize/3","title":"CoreWeb.Cldr.Number.Ordinal.pluralize/3","type":"function"},{"doc":"Implements plural rules for ranges","ref":"CoreWeb.Cldr.Number.PluralRule.Range.html","title":"CoreWeb.Cldr.Number.PluralRule.Range","type":"module"},{"doc":"Returns a final plural type for a start-of-range plural type, an end-of-range plural type and a locale. Arguments first is a plural type for the start of a range last is a plural type for the end of a range locale is any Cldr.LanguageTag.t or a language name (not locale name) Example iex&gt; CoreWeb.Cldr.Number.PluralRule.Range . plural_rule :other , :few , &quot;ar&quot; :few","ref":"CoreWeb.Cldr.Number.PluralRule.Range.html#plural_rule/3","title":"CoreWeb.Cldr.Number.PluralRule.Range.plural_rule/3","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Number.Symbol.html","title":"CoreWeb.Cldr.Number.Symbol","type":"module"},{"doc":"Returns a list of all decimal symbols defined by the locales configured in this backend as a list.","ref":"CoreWeb.Cldr.Number.Symbol.html#all_decimal_symbols/0","title":"CoreWeb.Cldr.Number.Symbol.all_decimal_symbols/0","type":"function"},{"doc":"Returns a list of all decimal symbols defined by the locales configured in this backend as a string. This string can be used as a character class when builing a regular expression.","ref":"CoreWeb.Cldr.Number.Symbol.html#all_decimal_symbols_class/0","title":"CoreWeb.Cldr.Number.Symbol.all_decimal_symbols_class/0","type":"function"},{"doc":"Returns a list of all grouping symbols defined by the locales configured in this backend as a list.","ref":"CoreWeb.Cldr.Number.Symbol.html#all_grouping_symbols/0","title":"CoreWeb.Cldr.Number.Symbol.all_grouping_symbols/0","type":"function"},{"doc":"Returns a list of all grouping symbols defined by the locales configured in this backend as a string. This string can be used as a character class when builing a regular expression.","ref":"CoreWeb.Cldr.Number.Symbol.html#all_grouping_symbols_class/0","title":"CoreWeb.Cldr.Number.Symbol.all_grouping_symbols_class/0","type":"function"},{"doc":"Returns a map of Cldr.Number.Symbol.t structs of the number symbols for each of the number systems of a locale. Options locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/ . The default is CoreWeb.Cldr.get_locale/0 . Example: iex&gt; CoreWeb.Cldr.Number.Symbol . number_symbols_for ( &quot;th&quot; ) { :ok , %{ latn : % Cldr.Number.Symbol { decimal : &quot;.&quot; , exponential : &quot;E&quot; , group : &quot;,&quot; , infinity : &quot;∞&quot; , list : &quot;;&quot; , minus_sign : &quot;-&quot; , nan : &quot;NaN&quot; , per_mille : &quot;‰&quot; , percent_sign : &quot;%&quot; , plus_sign : &quot;+&quot; , superscripting_exponent : &quot;×&quot; , time_separator : &quot;:&quot; } , thai : % Cldr.Number.Symbol { decimal : &quot;.&quot; , exponential : &quot;E&quot; , group : &quot;,&quot; , infinity : &quot;∞&quot; , list : &quot;;&quot; , minus_sign : &quot;-&quot; , nan : &quot;NaN&quot; , per_mille : &quot;‰&quot; , percent_sign : &quot;%&quot; , plus_sign : &quot;+&quot; , superscripting_exponent : &quot;×&quot; , time_separator : &quot;:&quot; } } }","ref":"CoreWeb.Cldr.Number.Symbol.html#number_symbols_for/1","title":"CoreWeb.Cldr.Number.Symbol.number_symbols_for/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Number.Symbol.html#number_symbols_for/2","title":"CoreWeb.Cldr.Number.Symbol.number_symbols_for/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Number.System.html","title":"CoreWeb.Cldr.Number.System","type":"module"},{"doc":"Returns the actual number system from a number system type. locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 system_name is any number system name returned by Cldr.known_number_systems/0 or a number system type returned by Cldr.known_number_system_types/0 This function will decode a number system type into the actual number system. If the number system provided can't be decoded it is returned as is. Examples iex&gt; CoreWeb.Cldr.Number.System . number_system_for &quot;th&quot; , :latn { :ok , %{ digits : &quot;0123456789&quot; , type : :numeric } } iex&gt; CoreWeb.Cldr.Number.System . number_system_for &quot;en&quot; , :default { :ok , %{ digits : &quot;0123456789&quot; , type : :numeric } } iex&gt; CoreWeb.Cldr.Number.System . number_system_for &quot;he&quot; , :traditional { :ok , %{ rules : &quot;hebrew&quot; , type : :algorithmic } } iex&gt; CoreWeb.Cldr.Number.System . number_system_for &quot;en&quot; , :native { :ok , %{ digits : &quot;0123456789&quot; , type : :numeric } } iex&gt; CoreWeb.Cldr.Number.System . number_system_for &quot;en&quot; , :finance { :error , { Cldr.UnknownNumberSystemError , &quot;The number system :finance is unknown for the locale named \\&quot; en \\&quot; . Valid number systems are %{default: :latn, native: :latn}&quot; } }","ref":"CoreWeb.Cldr.Number.System.html#number_system_for/2","title":"CoreWeb.Cldr.Number.System.number_system_for/2","type":"function"},{"doc":"Returns the number system from a language tag or locale name. Arguments locale is any language tag returned be Cldr.Locale.new/2 or a locale name in the list returned by Cldr.known_locale_names/1 Returns A number system name as an atom Examples iex&gt; CoreWeb.Cldr.Number.System . number_system_from_locale &quot;en-US-u-nu-thai&quot; :thai iex&gt; CoreWeb.Cldr.Number.System . number_system_from_locale &quot;en-US&quot; :latn","ref":"CoreWeb.Cldr.Number.System.html#number_system_from_locale/1","title":"CoreWeb.Cldr.Number.System.number_system_from_locale/1","type":"function"},{"doc":"Returns the number systems available for a locale or {:error, message} if the locale is not known. locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 Examples iex&gt; CoreWeb.Cldr.Number.System . number_system_names_for &quot;en&quot; { :ok , [ :latn ] } iex&gt; CoreWeb.Cldr.Number.System . number_system_names_for &quot;zz&quot; { :error , { Cldr.UnknownLocaleError , &quot;The locale \\&quot; zz \\&quot; is not known.&quot; } }","ref":"CoreWeb.Cldr.Number.System.html#number_system_names_for/1","title":"CoreWeb.Cldr.Number.System.number_system_names_for/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Number.System.html#number_system_names_for!/1","title":"CoreWeb.Cldr.Number.System.number_system_names_for!/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Number.System.html#number_system_types_for/1","title":"CoreWeb.Cldr.Number.System.number_system_types_for/1","type":"function"},{"doc":"Returns the number systems available for a locale or {:error, message} if the locale is not known. locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 Examples iex&gt; CoreWeb.Cldr.Number.System . number_systems_for &quot;en&quot; { :ok , %{ default : :latn , native : :latn } } iex&gt; CoreWeb.Cldr.Number.System . number_systems_for &quot;th&quot; { :ok , %{ default : :latn , native : :thai } } iex&gt; CoreWeb.Cldr.Number.System . number_systems_for &quot;zz&quot; { :error , { Cldr.UnknownLocaleError , &quot;The locale \\&quot; zz \\&quot; is not known.&quot; } }","ref":"CoreWeb.Cldr.Number.System.html#number_systems_for/1","title":"CoreWeb.Cldr.Number.System.number_systems_for/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Number.System.html#number_systems_for!/1","title":"CoreWeb.Cldr.Number.System.number_systems_for!/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Number.System.html#number_systems_like/2","title":"CoreWeb.Cldr.Number.System.number_systems_like/2","type":"function"},{"doc":"Returns a number system name for a given locale and number system reference. system_name is any number system name returned by CoreWeb.Cldr.known_number_systems/0 or a number system type returned by CoreWeb.Cldr.known_number_system_types/0 locale is any valid locale name returned by CoreWeb.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by CoreWeb.Cldr.Locale.new!/1 Number systems can be references in one of two ways: As a number system type such as :default, :native, :traditional and :finance. This allows references to a number system for a locale in a consistent fashion for a given use WIth the number system name directly, such as :latn, :arab or any of the other 70 or so This function dereferences the supplied system_name and returns the actual system name. Examples ex &gt; CoreWeb.Cldr.Number.System . system_name_from ( :default , &quot;en&quot; ) { :ok , :latn } iex&gt; CoreWeb.Cldr.Number.System . system_name_from ( &quot;latn&quot; , &quot;en&quot; ) { :ok , :latn } iex&gt; CoreWeb.Cldr.Number.System . system_name_from ( :native , &quot;en&quot; ) { :ok , :latn } iex&gt; CoreWeb.Cldr.Number.System . system_name_from ( :nope , &quot;en&quot; ) { :error , { Cldr.UnknownNumberSystemError , &quot;The number system :nope is unknown&quot; } } Note that return value is not guaranteed to be a valid number system for the given locale as demonstrated in the third example.","ref":"CoreWeb.Cldr.Number.System.html#system_name_from/2","title":"CoreWeb.Cldr.Number.System.system_name_from/2","type":"function"},{"doc":"Converts a number into the representation of a non-latin number system. This function converts numbers to a known number system only, it does not provide number formatting. number is a float , integer or Decimal system_name is any number system name returned by Cldr.known_number_systems/0 or a number system type returned by Cldr.known_number_system_types/0 There are two types of number systems in CLDR: :numeric in which the number system defines a direct mapping between the latin digits 0..9 into a the number system equivalent. In this case, to_system/2 invokes Cldr.Number.Transliterate.transliterate_digits/3 for the given number. :algorithmic in which the number system does not have the same structure as the :latn number system and therefore the conversion is done algorithmically. For CLDR the algorithm is implemented through Cldr.Rbnf rulesets. These rulesets are considered by CLDR to be less rigorous than the :numeric number systems and caution and testing for a specific use case is recommended. Examples iex&gt; CoreWeb.Cldr.Number.System . to_system 123456 , :hebr { :ok , &quot;קכ״ג׳תנ״ו&quot; } iex&gt; CoreWeb.Cldr.Number.System . to_system 123 , :hans { :ok , &quot;一百二十三&quot; } iex&gt; CoreWeb.Cldr.Number.System . to_system 123 , :hant { :ok , &quot;一百二十三&quot; } iex&gt; CoreWeb.Cldr.Number.System . to_system 123 , :hansfin { :ok , &quot;壹佰贰拾叁&quot; }","ref":"CoreWeb.Cldr.Number.System.html#to_system/2","title":"CoreWeb.Cldr.Number.System.to_system/2","type":"function"},{"doc":"Converts a number into the representation of a non-latin number system. Returns a converted string or raises on error. number is a float , integer or Decimal system_name is any number system name returned by CoreWeb.Cldr.known_number_systems/0 or a number system type returned by CoreWeb.Cldr.known_number_system_types/0 See CoreWeb.Cldr.Number.System.to_system/2 for further information. Examples iex&gt; CoreWeb.Cldr.Number.System . to_system! 123 , :hans &quot;一百二十三&quot; iex&gt; CoreWeb.Cldr.Number.System . to_system! 123 , :hant &quot;一百二十三&quot; iex&gt; CoreWeb.Cldr.Number.System . to_system! 123 , :hansfin &quot;壹佰贰拾叁&quot;","ref":"CoreWeb.Cldr.Number.System.html#to_system!/2","title":"CoreWeb.Cldr.Number.System.to_system!/2","type":"function"},{"doc":"Transliteration for digits and separators. Transliterating a string is an expensive business. First the string has to be exploded into its component graphemes. Then for each grapheme we have to map to the equivalent in the other {locale, number_system} . Then we have to reassemble the string. Effort is made to short circuit where possible. Transliteration is not required for any {locale, number_system} that is the same as {&quot;en&quot;, &quot;latn&quot;} since the implementation uses this combination for the placeholders during formatting already. When short circuiting is possible (typically the en-* locales with &quot;latn&quot; number_system - the total number of short circuited locales is 211 of the 537 in CLDR) the overall number formatting is twice as fast than when formal transliteration is required. Configuring precompilation of digit transliterations This module includes Cldr.Number.Transliterate.transliterate_digits/3 which transliterates digits between number systems. For example from :arabic to :latn. Since generating a transliteration map is slow, pairs of transliterations can be configured so that the transliteration map is created at compile time and therefore speeding up transliteration at run time. To configure these transliteration pairs, add the to the use Cldr configuration in a backend module: defmodule MyApp.Cldr do use Cldr , locale : [ &quot;en&quot; , &quot;fr&quot; , &quot;th&quot; ] , default_locale : &quot;en&quot; , precompile_transliterations : [ { :latn , :thai } , { :arab , :thai } ] end Where each tuple in the list configures one transliteration map. In this example, two maps are configured: from :latn to :thai and from :arab to :thai . A list of configurable number systems is returned by Cldr.Number.System.systems_with_digits/0 . If a transliteration is requested between two number pairs that have not been configured for precompilation, a warning is logged.","ref":"CoreWeb.Cldr.Number.Transliterate.html","title":"CoreWeb.Cldr.Number.Transliterate","type":"module"},{"doc":"Transliterates from latin digits to another number system's digits. Transliterates the latin digits 0..9 to their equivalents in another number system. Also transliterates the decimal and grouping separators as well as the plus, minus and exponent symbols. Any other character in the string will be returned &quot;as is&quot;. Arguments sequence is the string to be transliterated. locale is any known locale, defaulting to CoreWeb.Cldr.get_locale/0 . number_system is any known number system. If expressed as a string it is the actual name of a known number system. If epressed as an atom it is used as a key to look up a number system for the locale (the usual keys are :default and :native but :traditional and :finance are also part of the standard). See CoreWeb.Cldr.Number.System.number_systems_for/1 for a locale to see what number system types are defined. The default is :default . For available number systems see Cldr.Number.System.number_systems/0 and CoreWeb.Cldr.Number.System.number_systems_for/1 . Also see CoreWeb.Cldr.Number.Symbol.number_symbols_for/1 . Examples iex&gt; CoreWeb.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; ) &quot;123556&quot; iex&gt; CoreWeb.Cldr.Number.Transliterate . transliterate ( &quot;123,556.000&quot; , &quot;fr&quot; , :default ) &quot;123 556,000&quot; iex&gt; CoreWeb.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; , &quot;th&quot; , :default ) &quot;123556&quot; iex&gt; CoreWeb.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; , &quot;th&quot; , &quot;thai&quot; ) &quot;๑๒๓๕๕๖&quot; iex&gt; CoreWeb.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; , &quot;th&quot; , :native ) &quot;๑๒๓๕๕๖&quot; iex&gt; CoreWeb.Cldr.Number.Transliterate . transliterate ( &quot;Some number is: 123556&quot; , &quot;th&quot; , &quot;thai&quot; ) &quot;Some number is: ๑๒๓๕๕๖&quot;","ref":"CoreWeb.Cldr.Number.Transliterate.html#transliterate/3","title":"CoreWeb.Cldr.Number.Transliterate.transliterate/3","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Number.Transliterate.html#transliterate!/3","title":"CoreWeb.Cldr.Number.Transliterate.transliterate!/3","type":"function"},{"doc":"Transliterates digits from one number system to another number system digits is binary representation of a number from_system and to_system are number system names in atom form. See Cldr.Number.System.systems_with_digits/0 for available number systems. Example iex&gt; CoreWeb.Cldr.Number.Transliterate . transliterate_digits &quot;٠١٢٣٤٥٦٧٨٩&quot; , :arab , :latn &quot;0123456789&quot;","ref":"CoreWeb.Cldr.Number.Transliterate.html#transliterate_digits/3","title":"CoreWeb.Cldr.Number.Transliterate.transliterate_digits/3","type":"function"},{"doc":"Functions to implement the number system rule-based-number-format rules of CLDR. These rules are defined only on the &quot;root&quot; locale and represent specialised number formatting. The standard public API for RBNF is via the Cldr.Number.to_string/2 function. The functions on this module are defined at compile time based upon the RBNF rules defined in the Unicode CLDR data repository. Available rules are identified by: iex&gt; CoreWeb.Cldr.Rbnf.NumberSystem . rule_sets ( &quot;root&quot; ) [ :tamil , :roman_upper , :roman_lower , :hebrew_item , :hebrew , :greek_upper , :greek_lower , :georgian , :ethiopic , :cyrillic_lower , :armenian_upper , :armenian_lower ] A rule can then be invoked on an available rule_set. For example iex&gt; CoreWeb.Cldr.Rbnf.NumberSystem . roman_upper ( 123 , &quot;root&quot; ) &quot;CXXIII&quot; This particular call is equivalent to the call through the public API of: iex&gt; CoreWeb.Cldr.Number . to_string ( 123 , format : :roman ) { :ok , &quot;CXXIII&quot; }","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html","title":"CoreWeb.Cldr.Rbnf.NumberSystem","type":"module"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#all_rule_sets/0","title":"CoreWeb.Cldr.Rbnf.NumberSystem.all_rule_sets/0","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#armenian_lower/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.armenian_lower/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#armenian_lower/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.armenian_lower/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#armenian_upper/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.armenian_upper/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#armenian_upper/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.armenian_upper/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#cyrillic_lower/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.cyrillic_lower/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#cyrillic_lower/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.cyrillic_lower/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_1_10/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.cyrillic_lower_1_10/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_final/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.cyrillic_lower_final/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_post/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.cyrillic_lower_post/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_thousands/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.cyrillic_lower_thousands/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#ethiopic/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.ethiopic/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#ethiopic/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.ethiopic/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#ethiopic_p/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.ethiopic_p/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#ethiopic_p1/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.ethiopic_p1/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#ethiopic_p2/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.ethiopic_p2/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#ethiopic_p3/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.ethiopic_p3/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#georgian/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.georgian/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#georgian/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.georgian/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#greek_lower/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.greek_lower/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#greek_lower/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.greek_lower/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#greek_numeral_majuscules/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.greek_numeral_majuscules/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#greek_numeral_minuscules/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.greek_numeral_minuscules/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#greek_upper/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.greek_upper/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#greek_upper/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.greek_upper/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#hebrew/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.hebrew/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#hebrew/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.hebrew/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#hebrew_0_99/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.hebrew_0_99/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#hebrew_item/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.hebrew_item/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#hebrew_item/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.hebrew_item/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#hebrew_item_hundreds/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.hebrew_item_hundreds/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#hebrew_thousands/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.hebrew_thousands/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#roman_lower/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.roman_lower/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#roman_lower/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.roman_lower/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#roman_upper/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.roman_upper/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#roman_upper/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.roman_upper/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#rule_sets/0","title":"CoreWeb.Cldr.Rbnf.NumberSystem.rule_sets/0","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#rule_sets/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.rule_sets/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#tamil/1","title":"CoreWeb.Cldr.Rbnf.NumberSystem.tamil/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#tamil/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.tamil/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.NumberSystem.html#tamil_thousands/2","title":"CoreWeb.Cldr.Rbnf.NumberSystem.tamil_thousands/2","type":"function"},{"doc":"Functions to implement the ordinal rule-based-number-format rules of CLDR. As CLDR notes, the data is incomplete or non-existent for many languages. It is considered complete for English however. The standard public API for RBNF is via the Cldr.Number.to_string/2 function. The functions on this module are defined at compile time based upon the RBNF rules defined in the Unicode CLDR data repository. Available rules are identified by: iex&gt; CoreWeb.Cldr.Rbnf.Ordinal . rule_sets ( &quot;en&quot; ) [ :digits_ordinal ] A rule can then be invoked on an available rule_set. For example iex&gt; CoreWeb.Cldr.Rbnf.Ordinal . digits_ordinal ( 123 , &quot;en&quot; ) &quot;123rd&quot; This call is equivalent to the call through the public API of: iex&gt; CoreWeb.Cldr.Number . to_string ( 123 , format : :ordinal ) { :ok , &quot;123rd&quot; }","ref":"CoreWeb.Cldr.Rbnf.Ordinal.html","title":"CoreWeb.Cldr.Rbnf.Ordinal","type":"module"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Ordinal.html#all_rule_sets/0","title":"CoreWeb.Cldr.Rbnf.Ordinal.all_rule_sets/0","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Ordinal.html#digits_ordinal/2","title":"CoreWeb.Cldr.Rbnf.Ordinal.digits_ordinal/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Ordinal.html#rule_sets/0","title":"CoreWeb.Cldr.Rbnf.Ordinal.rule_sets/0","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Ordinal.html#rule_sets/1","title":"CoreWeb.Cldr.Rbnf.Ordinal.rule_sets/1","type":"function"},{"doc":"Functions to implement the spellout rule-based-number-format rules of CLDR. As CLDR notes, the data is incomplete or non-existent for many languages. It is considered complete for English however. The standard public API for RBNF is via the Cldr.Number.to_string/2 function. The functions on this module are defined at compile time based upon the RBNF rules defined in the Unicode CLDR data repository. Available rules are identified by: iex&gt; CoreWeb.Cldr.Rbnf.Spellout . rule_sets ( &quot;en&quot; ) [ :spellout_ordinal_verbose , :spellout_ordinal , :spellout_numbering_year , :spellout_numbering_verbose , :spellout_numbering , :spellout_cardinal_verbose , :spellout_cardinal ] A rule can then be invoked on an available rule_set. For example: iex&gt; CoreWeb.Cldr.Rbnf.Spellout . spellout_ordinal ( 123 , &quot;en&quot; ) &quot;one hundred twenty-third&quot; This call is equivalent to the call through the public API of: iex&gt; CoreWeb.Cldr.Number . to_string ( 123 , format : :spellout ) { :ok , &quot;one hundred twenty-three&quot; }","ref":"CoreWeb.Cldr.Rbnf.Spellout.html","title":"CoreWeb.Cldr.Rbnf.Spellout","type":"module"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#2d_year/2","title":"CoreWeb.Cldr.Rbnf.Spellout.2d_year/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#all_rule_sets/0","title":"CoreWeb.Cldr.Rbnf.Spellout.all_rule_sets/0","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#and/2","title":"CoreWeb.Cldr.Rbnf.Spellout.and/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#and_o/2","title":"CoreWeb.Cldr.Rbnf.Spellout.and_o/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#commas/2","title":"CoreWeb.Cldr.Rbnf.Spellout.commas/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#commas_o/2","title":"CoreWeb.Cldr.Rbnf.Spellout.commas_o/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#number_en/2","title":"CoreWeb.Cldr.Rbnf.Spellout.number_en/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#ord_ste/2","title":"CoreWeb.Cldr.Rbnf.Spellout.ord_ste/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#rule_sets/0","title":"CoreWeb.Cldr.Rbnf.Spellout.rule_sets/0","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#rule_sets/1","title":"CoreWeb.Cldr.Rbnf.Spellout.rule_sets/1","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#spellout_cardinal/2","title":"CoreWeb.Cldr.Rbnf.Spellout.spellout_cardinal/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#spellout_cardinal_verbose/2","title":"CoreWeb.Cldr.Rbnf.Spellout.spellout_cardinal_verbose/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#spellout_numbering/2","title":"CoreWeb.Cldr.Rbnf.Spellout.spellout_numbering/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#spellout_numbering_verbose/2","title":"CoreWeb.Cldr.Rbnf.Spellout.spellout_numbering_verbose/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#spellout_numbering_year/2","title":"CoreWeb.Cldr.Rbnf.Spellout.spellout_numbering_year/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#spellout_ordinal/2","title":"CoreWeb.Cldr.Rbnf.Spellout.spellout_ordinal/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#spellout_ordinal_verbose/2","title":"CoreWeb.Cldr.Rbnf.Spellout.spellout_ordinal_verbose/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#th/2","title":"CoreWeb.Cldr.Rbnf.Spellout.th/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Rbnf.Spellout.html#tieth/2","title":"CoreWeb.Cldr.Rbnf.Spellout.tieth/2","type":"function"},{"doc":"","ref":"CoreWeb.Cldr.Time.html","title":"CoreWeb.Cldr.Time","type":"module"},{"doc":"Formats a time according to a format string as defined in CLDR and described in TR35 Returns {:ok, formatted_time} or {:error, reason} . Arguments time is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys hour , minute , second and optionally calendar and microsecond options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string. The default is :medium locale: any locale returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale() number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; locale, for example, era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Examples iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] { :ok , &quot;7:35:13 AM&quot; } iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] , format : :short { :ok , &quot;7:35 AM&quot; } iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] , format : :medium , locale : &quot;fr&quot; { :ok , &quot;07:35:13&quot; } iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] , format : :medium { :ok , &quot;7:35:13 AM&quot; } iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; Cldr.Time . to_string datetime , format : :long { :ok , &quot;11:59:59 PM UTC&quot; }","ref":"CoreWeb.Cldr.Time.html#to_string/2","title":"CoreWeb.Cldr.Time.to_string/2","type":"function"},{"doc":"Formats a time according to a format string as defined in CLDR and described in TR35 . Arguments time is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys hour , minute , second and optionally calendar and microsecond options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string. The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; locale, for example, era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Returns formatted_time_string or raises an exception. Examples iex&gt; CoreWeb.Cldr.Time . to_string! ~T[07:35:13.215217] &quot;7:35:13 AM&quot; iex&gt; CoreWeb.Cldr.Time . to_string! ~T[07:35:13.215217] , format : :short &quot;7:35 AM&quot; iex&gt; CoreWeb.Cldr.Time . to_string ~T[07:35:13.215217] , format : :short , period : :variant { :ok , &quot;7:35 AM&quot; } iex&gt; CoreWeb.Cldr.Time . to_string! ~T[07:35:13.215217] , format : :medium , locale : &quot;fr&quot; &quot;07:35:13&quot; iex&gt; CoreWeb.Cldr.Time . to_string! ~T[07:35:13.215217] , format : :medium &quot;7:35:13 AM&quot; iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; CoreWeb.Cldr.Time . to_string! datetime , format : :long &quot;11:59:59 PM UTC&quot;","ref":"CoreWeb.Cldr.Time.html#to_string!/2","title":"CoreWeb.Cldr.Time.to_string!/2","type":"function"},{"doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. See Cldr.Interval.to_string/3 and Cldr.Time.Interval.to_string/3","ref":"CoreWeb.Cldr.Time.Interval.html","title":"CoreWeb.Cldr.Time.Interval","type":"module"},{"doc":"Returns a string representing the formatted interval formed by two times. Arguments from is any map that conforms to the Calendar.time type. to is any map that conforms to the Calendar.time type. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :time , :zone , and :flex . The default is :time . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.CoreWeb.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configured locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single time is formatted instead of an interval Examples iex&gt; CoreWeb.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , format : :short { :ok , &quot;10 – 10 AM&quot; } iex&gt; CoreWeb.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , format : :medium { :ok , &quot;10:00 – 10:03 AM&quot; } iex&gt; CoreWeb.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , format : :long { :ok , &quot;10:00 – 10:03 AM&quot; } iex&gt; CoreWeb.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex { :ok , &quot;10:00 – 10:03 in the morning&quot; } iex&gt; CoreWeb.Cldr.Time.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :flex { :ok , &quot;12:00 – 10:00 in the morning&quot; } iex&gt; CoreWeb.Cldr.Time.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :zone { :ok , &quot;12:00 – 10:00 AM Etc/UTC&quot; } iex&gt; CoreWeb.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex , locale : &quot;th&quot; { :ok , &quot;10:00 – 10:03 ในตอนเช้า&quot; }","ref":"CoreWeb.Cldr.Time.Interval.html#to_string/3","title":"CoreWeb.Cldr.Time.Interval.to_string/3","type":"function"},{"doc":"Returns a string representing the formatted interval formed by two times or raises an exception. Arguments from is any map that conforms to the Calendar.time type. to is any map that conforms to the Calendar.time type. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :time , :zone , and :flex . The default is :time . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.CoreWeb.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns string or raises an exception Notes For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configured locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single time is formatted instead of an interval Examples iex&gt; CoreWeb.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , format : :short &quot;10 – 10 AM&quot; iex&gt; CoreWeb.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , format : :medium &quot;10:00 – 10:03 AM&quot; iex&gt; CoreWeb.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , format : :long &quot;10:00 – 10:03 AM&quot; iex&gt; CoreWeb.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex &quot;10:00 – 10:03 in the morning&quot; iex&gt; CoreWeb.Cldr.Time.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :flex &quot;12:00 – 10:00 in the morning&quot; iex&gt; CoreWeb.Cldr.Time.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :zone &quot;12:00 – 10:00 AM Etc/UTC&quot; iex&gt; CoreWeb.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex , locale : &quot;th&quot; &quot;10:00 – 10:03 ในตอนเช้า&quot;","ref":"CoreWeb.Cldr.Time.Interval.html#to_string!/3","title":"CoreWeb.Cldr.Time.Interval.to_string!/3","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.Dashboard.html","title":"CoreWeb.Dashboard","type":"module"},{"doc":"","ref":"CoreWeb.Dashboard.html#current_user/1","title":"CoreWeb.Dashboard.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.Dashboard.html#handle_event/3","title":"CoreWeb.Dashboard.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_info/2 .","ref":"CoreWeb.Dashboard.html#handle_info/2","title":"CoreWeb.Dashboard.handle_info/2","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.Dashboard.html#mount/3","title":"CoreWeb.Dashboard.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.Dashboard.html#render/1","title":"CoreWeb.Dashboard.render/1","type":"function"},{"doc":"","ref":"CoreWeb.Dashboard.html#supported_languages/0","title":"CoreWeb.Dashboard.supported_languages/0","type":"function"},{"doc":"","ref":"CoreWeb.DataLoaderController.html","title":"CoreWeb.DataLoaderController","type":"module"},{"doc":"","ref":"CoreWeb.DataLoaderController.html#index/2","title":"CoreWeb.DataLoaderController.index/2","type":"function"},{"doc":"","ref":"CoreWeb.DataLoaderView.html","title":"CoreWeb.DataLoaderView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.DataLoaderView.html#__resource__/0","title":"CoreWeb.DataLoaderView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.DataLoaderView.html#current_user/1","title":"CoreWeb.DataLoaderView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.DataLoaderView.html#render/2","title":"CoreWeb.DataLoaderView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.DataLoaderView.html#supported_languages/0","title":"CoreWeb.DataLoaderView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.DataLoaderView.html#template_not_found/2","title":"CoreWeb.DataLoaderView.template_not_found/2","type":"function"},{"doc":"Properties devices :any, required: true label :string, required: true","ref":"CoreWeb.Devices.html","title":"CoreWeb.Devices","type":"module"},{"doc":"Callback implementation for Phoenix.LiveComponent.mount/1 .","ref":"CoreWeb.Devices.html#mount/1","title":"CoreWeb.Devices.mount/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveComponent.render/1 .","ref":"CoreWeb.Devices.html#render/1","title":"CoreWeb.Devices.render/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveComponent.update/2 .","ref":"CoreWeb.Devices.html#update/2","title":"CoreWeb.Devices.update/2","type":"function"},{"doc":"","ref":"CoreWeb.Endpoint.html","title":"CoreWeb.Endpoint","type":"module"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast/3 .","ref":"CoreWeb.Endpoint.html#broadcast/3","title":"CoreWeb.Endpoint.broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3 .","ref":"CoreWeb.Endpoint.html#broadcast!/3","title":"CoreWeb.Endpoint.broadcast!/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4 .","ref":"CoreWeb.Endpoint.html#broadcast_from/4","title":"CoreWeb.Endpoint.broadcast_from/4","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4 .","ref":"CoreWeb.Endpoint.html#broadcast_from!/4","title":"CoreWeb.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2 .","ref":"CoreWeb.Endpoint.html#call/2","title":"CoreWeb.Endpoint.call/2","type":"function"},{"doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"CoreWeb.Endpoint.html#child_spec/1","title":"CoreWeb.Endpoint.child_spec/1","type":"function"},{"doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"CoreWeb.Endpoint.html#config/2","title":"CoreWeb.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"CoreWeb.Endpoint.html#config_change/2","title":"CoreWeb.Endpoint.config_change/2","type":"function"},{"doc":"Returns the host for the given endpoint.","ref":"CoreWeb.Endpoint.html#host/0","title":"CoreWeb.Endpoint.host/0","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"CoreWeb.Endpoint.html#init/1","title":"CoreWeb.Endpoint.init/1","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3 .","ref":"CoreWeb.Endpoint.html#local_broadcast/3","title":"CoreWeb.Endpoint.local_broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4 .","ref":"CoreWeb.Endpoint.html#local_broadcast_from/4","title":"CoreWeb.Endpoint.local_broadcast_from/4","type":"function"},{"doc":"Generates the path information when routing to this endpoint.","ref":"CoreWeb.Endpoint.html#path/1","title":"CoreWeb.Endpoint.path/1","type":"function"},{"doc":"Generates the script name.","ref":"CoreWeb.Endpoint.html#script_name/0","title":"CoreWeb.Endpoint.script_name/0","type":"function"},{"doc":"Starts the endpoint supervision tree. Options :log_access_url - if the access url should be logged once the endpoint starts All other options are merged into the endpoint configuration.","ref":"CoreWeb.Endpoint.html#start_link/1","title":"CoreWeb.Endpoint.start_link/1","type":"function"},{"doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static . Meant to be used for Subresource Integrity with CDNs.","ref":"CoreWeb.Endpoint.html#static_integrity/1","title":"CoreWeb.Endpoint.static_integrity/1","type":"function"},{"doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity .","ref":"CoreWeb.Endpoint.html#static_lookup/1","title":"CoreWeb.Endpoint.static_lookup/1","type":"function"},{"doc":"Generates a route to a static file in priv/static .","ref":"CoreWeb.Endpoint.html#static_path/1","title":"CoreWeb.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"CoreWeb.Endpoint.html#static_url/0","title":"CoreWeb.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"CoreWeb.Endpoint.html#struct_url/0","title":"CoreWeb.Endpoint.struct_url/0","type":"function"},{"doc":"","ref":"CoreWeb.Endpoint.html#subscribe/2","title":"CoreWeb.Endpoint.subscribe/2","type":"function"},{"doc":"","ref":"CoreWeb.Endpoint.html#unsubscribe/1","title":"CoreWeb.Endpoint.unsubscribe/1","type":"function"},{"doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"CoreWeb.Endpoint.html#url/0","title":"CoreWeb.Endpoint.url/0","type":"function"},{"doc":"","ref":"CoreWeb.ErrorView.html","title":"CoreWeb.ErrorView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.ErrorView.html#__resource__/0","title":"CoreWeb.ErrorView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.ErrorView.html#current_user/1","title":"CoreWeb.ErrorView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.ErrorView.html#render/2","title":"CoreWeb.ErrorView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.ErrorView.html#supported_languages/0","title":"CoreWeb.ErrorView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.ErrorView.html#template_not_found/2","title":"CoreWeb.ErrorView.template_not_found/2","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.FakeSurvey.html","title":"CoreWeb.FakeSurvey","type":"module"},{"doc":"","ref":"CoreWeb.FakeSurvey.html#current_user/1","title":"CoreWeb.FakeSurvey.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.FakeSurvey.html#mount/3","title":"CoreWeb.FakeSurvey.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.FakeSurvey.html#render/1","title":"CoreWeb.FakeSurvey.render/1","type":"function"},{"doc":"","ref":"CoreWeb.FakeSurvey.html#supported_languages/0","title":"CoreWeb.FakeSurvey.supported_languages/0","type":"function"},{"doc":"","ref":"CoreWeb.FakeSurveyController.html","title":"CoreWeb.FakeSurveyController","type":"module"},{"doc":"","ref":"CoreWeb.FakeSurveyController.html#index/2","title":"CoreWeb.FakeSurveyController.index/2","type":"function"},{"doc":"","ref":"CoreWeb.FakeSurveyView.html","title":"CoreWeb.FakeSurveyView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.FakeSurveyView.html#__resource__/0","title":"CoreWeb.FakeSurveyView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.FakeSurveyView.html#current_user/1","title":"CoreWeb.FakeSurveyView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.FakeSurveyView.html#render/2","title":"CoreWeb.FakeSurveyView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.FakeSurveyView.html#supported_languages/0","title":"CoreWeb.FakeSurveyView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.FakeSurveyView.html#template_not_found/2","title":"CoreWeb.FakeSurveyView.template_not_found/2","type":"function"},{"doc":"Translates controller action results into valid Plug.Conn responses. See Phoenix.Controller.action_fallback/1 for more details.","ref":"CoreWeb.FallbackController.html","title":"CoreWeb.FallbackController","type":"module"},{"doc":"","ref":"CoreWeb.FileUploader.html","title":"CoreWeb.FileUploader","type":"behaviour"},{"doc":"","ref":"CoreWeb.FileUploader.html#c:save_file/2","title":"CoreWeb.FileUploader.save_file/2","type":"callback"},{"doc":"A module providing Internationalization with a gettext-based API. By using Gettext , your module gains a set of macros for translations, for example: import CoreWeb.Gettext # Simple translation gettext ( &quot;Here is the string to translate&quot; ) # Plural translation ngettext ( &quot;Here is the string to translate&quot; , &quot;Here are the strings to translate&quot; , 3 ) # Domain-based translation dgettext ( &quot;errors&quot; , &quot;Here is the error message to translate&quot; ) See the Gettext Docs for detailed usage.","ref":"CoreWeb.Gettext.html","title":"CoreWeb.Gettext","type":"module"},{"doc":"Callback implementation for Gettext.Backend.dgettext/3 .","ref":"CoreWeb.Gettext.html#dgettext/3","title":"CoreWeb.Gettext.dgettext/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dgettext_noop/2 .","ref":"CoreWeb.Gettext.html#dgettext_noop/2","title":"CoreWeb.Gettext.dgettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext/5 .","ref":"CoreWeb.Gettext.html#dngettext/5","title":"CoreWeb.Gettext.dngettext/5","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext_noop/3 .","ref":"CoreWeb.Gettext.html#dngettext_noop/3","title":"CoreWeb.Gettext.dngettext_noop/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dpgettext/4 .","ref":"CoreWeb.Gettext.html#dpgettext/4","title":"CoreWeb.Gettext.dpgettext/4","type":"macro"},{"doc":"","ref":"CoreWeb.Gettext.html#dpgettext_noop/3","title":"CoreWeb.Gettext.dpgettext_noop/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dpngettext/6 .","ref":"CoreWeb.Gettext.html#dpngettext/6","title":"CoreWeb.Gettext.dpngettext/6","type":"macro"},{"doc":"","ref":"CoreWeb.Gettext.html#dpngettext_noop/4","title":"CoreWeb.Gettext.dpngettext_noop/4","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext/2 .","ref":"CoreWeb.Gettext.html#gettext/2","title":"CoreWeb.Gettext.gettext/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext_comment/1 .","ref":"CoreWeb.Gettext.html#gettext_comment/1","title":"CoreWeb.Gettext.gettext_comment/1","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext_noop/1 .","ref":"CoreWeb.Gettext.html#gettext_noop/1","title":"CoreWeb.Gettext.gettext_noop/1","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_bindings/2 .","ref":"CoreWeb.Gettext.html#handle_missing_bindings/2","title":"CoreWeb.Gettext.handle_missing_bindings/2","type":"function"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_plural_translation/6 .","ref":"CoreWeb.Gettext.html#handle_missing_plural_translation/6","title":"CoreWeb.Gettext.handle_missing_plural_translation/6","type":"function"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_translation/4 .","ref":"CoreWeb.Gettext.html#handle_missing_translation/4","title":"CoreWeb.Gettext.handle_missing_translation/4","type":"function"},{"doc":"","ref":"CoreWeb.Gettext.html#lgettext/5","title":"CoreWeb.Gettext.lgettext/5","type":"function"},{"doc":"","ref":"CoreWeb.Gettext.html#lngettext/7","title":"CoreWeb.Gettext.lngettext/7","type":"function"},{"doc":"Callback implementation for Gettext.Backend.ngettext/4 .","ref":"CoreWeb.Gettext.html#ngettext/4","title":"CoreWeb.Gettext.ngettext/4","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.ngettext_noop/2 .","ref":"CoreWeb.Gettext.html#ngettext_noop/2","title":"CoreWeb.Gettext.ngettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.pgettext/3 .","ref":"CoreWeb.Gettext.html#pgettext/3","title":"CoreWeb.Gettext.pgettext/3","type":"macro"},{"doc":"","ref":"CoreWeb.Gettext.html#pgettext_noop/2","title":"CoreWeb.Gettext.pgettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.pngettext/5 .","ref":"CoreWeb.Gettext.html#pngettext/5","title":"CoreWeb.Gettext.pngettext/5","type":"macro"},{"doc":"","ref":"CoreWeb.Gettext.html#pngettext_noop/3","title":"CoreWeb.Gettext.pngettext_noop/3","type":"macro"},{"doc":"Properties id :string, required: true - The id of the live component (required by LiveView for stateful components). . conn :any, required: true static_path :any, required: true image_catalog :any, required: true initial_query :string, default: &quot;&quot;","ref":"CoreWeb.ImageCatalogPicker.html","title":"CoreWeb.ImageCatalogPicker","type":"module"},{"doc":"Callback implementation for Phoenix.LiveComponent.handle_event/3 .","ref":"CoreWeb.ImageCatalogPicker.html#handle_event/3","title":"CoreWeb.ImageCatalogPicker.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveComponent.mount/1 .","ref":"CoreWeb.ImageCatalogPicker.html#mount/1","title":"CoreWeb.ImageCatalogPicker.mount/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveComponent.render/1 .","ref":"CoreWeb.ImageCatalogPicker.html#render/1","title":"CoreWeb.ImageCatalogPicker.render/1","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.Index.html","title":"CoreWeb.Index","type":"module"},{"doc":"","ref":"CoreWeb.Index.html#cta_title/1","title":"CoreWeb.Index.cta_title/1","type":"function"},{"doc":"","ref":"CoreWeb.Index.html#current_user/1","title":"CoreWeb.Index.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.Index.html#mount/3","title":"CoreWeb.Index.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.Index.html#render/1","title":"CoreWeb.Index.render/1","type":"function"},{"doc":"","ref":"CoreWeb.Index.html#supported_languages/0","title":"CoreWeb.Index.supported_languages/0","type":"function"},{"doc":"","ref":"CoreWeb.LanguageSwitchController.html","title":"CoreWeb.LanguageSwitchController","type":"module"},{"doc":"","ref":"CoreWeb.LanguageSwitchController.html#index/2","title":"CoreWeb.LanguageSwitchController.index/2","type":"function"},{"doc":"","ref":"CoreWeb.LayoutView.html","title":"CoreWeb.LayoutView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.LayoutView.html#__resource__/0","title":"CoreWeb.LayoutView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.LayoutView.html#current_user/1","title":"CoreWeb.LayoutView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.LayoutView.html#render/2","title":"CoreWeb.LayoutView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.LayoutView.html#supported_languages/0","title":"CoreWeb.LayoutView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.LayoutView.html#template_not_found/2","title":"CoreWeb.LayoutView.template_not_found/2","type":"function"},{"doc":"","ref":"CoreWeb.Live.DataUploader.Routes.html","title":"CoreWeb.Live.DataUploader.Routes","type":"module"},{"doc":"","ref":"CoreWeb.Live.DataUploader.Routes.html#routes/0","title":"CoreWeb.Live.DataUploader.Routes.routes/0","type":"macro"},{"doc":"","ref":"CoreWeb.Live.Routes.html","title":"CoreWeb.Live.Routes","type":"module"},{"doc":"","ref":"CoreWeb.Live.Routes.html#routes/0","title":"CoreWeb.Live.Routes.routes/0","type":"macro"},{"doc":"","ref":"CoreWeb.Live.Study.Routes.html","title":"CoreWeb.Live.Study.Routes","type":"module"},{"doc":"","ref":"CoreWeb.Live.Study.Routes.html#routes/0","title":"CoreWeb.Live.Study.Routes.routes/0","type":"macro"},{"doc":"","ref":"CoreWeb.Live.SurveyTool.Routes.html","title":"CoreWeb.Live.SurveyTool.Routes","type":"module"},{"doc":"","ref":"CoreWeb.Live.SurveyTool.Routes.html#routes/0","title":"CoreWeb.Live.SurveyTool.Routes.routes/0","type":"macro"},{"doc":"","ref":"CoreWeb.Live.User.Routes.html","title":"CoreWeb.Live.User.Routes","type":"module"},{"doc":"","ref":"CoreWeb.Live.User.Routes.html#routes/0","title":"CoreWeb.Live.User.Routes.routes/0","type":"macro"},{"doc":"Automatically setup the current user in LiveViews.","ref":"CoreWeb.LiveAssignHelper.html","title":"CoreWeb.LiveAssignHelper","type":"module"},{"doc":"A LiveView helper that automatically sets the current locale from a session variable.","ref":"CoreWeb.LiveLocale.html","title":"CoreWeb.LiveLocale","type":"module"},{"doc":"The loaders for the Link application. They integrate with the GreenLight framework.","ref":"CoreWeb.Loaders.html","title":"CoreWeb.Loaders","type":"module"},{"doc":"","ref":"CoreWeb.Loaders.html#study!/3","title":"CoreWeb.Loaders.study!/3","type":"function"},{"doc":"","ref":"CoreWeb.Loaders.html#survey_tool!/3","title":"CoreWeb.Loaders.survey_tool!/3","type":"function"},{"doc":"","ref":"CoreWeb.Loaders.html#task_loader!/3","title":"CoreWeb.Loaders.task_loader!/3","type":"function"},{"doc":"","ref":"CoreWeb.Loaders.html#user_profile!/3","title":"CoreWeb.Loaders.user_profile!/3","type":"function"},{"doc":"","ref":"CoreWeb.LocalImageCatalogPlug.html","title":"CoreWeb.LocalImageCatalogPlug","type":"module"},{"doc":"Callback implementation for Plug.call/2 .","ref":"CoreWeb.LocalImageCatalogPlug.html#call/2","title":"CoreWeb.LocalImageCatalogPlug.call/2","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"CoreWeb.LocalImageCatalogPlug.html#init/1","title":"CoreWeb.LocalImageCatalogPlug.init/1","type":"function"},{"doc":"","ref":"CoreWeb.LocalImageCatalogPlug.html#not_found/2","title":"CoreWeb.LocalImageCatalogPlug.not_found/2","type":"function"},{"doc":"","ref":"CoreWeb.LocalImageCatalogPlug.html#routes/0","title":"CoreWeb.LocalImageCatalogPlug.routes/0","type":"macro"},{"doc":"Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.Notifications.html","title":"CoreWeb.Notifications","type":"module"},{"doc":"","ref":"CoreWeb.Notifications.html#current_user/1","title":"CoreWeb.Notifications.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.Notifications.html#mount/3","title":"CoreWeb.Notifications.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.Notifications.html#render/1","title":"CoreWeb.Notifications.render/1","type":"function"},{"doc":"","ref":"CoreWeb.Notifications.html#supported_languages/0","title":"CoreWeb.Notifications.supported_languages/0","type":"function"},{"doc":"","ref":"CoreWeb.ParticipantView.html","title":"CoreWeb.ParticipantView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.ParticipantView.html#__resource__/0","title":"CoreWeb.ParticipantView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.ParticipantView.html#current_user/1","title":"CoreWeb.ParticipantView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.ParticipantView.html#render/2","title":"CoreWeb.ParticipantView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.ParticipantView.html#supported_languages/0","title":"CoreWeb.ParticipantView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.ParticipantView.html#template_not_found/2","title":"CoreWeb.ParticipantView.template_not_found/2","type":"function"},{"doc":"A Plug that sets a session variable to the current locale.","ref":"CoreWeb.Plug.LiveLocale.html","title":"CoreWeb.Plug.LiveLocale","type":"module"},{"doc":"","ref":"CoreWeb.Plug.LiveLocale.html#call/2","title":"CoreWeb.Plug.LiveLocale.call/2","type":"function"},{"doc":"","ref":"CoreWeb.Plug.LiveLocale.html#init/1","title":"CoreWeb.Plug.LiveLocale.init/1","type":"function"},{"doc":"","ref":"CoreWeb.PushSubscriptionController.html","title":"CoreWeb.PushSubscriptionController","type":"module"},{"doc":"","ref":"CoreWeb.PushSubscriptionController.html#register/2","title":"CoreWeb.PushSubscriptionController.register/2","type":"function"},{"doc":"","ref":"CoreWeb.PushSubscriptionController.html#vapid_public_key/2","title":"CoreWeb.PushSubscriptionController.vapid_public_key/2","type":"function"},{"doc":"","ref":"CoreWeb.PushSubscriptionView.html","title":"CoreWeb.PushSubscriptionView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.PushSubscriptionView.html#__resource__/0","title":"CoreWeb.PushSubscriptionView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.PushSubscriptionView.html#current_user/1","title":"CoreWeb.PushSubscriptionView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.PushSubscriptionView.html#render/2","title":"CoreWeb.PushSubscriptionView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.PushSubscriptionView.html#supported_languages/0","title":"CoreWeb.PushSubscriptionView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.PushSubscriptionView.html#template_not_found/2","title":"CoreWeb.PushSubscriptionView.template_not_found/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.html","title":"CoreWeb.Router","type":"module"},{"doc":"","ref":"CoreWeb.Router.html#api/2","title":"CoreWeb.Router.api/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.html#browser/2","title":"CoreWeb.Router.browser/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.html#browser_base/2","title":"CoreWeb.Router.browser_base/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.html#browser_secure/2","title":"CoreWeb.Router.browser_secure/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.html#browser_unprotected/2","title":"CoreWeb.Router.browser_unprotected/2","type":"function"},{"doc":"Callback invoked by Plug on every request.","ref":"CoreWeb.Router.html#call/2","title":"CoreWeb.Router.call/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.html#google_sign_in_browser/2","title":"CoreWeb.Router.google_sign_in_browser/2","type":"function"},{"doc":"Callback required by Plug that initializes the router for serving web requests.","ref":"CoreWeb.Router.html#init/1","title":"CoreWeb.Router.init/1","type":"function"},{"doc":"","ref":"CoreWeb.Router.html#local_image_catalog/2","title":"CoreWeb.Router.local_image_catalog/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.html#sign_in_with_apple_browser/2","title":"CoreWeb.Router.sign_in_with_apple_browser/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.html#surfconext_browser/2","title":"CoreWeb.Router.surfconext_browser/2","type":"function"},{"doc":"Module with named helpers generated from CoreWeb.Router.","ref":"CoreWeb.Router.Helpers.html","title":"CoreWeb.Router.Helpers","type":"module"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#apns_device_token_path/2","title":"CoreWeb.Router.Helpers.apns_device_token_path/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#apns_device_token_path/3","title":"CoreWeb.Router.Helpers.apns_device_token_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#apns_device_token_url/2","title":"CoreWeb.Router.Helpers.apns_device_token_url/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#apns_device_token_url/3","title":"CoreWeb.Router.Helpers.apns_device_token_url/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#authorize_plug_path/2","title":"CoreWeb.Router.Helpers.authorize_plug_path/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#authorize_plug_path/3","title":"CoreWeb.Router.Helpers.authorize_plug_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#authorize_plug_url/2","title":"CoreWeb.Router.Helpers.authorize_plug_url/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#authorize_plug_url/3","title":"CoreWeb.Router.Helpers.authorize_plug_url/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#callback_plug_path/2","title":"CoreWeb.Router.Helpers.callback_plug_path/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#callback_plug_path/3","title":"CoreWeb.Router.Helpers.callback_plug_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#callback_plug_url/2","title":"CoreWeb.Router.Helpers.callback_plug_url/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#callback_plug_url/3","title":"CoreWeb.Router.Helpers.callback_plug_url/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#data_loader_path/3","title":"CoreWeb.Router.Helpers.data_loader_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#data_loader_path/4","title":"CoreWeb.Router.Helpers.data_loader_path/4","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#data_loader_url/3","title":"CoreWeb.Router.Helpers.data_loader_url/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#data_loader_url/4","title":"CoreWeb.Router.Helpers.data_loader_url/4","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#language_switch_path/3","title":"CoreWeb.Router.Helpers.language_switch_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#language_switch_path/4","title":"CoreWeb.Router.Helpers.language_switch_path/4","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#language_switch_url/3","title":"CoreWeb.Router.Helpers.language_switch_url/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#language_switch_url/4","title":"CoreWeb.Router.Helpers.language_switch_url/4","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_dashboard_path/2","title":"CoreWeb.Router.Helpers.live_dashboard_path/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_dashboard_path/3","title":"CoreWeb.Router.Helpers.live_dashboard_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_dashboard_path/4","title":"CoreWeb.Router.Helpers.live_dashboard_path/4","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_dashboard_path/5","title":"CoreWeb.Router.Helpers.live_dashboard_path/5","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_dashboard_url/2","title":"CoreWeb.Router.Helpers.live_dashboard_url/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_dashboard_url/3","title":"CoreWeb.Router.Helpers.live_dashboard_url/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_dashboard_url/4","title":"CoreWeb.Router.Helpers.live_dashboard_url/4","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_dashboard_url/5","title":"CoreWeb.Router.Helpers.live_dashboard_url/5","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_path/2","title":"CoreWeb.Router.Helpers.live_path/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_path/3","title":"CoreWeb.Router.Helpers.live_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_path/4","title":"CoreWeb.Router.Helpers.live_path/4","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_url/2","title":"CoreWeb.Router.Helpers.live_url/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_url/3","title":"CoreWeb.Router.Helpers.live_url/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#live_url/4","title":"CoreWeb.Router.Helpers.live_url/4","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#local_image_catalog_plug_path/3","title":"CoreWeb.Router.Helpers.local_image_catalog_plug_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#local_image_catalog_plug_path/4","title":"CoreWeb.Router.Helpers.local_image_catalog_plug_path/4","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#local_image_catalog_plug_url/3","title":"CoreWeb.Router.Helpers.local_image_catalog_plug_url/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#local_image_catalog_plug_url/4","title":"CoreWeb.Router.Helpers.local_image_catalog_plug_url/4","type":"function"},{"doc":"Generates the path information including any necessary prefix.","ref":"CoreWeb.Router.Helpers.html#path/2","title":"CoreWeb.Router.Helpers.path/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#push_subscription_path/2","title":"CoreWeb.Router.Helpers.push_subscription_path/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#push_subscription_path/3","title":"CoreWeb.Router.Helpers.push_subscription_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#push_subscription_url/2","title":"CoreWeb.Router.Helpers.push_subscription_url/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#push_subscription_url/3","title":"CoreWeb.Router.Helpers.push_subscription_url/3","type":"function"},{"doc":"Generates an integrity hash to a static asset given its file path.","ref":"CoreWeb.Router.Helpers.html#static_integrity/2","title":"CoreWeb.Router.Helpers.static_integrity/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"CoreWeb.Router.Helpers.html#static_path/2","title":"CoreWeb.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"CoreWeb.Router.Helpers.html#static_url/2","title":"CoreWeb.Router.Helpers.static_url/2","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"CoreWeb.Router.Helpers.html#url/1","title":"CoreWeb.Router.Helpers.url/1","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#user_session_path/2","title":"CoreWeb.Router.Helpers.user_session_path/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#user_session_path/3","title":"CoreWeb.Router.Helpers.user_session_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#user_session_url/2","title":"CoreWeb.Router.Helpers.user_session_url/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#user_session_url/3","title":"CoreWeb.Router.Helpers.user_session_url/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#user_settings_path/2","title":"CoreWeb.Router.Helpers.user_settings_path/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#user_settings_path/3","title":"CoreWeb.Router.Helpers.user_settings_path/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#user_settings_path/4","title":"CoreWeb.Router.Helpers.user_settings_path/4","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#user_settings_url/2","title":"CoreWeb.Router.Helpers.user_settings_url/2","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#user_settings_url/3","title":"CoreWeb.Router.Helpers.user_settings_url/3","type":"function"},{"doc":"","ref":"CoreWeb.Router.Helpers.html#user_settings_url/4","title":"CoreWeb.Router.Helpers.user_settings_url/4","type":"function"},{"doc":"","ref":"CoreWeb.Routes.html","title":"CoreWeb.Routes","type":"module"},{"doc":"","ref":"CoreWeb.Routes.html#routes/0","title":"CoreWeb.Routes.routes/0","type":"macro"},{"doc":"The public study screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.Study.Complete.html","title":"CoreWeb.Study.Complete","type":"module"},{"doc":"","ref":"CoreWeb.Study.Complete.html#current_user/1","title":"CoreWeb.Study.Complete.current_user/1","type":"function"},{"doc":"","ref":"CoreWeb.Study.Complete.html#load_survey_tool/1","title":"CoreWeb.Study.Complete.load_survey_tool/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.Study.Complete.html#mount/3","title":"CoreWeb.Study.Complete.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.Study.Complete.html#render/1","title":"CoreWeb.Study.Complete.render/1","type":"function"},{"doc":"","ref":"CoreWeb.Study.Complete.html#supported_languages/0","title":"CoreWeb.Study.Complete.supported_languages/0","type":"function"},{"doc":"The study page for owners. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.Study.Edit.html","title":"CoreWeb.Study.Edit","type":"module"},{"doc":"","ref":"CoreWeb.Study.Edit.html#consume_file/2","title":"CoreWeb.Study.Edit.consume_file/2","type":"function"},{"doc":"","ref":"CoreWeb.Study.Edit.html#current_user/1","title":"CoreWeb.Study.Edit.current_user/1","type":"function"},{"doc":"","ref":"CoreWeb.Study.Edit.html#ext/1","title":"CoreWeb.Study.Edit.ext/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.Study.Edit.html#handle_event/3","title":"CoreWeb.Study.Edit.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_info/2 .","ref":"CoreWeb.Study.Edit.html#handle_info/2","title":"CoreWeb.Study.Edit.handle_info/2","type":"function"},{"doc":"","ref":"CoreWeb.Study.Edit.html#handle_progress/3","title":"CoreWeb.Study.Edit.handle_progress/3","type":"function"},{"doc":"","ref":"CoreWeb.Study.Edit.html#handle_success/2","title":"CoreWeb.Study.Edit.handle_success/2","type":"function"},{"doc":"","ref":"CoreWeb.Study.Edit.html#handle_validation_error/2","title":"CoreWeb.Study.Edit.handle_validation_error/2","type":"function"},{"doc":"","ref":"CoreWeb.Study.Edit.html#init_file_uploader/2","title":"CoreWeb.Study.Edit.init_file_uploader/2","type":"function"},{"doc":"","ref":"CoreWeb.Study.Edit.html#load_survey_tool/1","title":"CoreWeb.Study.Edit.load_survey_tool/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.Study.Edit.html#mount/3","title":"CoreWeb.Study.Edit.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.Study.Edit.html#render/1","title":"CoreWeb.Study.Edit.render/1","type":"function"},{"doc":"","ref":"CoreWeb.Study.Edit.html#supported_languages/0","title":"CoreWeb.Study.Edit.supported_languages/0","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.terminate/2 .","ref":"CoreWeb.Study.Edit.html#terminate/2","title":"CoreWeb.Study.Edit.terminate/2","type":"function"},{"doc":"","ref":"CoreWeb.Study.Edit.html#update_changeset/2","title":"CoreWeb.Study.Edit.update_changeset/2","type":"function"},{"doc":"The public study screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.Study.Public.html","title":"CoreWeb.Study.Public","type":"module"},{"doc":"","ref":"CoreWeb.Study.Public.html#current_user/1","title":"CoreWeb.Study.Public.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.Study.Public.html#handle_event/3","title":"CoreWeb.Study.Public.handle_event/3","type":"function"},{"doc":"","ref":"CoreWeb.Study.Public.html#load_survey_tool/1","title":"CoreWeb.Study.Public.load_survey_tool/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.Study.Public.html#mount/3","title":"CoreWeb.Study.Public.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.Study.Public.html#render/1","title":"CoreWeb.Study.Public.render/1","type":"function"},{"doc":"","ref":"CoreWeb.Study.Public.html#supported_languages/0","title":"CoreWeb.Study.Public.supported_languages/0","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.SurveyTool.Edit.html","title":"CoreWeb.SurveyTool.Edit","type":"module"},{"doc":"","ref":"CoreWeb.SurveyTool.Edit.html#current_user/1","title":"CoreWeb.SurveyTool.Edit.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.SurveyTool.Edit.html#handle_event/3","title":"CoreWeb.SurveyTool.Edit.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_info/2 .","ref":"CoreWeb.SurveyTool.Edit.html#handle_info/2","title":"CoreWeb.SurveyTool.Edit.handle_info/2","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.SurveyTool.Edit.html#mount/3","title":"CoreWeb.SurveyTool.Edit.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.SurveyTool.Edit.html#render/1","title":"CoreWeb.SurveyTool.Edit.render/1","type":"function"},{"doc":"","ref":"CoreWeb.SurveyTool.Edit.html#supported_languages/0","title":"CoreWeb.SurveyTool.Edit.supported_languages/0","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.terminate/2 .","ref":"CoreWeb.SurveyTool.Edit.html#terminate/2","title":"CoreWeb.SurveyTool.Edit.terminate/2","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.SurveyTool.Index.html","title":"CoreWeb.SurveyTool.Index","type":"module"},{"doc":"","ref":"CoreWeb.SurveyTool.Index.html#current_user/1","title":"CoreWeb.SurveyTool.Index.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.SurveyTool.Index.html#handle_event/3","title":"CoreWeb.SurveyTool.Index.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.SurveyTool.Index.html#mount/3","title":"CoreWeb.SurveyTool.Index.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.SurveyTool.Index.html#render/1","title":"CoreWeb.SurveyTool.Index.render/1","type":"function"},{"doc":"","ref":"CoreWeb.SurveyTool.Index.html#supported_languages/0","title":"CoreWeb.SurveyTool.Index.supported_languages/0","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.SurveyTool.New.html","title":"CoreWeb.SurveyTool.New","type":"module"},{"doc":"","ref":"CoreWeb.SurveyTool.New.html#current_user/1","title":"CoreWeb.SurveyTool.New.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.SurveyTool.New.html#render/1","title":"CoreWeb.SurveyTool.New.render/1","type":"function"},{"doc":"","ref":"CoreWeb.SurveyTool.New.html#supported_languages/0","title":"CoreWeb.SurveyTool.New.supported_languages/0","type":"function"},{"doc":"","ref":"CoreWeb.SurveyToolTaskView.html","title":"CoreWeb.SurveyToolTaskView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.SurveyToolTaskView.html#__resource__/0","title":"CoreWeb.SurveyToolTaskView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.SurveyToolTaskView.html#current_user/1","title":"CoreWeb.SurveyToolTaskView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.SurveyToolTaskView.html#render/2","title":"CoreWeb.SurveyToolTaskView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.SurveyToolTaskView.html#supported_languages/0","title":"CoreWeb.SurveyToolTaskView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.SurveyToolTaskView.html#template_not_found/2","title":"CoreWeb.SurveyToolTaskView.template_not_found/2","type":"function"},{"doc":"","ref":"CoreWeb.SurveyToolView.html","title":"CoreWeb.SurveyToolView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.SurveyToolView.html#__resource__/0","title":"CoreWeb.SurveyToolView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.SurveyToolView.html#current_user/1","title":"CoreWeb.SurveyToolView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.SurveyToolView.html#render/2","title":"CoreWeb.SurveyToolView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.SurveyToolView.html#supported_languages/0","title":"CoreWeb.SurveyToolView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.SurveyToolView.html#template_not_found/2","title":"CoreWeb.SurveyToolView.template_not_found/2","type":"function"},{"doc":"The Telemtry configuration for the Link application.","ref":"CoreWeb.Telemetry.html","title":"CoreWeb.Telemetry","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"CoreWeb.Telemetry.html#child_spec/1","title":"CoreWeb.Telemetry.child_spec/1","type":"function"},{"doc":"","ref":"CoreWeb.Telemetry.html#metrics/0","title":"CoreWeb.Telemetry.metrics/0","type":"function"},{"doc":"","ref":"CoreWeb.Telemetry.html#start_link/1","title":"CoreWeb.Telemetry.start_link/1","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.User.AwaitConfirmation.html","title":"CoreWeb.User.AwaitConfirmation","type":"module"},{"doc":"","ref":"CoreWeb.User.AwaitConfirmation.html#current_user/1","title":"CoreWeb.User.AwaitConfirmation.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.User.AwaitConfirmation.html#handle_event/3","title":"CoreWeb.User.AwaitConfirmation.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.User.AwaitConfirmation.html#mount/3","title":"CoreWeb.User.AwaitConfirmation.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.User.AwaitConfirmation.html#render/1","title":"CoreWeb.User.AwaitConfirmation.render/1","type":"function"},{"doc":"","ref":"CoreWeb.User.AwaitConfirmation.html#supported_languages/0","title":"CoreWeb.User.AwaitConfirmation.supported_languages/0","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.User.ConfirmToken.html","title":"CoreWeb.User.ConfirmToken","type":"module"},{"doc":"","ref":"CoreWeb.User.ConfirmToken.html#current_user/1","title":"CoreWeb.User.ConfirmToken.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.User.ConfirmToken.html#handle_event/3","title":"CoreWeb.User.ConfirmToken.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.User.ConfirmToken.html#mount/3","title":"CoreWeb.User.ConfirmToken.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.User.ConfirmToken.html#render/1","title":"CoreWeb.User.ConfirmToken.render/1","type":"function"},{"doc":"","ref":"CoreWeb.User.ConfirmToken.html#supported_languages/0","title":"CoreWeb.User.ConfirmToken.supported_languages/0","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.User.Profile.html","title":"CoreWeb.User.Profile","type":"module"},{"doc":"","ref":"CoreWeb.User.Profile.html#consume_file/2","title":"CoreWeb.User.Profile.consume_file/2","type":"function"},{"doc":"","ref":"CoreWeb.User.Profile.html#current_user/1","title":"CoreWeb.User.Profile.current_user/1","type":"function"},{"doc":"","ref":"CoreWeb.User.Profile.html#ext/1","title":"CoreWeb.User.Profile.ext/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.User.Profile.html#handle_event/3","title":"CoreWeb.User.Profile.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_info/2 .","ref":"CoreWeb.User.Profile.html#handle_info/2","title":"CoreWeb.User.Profile.handle_info/2","type":"function"},{"doc":"","ref":"CoreWeb.User.Profile.html#handle_progress/3","title":"CoreWeb.User.Profile.handle_progress/3","type":"function"},{"doc":"","ref":"CoreWeb.User.Profile.html#init_file_uploader/2","title":"CoreWeb.User.Profile.init_file_uploader/2","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.User.Profile.html#mount/3","title":"CoreWeb.User.Profile.mount/3","type":"function"},{"doc":"","ref":"CoreWeb.User.Profile.html#supported_languages/0","title":"CoreWeb.User.Profile.supported_languages/0","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.terminate/2 .","ref":"CoreWeb.User.Profile.html#terminate/2","title":"CoreWeb.User.Profile.terminate/2","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.User.ResetPassword.html","title":"CoreWeb.User.ResetPassword","type":"module"},{"doc":"","ref":"CoreWeb.User.ResetPassword.html#current_user/1","title":"CoreWeb.User.ResetPassword.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.User.ResetPassword.html#handle_event/3","title":"CoreWeb.User.ResetPassword.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.User.ResetPassword.html#mount/3","title":"CoreWeb.User.ResetPassword.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.User.ResetPassword.html#render/1","title":"CoreWeb.User.ResetPassword.render/1","type":"function"},{"doc":"","ref":"CoreWeb.User.ResetPassword.html#supported_languages/0","title":"CoreWeb.User.ResetPassword.supported_languages/0","type":"function"},{"doc":"The password reset token. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.User.ResetPasswordToken.html","title":"CoreWeb.User.ResetPasswordToken","type":"module"},{"doc":"","ref":"CoreWeb.User.ResetPasswordToken.html#current_user/1","title":"CoreWeb.User.ResetPasswordToken.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.User.ResetPasswordToken.html#handle_event/3","title":"CoreWeb.User.ResetPasswordToken.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.User.ResetPasswordToken.html#mount/3","title":"CoreWeb.User.ResetPasswordToken.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.User.ResetPasswordToken.html#render/1","title":"CoreWeb.User.ResetPasswordToken.render/1","type":"function"},{"doc":"","ref":"CoreWeb.User.ResetPasswordToken.html#supported_languages/0","title":"CoreWeb.User.ResetPasswordToken.supported_languages/0","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"CoreWeb.User.Signup.html","title":"CoreWeb.User.Signup","type":"module"},{"doc":"","ref":"CoreWeb.User.Signup.html#current_user/1","title":"CoreWeb.User.Signup.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"CoreWeb.User.Signup.html#handle_event/3","title":"CoreWeb.User.Signup.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"CoreWeb.User.Signup.html#mount/3","title":"CoreWeb.User.Signup.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"CoreWeb.User.Signup.html#render/1","title":"CoreWeb.User.Signup.render/1","type":"function"},{"doc":"","ref":"CoreWeb.User.Signup.html#supported_languages/0","title":"CoreWeb.User.Signup.supported_languages/0","type":"function"},{"doc":"","ref":"CoreWeb.UserAuth.html","title":"CoreWeb.UserAuth","type":"module"},{"doc":"Authenticates the user by looking into the session and remember me token.","ref":"CoreWeb.UserAuth.html#fetch_current_user/2","title":"CoreWeb.UserAuth.fetch_current_user/2","type":"function"},{"doc":"Logs the user in. It renews the session ID and clears the whole session to avoid fixation attacks. See the renew_session function to customize this behaviour. It also sets a :live_socket_id key in the session, so LiveView sessions are identified and automatically disconnected on log out. The line can be safely removed if you are not using LiveView.","ref":"CoreWeb.UserAuth.html#log_in_user/3","title":"CoreWeb.UserAuth.log_in_user/3","type":"function"},{"doc":"Logs the user out. It clears all session data for safety. See renew_session.","ref":"CoreWeb.UserAuth.html#log_out_user/1","title":"CoreWeb.UserAuth.log_out_user/1","type":"function"},{"doc":"Used for routes that require the user to not be authenticated.","ref":"CoreWeb.UserAuth.html#redirect_if_user_is_authenticated/2","title":"CoreWeb.UserAuth.redirect_if_user_is_authenticated/2","type":"function"},{"doc":"Used for routes that require the user to be authenticated. If you want to enforce the user email is confirmed before they use the application at all, here would be a good place.","ref":"CoreWeb.UserAuth.html#require_authenticated_user/2","title":"CoreWeb.UserAuth.require_authenticated_user/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSessionController.html","title":"CoreWeb.UserSessionController","type":"module"},{"doc":"","ref":"CoreWeb.UserSessionController.html#create/2","title":"CoreWeb.UserSessionController.create/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSessionController.html#delete/2","title":"CoreWeb.UserSessionController.delete/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSessionController.html#new/2","title":"CoreWeb.UserSessionController.new/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSessionView.html","title":"CoreWeb.UserSessionView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.UserSessionView.html#__resource__/0","title":"CoreWeb.UserSessionView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.UserSessionView.html#current_user/1","title":"CoreWeb.UserSessionView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.UserSessionView.html#render/2","title":"CoreWeb.UserSessionView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSessionView.html#sign_in_with_apple_button/1","title":"CoreWeb.UserSessionView.sign_in_with_apple_button/1","type":"function"},{"doc":"","ref":"CoreWeb.UserSessionView.html#supported_languages/0","title":"CoreWeb.UserSessionView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.UserSessionView.html#template_not_found/2","title":"CoreWeb.UserSessionView.template_not_found/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSettingsController.html","title":"CoreWeb.UserSettingsController","type":"module"},{"doc":"","ref":"CoreWeb.UserSettingsController.html#confirm_email/2","title":"CoreWeb.UserSettingsController.confirm_email/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSettingsController.html#edit/2","title":"CoreWeb.UserSettingsController.edit/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSettingsController.html#update/2","title":"CoreWeb.UserSettingsController.update/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSettingsView.html","title":"CoreWeb.UserSettingsView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"CoreWeb.UserSettingsView.html#__resource__/0","title":"CoreWeb.UserSettingsView.__resource__/0","type":"function"},{"doc":"","ref":"CoreWeb.UserSettingsView.html#current_user/1","title":"CoreWeb.UserSettingsView.current_user/1","type":"function"},{"doc":"Renders the given template locally.","ref":"CoreWeb.UserSettingsView.html#render/2","title":"CoreWeb.UserSettingsView.render/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSettingsView.html#supported_languages/0","title":"CoreWeb.UserSettingsView.supported_languages/0","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"CoreWeb.UserSettingsView.html#template_not_found/2","title":"CoreWeb.UserSettingsView.template_not_found/2","type":"function"},{"doc":"","ref":"CoreWeb.UserSocket.html","title":"CoreWeb.UserSocket","type":"module"},{"doc":"","ref":"CoreWeb.VapidPublicKeyController.html","title":"CoreWeb.VapidPublicKeyController","type":"module"},{"doc":"","ref":"CoreWeb.ViewModel.Card.html","title":"CoreWeb.ViewModel.Card","type":"module"},{"doc":"","ref":"CoreWeb.ViewModel.Card.html#get_icon_url/2","title":"CoreWeb.ViewModel.Card.get_icon_url/2","type":"function"},{"doc":"","ref":"CoreWeb.ViewModel.Card.html#get_tags/1","title":"CoreWeb.ViewModel.Card.get_tags/1","type":"function"},{"doc":"","ref":"CoreWeb.ViewModel.Card.html#primary_study/2","title":"CoreWeb.ViewModel.Card.primary_study/2","type":"function"},{"doc":"","ref":"Eyra.Core.html","title":"Eyra.Core","type":"module"},{"doc":"","ref":"GoogleSignIn.html","title":"GoogleSignIn","type":"module"},{"doc":"","ref":"GoogleSignIn.html#get_user_by_sub/1","title":"GoogleSignIn.get_user_by_sub/1","type":"function"},{"doc":"","ref":"GoogleSignIn.html#register_user/1","title":"GoogleSignIn.register_user/1","type":"function"},{"doc":"","ref":"GoogleSignIn.html#routes/1","title":"GoogleSignIn.routes/1","type":"macro"},{"doc":"This controller manages the OpenID Connect flow with SurfConext. See this site for more info: https://sp.google_sign_in.nl/","ref":"GoogleSignIn.AuthorizePlug.html","title":"GoogleSignIn.AuthorizePlug","type":"module"},{"doc":"","ref":"GoogleSignIn.AuthorizePlug.html#call/2","title":"GoogleSignIn.AuthorizePlug.call/2","type":"function"},{"doc":"","ref":"GoogleSignIn.AuthorizePlug.html#init/1","title":"GoogleSignIn.AuthorizePlug.init/1","type":"function"},{"doc":"","ref":"GoogleSignIn.CallbackPlug.html","title":"GoogleSignIn.CallbackPlug","type":"module"},{"doc":"","ref":"GoogleSignIn.CallbackPlug.html#call/2","title":"GoogleSignIn.CallbackPlug.call/2","type":"function"},{"doc":"","ref":"GoogleSignIn.CallbackPlug.html#init/1","title":"GoogleSignIn.CallbackPlug.init/1","type":"function"},{"doc":"","ref":"GoogleSignIn.PlugUtils.html","title":"GoogleSignIn.PlugUtils","type":"module"},{"doc":"","ref":"GoogleSignIn.PlugUtils.html#config/1","title":"GoogleSignIn.PlugUtils.config/1","type":"function"},{"doc":"","ref":"GoogleSignIn.PlugUtils.html#google_module/1","title":"GoogleSignIn.PlugUtils.google_module/1","type":"function"},{"doc":"","ref":"GoogleSignIn.PlugUtils.html#log_in_user/3","title":"GoogleSignIn.PlugUtils.log_in_user/3","type":"function"},{"doc":"","ref":"GoogleSignIn.User.html","title":"GoogleSignIn.User","type":"module"},{"doc":"","ref":"GoogleSignIn.User.html#changeset/2","title":"GoogleSignIn.User.changeset/2","type":"function"},{"doc":"","ref":"Link.html","title":"Link","type":"module"},{"doc":"","ref":"Link.html#grants/0","title":"Link.grants/0","type":"function"},{"doc":"","ref":"Link.html#routes/0","title":"Link.routes/0","type":"function"},{"doc":"The home screen. Properties id :string, required: true - The id of the live view. session :map - The request info necessary for the view, such as params, cookie session info, etc. The session is signed and stored on the client, then provided back to the server when the client connects, or reconnects to the stateful view. .","ref":"Link.Dashboard.html","title":"Link.Dashboard","type":"module"},{"doc":"","ref":"Link.Dashboard.html#current_user/1","title":"Link.Dashboard.current_user/1","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_event/3 .","ref":"Link.Dashboard.html#handle_event/3","title":"Link.Dashboard.handle_event/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.handle_info/2 .","ref":"Link.Dashboard.html#handle_info/2","title":"Link.Dashboard.handle_info/2","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.mount/3 .","ref":"Link.Dashboard.html#mount/3","title":"Link.Dashboard.mount/3","type":"function"},{"doc":"Callback implementation for Phoenix.LiveView.render/1 .","ref":"Link.Dashboard.html#render/1","title":"Link.Dashboard.render/1","type":"function"},{"doc":"","ref":"Link.Dashboard.html#supported_languages/0","title":"Link.Dashboard.supported_languages/0","type":"function"},{"doc":"","ref":"Next.html","title":"Next","type":"module"},{"doc":"","ref":"SignInWithApple.html","title":"SignInWithApple","type":"module"},{"doc":"","ref":"SignInWithApple.html#get_user_by_sub/1","title":"SignInWithApple.get_user_by_sub/1","type":"function"},{"doc":"","ref":"SignInWithApple.html#register_user/1","title":"SignInWithApple.register_user/1","type":"function"},{"doc":"","ref":"SignInWithApple.html#routes/1","title":"SignInWithApple.routes/1","type":"macro"},{"doc":"","ref":"SignInWithApple.Backend.html","title":"SignInWithApple.Backend","type":"module"},{"doc":"See Assent.Strategy.Apple.authorize_url/1 .","ref":"SignInWithApple.Backend.html#authorize_url/1","title":"SignInWithApple.Backend.authorize_url/1","type":"function"},{"doc":"See Assent.Strategy.Apple.callback/2 .","ref":"SignInWithApple.Backend.html#callback/2","title":"SignInWithApple.Backend.callback/2","type":"function"},{"doc":"","ref":"SignInWithApple.CallbackPlug.html","title":"SignInWithApple.CallbackPlug","type":"module"},{"doc":"","ref":"SignInWithApple.CallbackPlug.html#call/2","title":"SignInWithApple.CallbackPlug.call/2","type":"function"},{"doc":"","ref":"SignInWithApple.CallbackPlug.html#init/1","title":"SignInWithApple.CallbackPlug.init/1","type":"function"},{"doc":"","ref":"SignInWithApple.Helpers.html","title":"SignInWithApple.Helpers","type":"module"},{"doc":"","ref":"SignInWithApple.Helpers.html#apply_defaults/1","title":"SignInWithApple.Helpers.apply_defaults/1","type":"function"},{"doc":"","ref":"SignInWithApple.Helpers.html#backend_module/1","title":"SignInWithApple.Helpers.backend_module/1","type":"function"},{"doc":"","ref":"SignInWithApple.Helpers.html#html_sign_in_button/2","title":"SignInWithApple.Helpers.html_sign_in_button/2","type":"function"},{"doc":"","ref":"SignInWithApple.Helpers.html#setup_session/2","title":"SignInWithApple.Helpers.setup_session/2","type":"function"},{"doc":"","ref":"SignInWithApple.User.html","title":"SignInWithApple.User","type":"module"},{"doc":"","ref":"SignInWithApple.User.html#changeset/2","title":"SignInWithApple.User.changeset/2","type":"function"},{"doc":"Eylixir: The Eyra Elixer SaaS platform","ref":"readme.html","title":"Eylixir:","type":"extras"},{"doc":"Development Setup","ref":"development_setup.html","title":"Development Setup","type":"extras"},{"doc":"For Windows; first install WSL2 and the Windows Terminal . Run all steps in the WSl2 environment. For OS X; install GnuPG, brew install gnupg . Install Visual Studio Code (or another editor) Checkout out the code locally Install ASDF Go to the checkout folder and run: ./setup.sh This will setup all required dependencies.","ref":"development_setup.html#setup","title":"Development Setup - Setup","type":"extras"},{"doc":"The project has several code quality tools in place. These can be automatically executed on commit &amp; push. Install pre-commit to enable this. Then run: pre - commit install","ref":"development_setup.html#pre-commit","title":"Development Setup - Pre-commit","type":"extras"},{"doc":"Get PostgreSQL: OS X ) Windows Now run the migrations with: mix ecto . migrate","ref":"development_setup.html#database","title":"Development Setup - Database","type":"extras"},{"doc":"The application is written in Elixir with use of the Phoenix web-framework. To start your Phoenix server: Start Phoenix endpoint with mix phx.server Now you can visit localhost:4000 from your browser. Learn more about Phoenix by visiting the official website","ref":"development_setup.html#phoenix","title":"Development Setup - Phoenix","type":"extras"},{"doc":"This project makes use of Gettext and Cldr for internationalization. The PO files can be found at priv/gettext/*/LC_MESSAGES/*.po . To extract new translation strings or to compile the PO files run: mix i18n","ref":"development_setup.html#i18n","title":"Development Setup - i18n","type":"extras"},{"doc":"Several linting tools are available to ensure code quality. They are: Credo ( mix credo ) mix format ( mix format ) Deployment","ref":"development_setup.html#linting-style","title":"Development Setup - Linting &amp; Style","type":"extras"},{"doc":"Gigalixir is used for deployment. To be able to the run the commands open a terminal (within Visual Studio Code). Further explaination on how to login etc. is in the documentation for Gigalixir . To manually deploy a version run: git push gigalixir master","ref":"development_setup.html#gigalixir","title":"Development Setup - Gigalixir","type":"extras"},{"doc":"GitHub Actions is used for continuous integration and deployment. It requires the following secrets to be confirured on the repository level (in the settings screen). GIGALIXIR_USERNAME GIGALIXIR_PASSWORD SSH_PRIVATE_KEY The SSH key is used to enable automatic database migrations. To create a deployment key run: ssh - keygen - t rsa - b 4096 - N &quot;&quot; - f deployment . key This creates two files deployment.key and deployment.key.pub . Run code deployment.key to open the private key and paste it's contents into a the GitHub secret called SSH_PRIVATE_KEY . Run the following command to enable the key in Gigalixir. gigalixir account :ssh_keys :add &quot;$(cat deployment.key.pub)&quot;","ref":"development_setup.html#continous-deployment","title":"Development Setup - Continous Deployment","type":"extras"},{"doc":"Enable branch protection on the master branch. This ensures that deployments work (the deployment does not do a force push to Gigalixir).","ref":"development_setup.html#github-branch-protections","title":"Development Setup - GitHub branch protections","type":"extras"},{"doc":"The application has a deeply integrated authorization system. It is described in detail in guides/authorization.md . To list the permission that and their role assignments run: mix grlt . perms","ref":"development_setup.html#authorization","title":"Development Setup - Authorization","type":"extras"},{"doc":"There are guides and code has comments to explain the functionality. The documentation can be converted into HTML or Epub with ExDoc. The command to generate the documentation is: mix docs","ref":"development_setup.html#documentation","title":"Development Setup - Documentation","type":"extras"},{"doc":"A mix task: content.generate is provided which creates some sample content. More info can be found in the module Mix.Tasks.Content.Generate module.","ref":"development_setup.html#test-content","title":"Development Setup - Test Content","type":"extras"},{"doc":"Authorization The authorization system provides protection against unauthorized access to data and operations. It makes use of the Green Light framework. All authorization functions and configuration are in the Link.Authorization module.","ref":"authorization.html","title":"Authorization","type":"extras"}]